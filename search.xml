<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中的高级语法</title>
    <url>/2020/12/23/Vue%E4%B8%AD%E7%9A%84%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Mixin-混入的基础语法"><a href="#Mixin-混入的基础语法" class="headerlink" title="Mixin 混入的基础语法"></a>Mixin 混入的基础语法</h1><p>组件 data、methods 优先级高于 mixin data、methods 优先级</p>
<p>生命周期函数，先执行 mixin 里面的，再执行组件里面的</p>
<p>methods 里面的内容，如果组件里面有相同的，则用组件的，否则则用 mixin 里面的</p>
<a id="more"></a>

<p><em>当组件里面没有相同数据的时候，会使用混入来的数据，如果有则不会覆盖原有数据</em></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myMixin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">num1</span>: <span class="number">2</span> &#125; &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;mixin created&#x27;</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123; <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;mixin handleClick&#x27;</span>) &#125; &#125;,</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">num</span>: <span class="number">1</span> &#125; &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将 myMixin 里面的数据混入</span></span></span><br><span class="line">        mixins: [myMixin],</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;myCreated&#x27;</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123; <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;handleClick&#x27;</span>) &#125; &#125;,</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">num1</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义的全局子组件若想使用则也需要 通过 mixins 指定接收</p>
<h2 id="定义全局-mixin"><a href="#定义全局-mixin" class="headerlink" title="定义全局 mixin"></a>定义全局 mixin</h2><p>不用声明，直接注入，但不推荐使用，代码维护性不高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">num</span>: <span class="number">1</span> &#125; &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;myCreated&#x27;</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123; <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;handleClick&#x27;</span>) &#125; &#125;,</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line">    app.mixin(&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">num1</span>: <span class="number">2</span>, <span class="attr">count</span>: <span class="number">222</span> &#125; &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;mixin created&#x27;</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        methods: &#123; <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;mixin handleClick&#x27;</span>) &#125; &#125;,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义的属性，组件中的属性优先级高于 mixin 属性的优先级</p>
<p><strong>$options：vue 的组件所有未做处理内容都会挂载其上面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myMixin = &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义的属性 num</span></span></span><br><span class="line">        num: 2,</span><br><span class="line"><span class="javascript">        <span class="comment">// mixins: [myMixin],</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// $options：vue 的组件所有未做处理内容都会挂载其上面</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: ` <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">this.$options.num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改优先级方法"><a href="#修改优先级方法" class="headerlink" title="修改优先级方法"></a>修改优先级方法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myMixin = &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line">        num: 2,</span><br><span class="line">        mixins: [myMixin],</span><br><span class="line"><span class="handlebars"><span class="xml">        template: ` <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">this.$options.num</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.config.optionMergeStrategies.num = <span class="function">(<span class="params">mixinVal, appVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果有 mixin value 则优先用，若没有则使用 app value</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> mixinVal || appVal</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注：不推荐使用 mixin（数据定位需要一层一层推断），在 Vue 3.x 中推荐使用 composition API （可维护性更高）</em></p>
<h1 id="实现-Vue-中的自定义指令"><a href="#实现-Vue-中的自定义指令" class="headerlink" title="实现 Vue 中的自定义指令"></a>实现 Vue 中的自定义指令</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 实现加载自动聚焦到输入框</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 没法被复用，因此需要封装一些指令</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.ipt.focus()</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$refs.ipt1.focus()</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;ipt&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;ipt1&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="封装自定义指令"><a href="#封装自定义指令" class="headerlink" title="封装自定义指令"></a>封装自定义指令</h2><h3 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义指令 directive</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 注册全局自定义指令</span></span></span><br><span class="line"><span class="javascript">    app.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 对应元素 el</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params">el</span>)</span> &#123;</span></span><br><span class="line">            el.focus()</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义指令 directive</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注册局部自定义指令</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> directives = &#123;</span></span><br><span class="line">        focus: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params">el</span>)</span> &#123;</span></span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line">        directives: directives,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义指令修改样式并携带参数"><a href="#自定义指令修改样式并携带参数" class="headerlink" title="自定义指令修改样式并携带参数"></a>自定义指令修改样式并携带参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 自定义指令修改样式并携带参数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                top: 200</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                &lt;div v-pos=<span class="string">&quot;top&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// app.directive(&#x27;pos&#x27;, &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     // 不足之处在于如果 vue 实例里面的数据变化</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     // 由于此处是 mounted 并不会重新执行</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     // 可以利用 updated</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     mounted(el, binding) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         el.style.top = (binding.value + &#x27;px&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     updated(el, binding) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         el.style.top = (binding.value + &#x27;px&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 上面代码简写（mounted 与 updated 共存并且代码一致时可简写）</span></span></span><br><span class="line"><span class="javascript">    app.directive(<span class="string">&#x27;pos&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        el.style.top = (binding.value + <span class="string">&#x27;px&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue3-新特性"><a href="#Vue3-新特性" class="headerlink" title="Vue3 新特性"></a>Vue3 新特性</h1><h2 id="Teleport-传送门功能"><a href="#Teleport-传送门功能" class="headerlink" title="Teleport 传送门功能"></a>Teleport 传送门功能</h2><p>通过 teleport 传送门功能能够把一个组件里面的某些元素或者某些组件直接挂到其他 DOM 位置上</p>
<p>实现 mask 在整个窗口，由于 mask 是在 area 里面，并且 area 带有定位，因此 mask 绝对定位后还是在 area 里面，所以就需要一个传送门的功能实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.area</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate(-50%, -50%);</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 意为在渲染的时候把 teleport 里面的标签渲染到 body 标签上，而不是在 area 里</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 并且该标签里面的作用域还是 vue 的实例范围</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;area&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                    &lt;div v-show=<span class="string">&quot;show&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mask&quot;</span>&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>也可以在 body 中定义接收的 class 或 id 标签，然后通过 teleport 标签里面 to=”#hello” 或 to=”.hello”</strong></p>
<h1 id="Vue-更加底层的-render-函数"><a href="#Vue-更加底层的-render-函数" class="headerlink" title="Vue 更加底层的 render 函数"></a>Vue 更加底层的 render 函数</h1><p>通过冗余的语法展示不同级别的 h 标签，代码不优雅</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">my-title</span> <span class="attr">:level</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span></span><br><span class="line">            hello</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;my-title&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;level&#x27;</span>],</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span> /&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span> /&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span> /&gt;</span> <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line">            ...</span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>render function 优化后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// render function</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">my-title</span> <span class="attr">:level</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span></span></span><br><span class="line">            hello</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">my-title</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;my-title&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;level&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; h &#125; = Vue;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可能会有很多插槽 所以 slots</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 用里面默认的插槽 所以 default()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 返回的实际上是 虚拟 DOM</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, &#123;&#125;, <span class="built_in">this</span>.$slots.default())</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上 template 在底层编译后会生成 render 函数，render 函数再返回虚拟 DOM （DOM 节点 JS 对象表述）</p>
<p>比如说下面代码，一个真实 DOM 的 div，虚拟 DOM 通过 JS 对象表述这个标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 真实存在的 DOM 可以被映射成下方的虚拟 DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟 DOM</span></span><br><span class="line">&#123;</span><br><span class="line">	tagName: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">	text: hello,</span><br><span class="line">	attributes: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种虚拟 DOM 方式会有两个好处：</p>
<ul>
<li>让 Vue 的性能更快</li>
<li>让 Vue 具备跨平台的能力</li>
</ul>
<p><strong>小结</strong>：template -&gt; render -&gt; h 函数 -&gt; 虚拟 DOM（JS 对象）-&gt; 真实 DOM -&gt; 展示到页面</p>
<h1 id="插件的定义和使用"><a href="#插件的定义和使用" class="headerlink" title="插件的定义和使用"></a>插件的定义和使用</h1><p>plugin 插件：把通用性的功能封装起来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myPlugin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 插件运行时会走的逻辑</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 两个参数，一个是 vue 实例，一个是 options 额外的参数 ( app.use 传递过来的对象)</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">install</span>(<span class="params">vue, options</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 vue 实例扩展全局数据</span></span></span><br><span class="line"><span class="javascript">            app.provide(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 vue 实例扩展自定义指令</span></span></span><br><span class="line"><span class="javascript">            app.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">mounted</span>(<span class="params">el</span>)</span> &#123;</span></span><br><span class="line">                    el.focus()</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 vue 实例扩展 mixin 混入</span></span></span><br><span class="line">            app.mixin(&#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 打印两次的原因是 app 下每个组件挂载都会执行</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 根组件与子组件挂载都会打印</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;mixin&#x27;</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 vue 实例扩展全局属性扩展(加 $ 后可认为是 vue 底层私有的东西)</span></span></span><br><span class="line"><span class="javascript">            app.config.globalProperties.$sayHello = <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">`&lt;my-title /&gt;`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;my-title&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        inject: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$sayHello)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.use(myPlugin, &#123; <span class="attr">name</span>: <span class="string">&#x27;dell&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数据校验插件开发实例"><a href="#数据校验插件开发实例" class="headerlink" title="数据校验插件开发实例"></a>数据校验插件开发实例</h1><p>当去扩展 vue 的一些语法，做一些自定义的东西时候，可以通过 Plugin 封装 mixin 方式做，可读性与可扩展性都比较好</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 对数据做校验的插件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125; &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果单独写 rules , Vue 不会识别，因此需要封装插件</span></span></span><br><span class="line">        rules: &#123;</span><br><span class="line">            age: &#123;</span><br><span class="line"><span class="javascript">                validate: <span class="function">(<span class="params">age</span>) =&gt;</span> age &gt; <span class="number">25</span>,</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;too young, too simple&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>name:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">, age:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// app.mixin(&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     created() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         for (let key in this.$options.rules) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             const item = this.$options.rules[key]</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             // this 是 vue 的实例，因此可以使用 watch 对 age 做监控</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             this.$watch(key, (newValue, oldValue) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//                 const result = item.validate(newValue)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//                 if (!result) console.log(item.message)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//             &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 代码改成 Plugin 的方式</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// const validatorPlugin = &#123; install(app, options) &#123; &#125; &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 或者不写 install 直接写</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> validatorPlugin = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span></span><br><span class="line">        app.mixin(&#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="built_in">this</span>.$options.rules) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> item = <span class="built_in">this</span>.$options.rules[key]</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this 是 vue 的实例，因此可以使用 watch 对 age 做监控</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$watch(key, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> result = item.validate(newValue)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (!result) <span class="built_in">console</span>.log(item.message)</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    app.use(validatorPlugin)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue3.x高级语法篇</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>高级语法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next主题样式美化</title>
    <url>/2020/11/18/hexo-next%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>首先新建一篇文章，在命令行输入：hexo n “文章名”，就会在博客的根目录的\source_posts下面新增一篇命名的文章，此时就可以使用Typora编辑器写博客了。</p>
 <a id="more"></a> 

<h1 id="主页设置阅读全文"><a href="#主页设置阅读全文" class="headerlink" title="主页设置阅读全文"></a>主页设置阅读全文</h1><p>目前我在新版的next主题配置文件中还没找到这一项的开启方法，但是可以通过对md文章中增加一个下面的这个标签即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt; </span><br></pre></td></tr></table></figure>

<p>比如：</p>
<p><img src="%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87.jpg"></p>
<h1 id="设置动态背景"><a href="#设置动态背景" class="headerlink" title="设置动态背景"></a>设置动态背景</h1><p>在next/layout/_layout.swig的body结束标签之前加入这几行代码  （由于我的博客使用的是next主题，因此next是在博客根目录下themes里面的文件夹）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件中的末尾加入  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>

<p>然后分别执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>重启服务器后，刷新页面就会出现动态背景的效果  </p>
<h1 id="添加右上角的fork-Github的小猫"><a href="#添加右上角的fork-Github的小猫" class="headerlink" title="添加右上角的fork Github的小猫"></a>添加右上角的fork Github的小猫</h1><p>在下面的地址中选择好样式后复制右边多行代码，打开next/layout/_layout.swig在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;headband&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这个标签的下一行黏贴过去，把开头的url换成自己的github地址，然后命令行中输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="Github%E7%9A%84%E5%B0%8F%E7%8C%AB.jpg"></p>
<h1 id="修改底部标签前面的-样式"><a href="#修改底部标签前面的-样式" class="headerlink" title="修改底部标签前面的#样式"></a>修改底部标签前面的#样式</h1><p>字体图标地址：<a href="https://fontawesome.com/icons?d=gallery&amp;q=fa-">https://fontawesome.com/icons?d=gallery&amp;q=fa-</a></p>
<p>打开next\layout_macro下面的post.swig，修改此处为i标签类名在网址中根据自己选择（需要在网址中选中并弹出字体图标网页，在图标的下面会有例如   fa fa-tag   字样，选中复制即可）。</p>
<p><img src="%E4%BF%AE%E6%94%B9%E5%BA%95%E9%83%A8%E6%A0%87%E7%AD%BE%E6%A0%B7%E5%BC%8F.jpg"></p>
<h1 id="来必力评论系统"><a href="#来必力评论系统" class="headerlink" title="来必力评论系统"></a>来必力评论系统</h1><p>官网：<a href="https://livere.com/">https://livere.com/</a></p>
<p>在官网注册后，在管理页面的代码管理中，复制一般网站栏代码中的data-uid后面的代码，然后粘贴到主题配置文件中对应的位子即可</p>
<p><img src="livere_uid.jpg"></p>
<h1 id="增加搜索功能"><a href="#增加搜索功能" class="headerlink" title="增加搜索功能"></a>增加搜索功能</h1><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</p>
<p>npm install hexo-generator-searchdb –save</p>
<p>编辑根目录下的配置文件，新增以下内容到任意位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>编辑 主题配置文件，启用本地搜索功能：</p>
<p><img src="%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD.jpg"></p>
<h1 id="添加字数统计和阅读时长"><a href="#添加字数统计和阅读时长" class="headerlink" title="添加字数统计和阅读时长"></a>添加字数统计和阅读时长</h1><p>添加字数统计和阅读时长</p>
<p>命令行cd到根目录下执行     npm install hexo-symbols-count-time –save</p>
<p>如果安装完报如下提醒，还需安装eslint</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\hexo\blog&gt;npm install hexo-symbols-count-time --save</span><br><span class="line">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;&#x3D; 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure>

<p>安装eslint      npm install eslint –save</p>
<p>在站点配置文件添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true                # 文章字数统计</span><br><span class="line">  time: true                   # 文章阅读时长</span><br><span class="line">  total_symbols: true          # 站点总字数统计</span><br><span class="line">  total_time: true             # 站点总阅读时长</span><br><span class="line">  exclude_codeblock: false     # 排除代码字数统计</span><br></pre></td></tr></table></figure>

<p>在NexT主题配置文件添加如下配置（NexT主题已支持该插件，有的话无需再添加）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true     # 是否另起一行（true的话不和发表时间等同一行）</span><br><span class="line">  item_text_post: true     # 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span><br><span class="line">  item_text_total: false   # 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span><br><span class="line">  awl: 4                   # Average Word Length</span><br><span class="line">  wpm: 275                 # Words Per Minute（每分钟阅读词数）</span><br><span class="line">  suffix: mins.</span><br></pre></td></tr></table></figure>

<p>完成后命令三连即可…</p>
<h1 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h1><p>github地址：<a href="https://github.com/theme-next/theme-next-pace">https://github.com/theme-next/theme-next-pace</a></p>
<p>先cd到next文件夹下，然后执行</p>
<p>git clone <a href="https://github.com/theme-next/theme-next-pace">https://github.com/theme-next/theme-next-pace</a> source/lib/pace</p>
<p>然后在主题的配置文件下设置true开启加载动画</p>
<p><img src="%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB.jpg"></p>
<h1 id="隐藏底部的强力驱动"><a href="#隐藏底部的强力驱动" class="headerlink" title="隐藏底部的强力驱动"></a>隐藏底部的强力驱动</h1><p>最新的next主题，在主题配置文件下改power为false即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Powered by Hexo &amp; NexT</span><br><span class="line"> powered: false</span><br></pre></td></tr></table></figure>

<h1 id="更换页面的背景图片"><a href="#更换页面的背景图片" class="headerlink" title="更换页面的背景图片"></a>更换页面的背景图片</h1><p>首先在主题配置文件中找到custom_file_path字段，将最后一行的注释解开  </p>
<p><img src="%E6%9B%B4%E6%8D%A2%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.jpg"></p>
<p>在博客的根目录下source文件夹下新建文件夹名为_data，然后在_data文件夹下新建文件styles，将其后缀改为styl，然后将下面代码写入写入此新建文件中，并且在主题文件夹下source的images里面放一张背景图，名为background.jpg（名与下面代码中url中文件名一致）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> 	background:url(<span class="regexp">/images/</span>background.jpg);</span><br><span class="line"> 	background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:<span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务器即可  </p>
<p>但是由于我们文章是不透明的，影响了我们的美观，我们还得修改一下透明度（代码如下，依旧放在styles.styl文件内）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完毕后分别输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h1 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h1><p>在主题配置文件中搜索back2top:，我们可以看到共有三个可选配置项。其作用分别如下。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  # 开启右下角的回到顶部箭头</span><br><span class="line">  enable: true</span><br><span class="line">  # 将回到顶部按钮改到侧边栏下方</span><br><span class="line">  sidebar: false</span><br><span class="line">  # 回到顶部不止显示箭头，也显示阅读进度百分比</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h1 id="next主题的点击爱心"><a href="#next主题的点击爱心" class="headerlink" title="next主题的点击爱心"></a>next主题的点击爱心</h1><p>创建js文件</p>
<p>在/themes/next/source/js/src下新建文件clicklove.js，接着把该代码拷贝粘贴到clicklove.js文件中。<br> 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX-<span class="number">5</span>,<span class="attr">y</span>:e.clientY-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="function"><span class="title">catch</span>(<span class="params">t</span>)</span>&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>修改_layout.swig，在\themes\next\layout_layout.swig文件末尾添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>命令行分别输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>完成后刷新页面即可。</p>
<p>后续有其他的美化操作会继续更新…</p>
<p>如果有什么问题或者技术交流，欢迎在下方发布渠道二维码联系我或者文章底部留言。 </p>
]]></content>
      <categories>
        <category>从0搭建博客及美化</category>
      </categories>
      <tags>
        <tag>hexo新增博客文章</tag>
        <tag>next主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目开发配套工具</title>
    <url>/2020/12/26/Vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%85%8D%E5%A5%97%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><strong>VueCLI 的使用和单文件组件</strong></p>
<p>开发环境需要  <a href="https://nodejs.org/zh-cn/">nodejs</a> 的支持，安装好之后，如果觉得 npm 速度慢，可以在命令行中执行 <code>npm i nrm -g</code></p>
<p>可以 <code>nrm ls</code>查看国内镜像源，可以用淘宝的 <code>nrm use taobao</code>，就可以切换到淘宝镜像源。</p>
<p>如果之前用过 VueCLI 可以先 uninstall 一下，然后再装最新版脚手架：<code>npm install -g @vue/cli</code>，<code>vue -V</code> 查看版本</p>
<a id="more"></a>

<h1 id="创建-Vue-项目"><a href="#创建-Vue-项目" class="headerlink" title="创建 Vue 项目"></a>创建 Vue 项目</h1><p>可通过 <code>vue create yourProjectName</code> 创建，通过命令提示创建（空格勾选、回车确认），最后根据提示命令来运行项目</p>
<p>首先查看创建的目录结构，一般来说作为一个工程来说，源代码都放在 src 目录下， 入口文件为 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件 main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// App 组件来自 当前目录下 App.vue 文件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createApp 创建一个 vue 的应用，然后挂到页面上 id=&quot;app&quot; 的 DOM 节点上</span></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>App.vue 文件(一个简单组件)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">  &lt;!-- 父组件传递 msg --&gt;</span><br><span class="line">  &lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>HelloWorld.vue 子组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  &#x2F;&#x2F; 子组件接收父组件传递的值</span><br><span class="line">  props: &#123; msg: String &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>app.vue 文件我们把它叫做单文件组件（SPA），即一个文件代表一个组件</strong></p>
<h1 id="使用单文件组件编写-TodoList"><a href="#使用单文件组件编写-TodoList" class="headerlink" title="使用单文件组件编写 TodoList"></a>使用单文件组件编写 TodoList</h1><p>可以直接在 app.vue 里面编写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input v-model&#x3D;&quot;iptVal&quot; &#x2F;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn&quot; @click&#x3D;&quot;handleSubmit&quot;&gt;submit&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li :key&#x3D;&quot;item&quot; v-for&#x3D;&quot;item in list&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const list &#x3D; reactive([]);</span><br><span class="line">        const iptVal &#x3D; ref(&quot;&quot;);</span><br><span class="line">        const handleSubmit &#x3D; function () &#123;</span><br><span class="line">            list.push(iptVal.value);</span><br><span class="line">            iptVal.value &#x3D; &quot;&quot;;</span><br><span class="line">        &#125;;</span><br><span class="line">        return &#123; list, iptVal, handleSubmit &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.btn &#123; margin-left: 20px; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue-Router-路由的理解和使用"><a href="#Vue-Router-路由的理解和使用" class="headerlink" title="Vue-Router 路由的理解和使用"></a>Vue-Router 路由的理解和使用</h1><p>创建项目时加入 Router 选项</p>
<p>main.js 入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入路由插件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了路由插件</span></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>路由是指根据 url 的不同，展示不同内容，如果没设置历史模式，则会使用的是 hash 模式，即网页地址中带有 # 号</p>
<p>src/router/index.js 文件中的路由规则</p>
<p><strong>异步加载路由</strong>：当访问首页，并不会加载 about 页面，只有访问 about 页面的时候，才会加载 about 页面的代码，缺点是点击其他页面可能会带来延时或卡顿等</p>
<p>如果不适用懒加载语法，直接同步路由，则当第一次访问页面，会一次性将所有页面的代码全部加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">        component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span></span><br><span class="line">        	<span class="comment">// 懒加载的语法，也称异步加载路由</span></span><br><span class="line">            <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>src/App.vue 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">        &lt;!-- router-link 是跳转路由的标签 --&gt;</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">        &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- router-view 负责展示当前路由对应的组件内容 --&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h1 id="VueX-的语法"><a href="#VueX-的语法" class="headerlink" title="VueX 的语法"></a>VueX 的语法</h1><p>入口文件 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了一个全局的仓库 store</span></span><br><span class="line">createApp(App).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="定义全局数据"><a href="#定义全局数据" class="headerlink" title="定义全局数据"></a>定义全局数据</h2><p>store 中 index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// VueX 是一个数据管理框架</span></span><br><span class="line"><span class="comment">// VueX 创建了一个全局唯一的仓库，用来存放全局的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">  state: &#123; </span><br><span class="line">    <span class="comment">// 自定义的数据</span></span><br><span class="line">  	name: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123; &#125;,</span><br><span class="line">  actions: &#123; &#125;,</span><br><span class="line">  modules: &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="组件中使用全局数据"><a href="#组件中使用全局数据" class="headerlink" title="组件中使用全局数据"></a>组件中使用全局数据</h2><p>home.vue 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">        &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; myName &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Home&quot;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        myName() &#123;</span><br><span class="line">            return this.$store.state.name;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="修改全局数据"><a href="#修改全局数据" class="headerlink" title="修改全局数据"></a>修改全局数据</h2><p>对 VueX 创建的全局的仓库中数据做修改，VueX 提供了修改的机制</p>
<ul>
<li>首先不允许直接在组件方法中做修改 （<code>this.$store.state.name = &quot;lisi&quot;</code>，行不通）</li>
</ul>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>调用 dispatch 方法，派发一个 action，名字叫做 change</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- src&#x2F;views&#x2F;About.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">        &lt;h1 @click&#x3D;&quot;handleClick&quot;&gt;This is an about page&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; myName &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Home&quot;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        myName() &#123;</span><br><span class="line">            return this.$store.state.name;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            &#x2F;&#x2F; 第一步</span><br><span class="line">            &#x2F;&#x2F; 想改变数据，vuex 要求第一步，必须派发一个 action</span><br><span class="line">            this.$store.dispatch(&quot;change&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在 store 里面接收派发过来的动作， store 感知到触发了一个叫做 change 的 action，执行 change 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 第二步</span></span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;change&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>提交一个 commit 触发一个 mutation</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 第三步</span></span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.commit(<span class="string">&quot;change1&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>对应的 mutation 被执行，并修改数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="comment">// 第四步</span></span><br><span class="line">        <span class="function"><span class="title">change1</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.state.name = <span class="string">&quot;lisi&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.commit(<span class="string">&quot;change1&quot;</span>) &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>1.调用 dispatch 方法，派发—个 action，名字叫做 change</li>
<li>2.感知到 change 这个 action，执行 store 中 actions 下面的 change 方法</li>
<li>3.commit 提交一个叫做 change 的数据攻变</li>
<li>4.mutation 感知到提交的 change 改变，执行 change 方法改变数据</li>
</ul>
<p>如果只是同步修改数据（不涉及异步操作）则可以省略一二步，在组件方法里直接用 <code>this.$store.commit(&#39;change&#39;)</code>，然后在 mutation 里面执行第四步即可</p>
<ul>
<li>dispatch 和 actions 做关联</li>
<li>commit 和 mutation 做关联</li>
</ul>
<p>也可传递参数，但是在 store 里面 actions 与 mutations <code>change(store, params) &#123; this.commit(&quot;change1&quot;, params) &#125;</code>、<code>change1(store, params) &#123; this.state.name = params &#125;</code>第二个参数才为接收的数据</p>
<p><em>注：<strong>mutation 里面只允许写同步代码</strong>，不允许写异步代码，需要在 actions 里面写异步逻辑，因此 action  的作用体现出来了</em></p>
<h1 id="Composition-API-里面使用-VueX"><a href="#Composition-API-里面使用-VueX" class="headerlink" title="Composition API 里面使用 VueX"></a>Composition API 里面使用 VueX</h1><h2 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">        &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 从 vuex 里面引入 useStore 方法</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取到 store</span><br><span class="line">        const store &#x3D; useStore();</span><br><span class="line">        const name &#x3D; store.state.name;</span><br><span class="line">        return &#123; name &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="toRefs-解构展示数据"><a href="#toRefs-解构展示数据" class="headerlink" title="toRefs 解构展示数据"></a>toRefs 解构展示数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">        &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; toRefs &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Home&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const store &#x3D; useStore();</span><br><span class="line">        const &#123; name &#125; &#x3D; toRefs(store.state);</span><br><span class="line">        return &#123; name &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模拟异步修改事件"><a href="#模拟异步修改事件" class="headerlink" title="模拟异步修改事件"></a>模拟异步修改事件</h2><p>about.vue 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">        &lt;h1 @click&#x3D;&quot;handleClick&quot;&gt;This is an about page&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; toRefs &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;About&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const store &#x3D; useStore();</span><br><span class="line">        const &#123; name &#125; &#x3D; toRefs(store.state);</span><br><span class="line">        const handleClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            store.dispatch(&quot;change&quot;, &quot;lisi&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        return &#123; name, handleClick &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>store 中的 index.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">change1</span>(<span class="params">store, str</span>)</span> &#123;</span><br><span class="line">            store.name = str</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params">store, str</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                store.commit(<span class="string">&quot;change1&quot;</span>, str)</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用-axios-发送-ajax-请求"><a href="#使用-axios-发送-ajax-请求" class="headerlink" title="使用 axios 发送 ajax 请求"></a>使用 axios 发送 ajax 请求</h1><p>首先需要安装 <code>npm i axios --save</code>，一个请求发送工具，然后重新运行 <code>npm run serve</code></p>
<p>about.vue 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">        &lt;h1 @click&#x3D;&quot;handleClick&quot;&gt;This is an about page&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; toRefs &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useStore &#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;About&quot;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        const store &#x3D; useStore();</span><br><span class="line">        const &#123; name &#125; &#x3D; toRefs(store.state);</span><br><span class="line">        const handleClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">            store.dispatch(&quot;change&quot;);</span><br><span class="line">        &#125;;</span><br><span class="line">        return &#123; name, handleClick &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>store 中的 index.js 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试发送的接口请求</span></span><br><span class="line"><span class="comment">// https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/register</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;暂无信息&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// mutation 不可异步！！！</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">change1</span>(<span class="params">store, msg</span>)</span> &#123;</span><br><span class="line">            store.name = msg</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params">store</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> url =</span><br><span class="line">                <span class="string">&quot;https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/register&quot;</span></span><br><span class="line">            <span class="comment">// 异步</span></span><br><span class="line">            axios.get(url).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> msg = response.data.message</span><br><span class="line">                store.commit(<span class="string">&quot;change1&quot;</span>, msg)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看出通过 axios 这样的工具便携的向某些接口发送请求，然后获取到数据进行页面展示</p>
]]></content>
      <categories>
        <category>Vue3.0 项目开发配套工具</category>
      </categories>
      <tags>
        <tag>VueX</tag>
        <tag>Vue-Router</tag>
        <tag>axios</tag>
        <tag>VueCLI</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell字符串缺少终止符错误</title>
    <url>/2020/12/01/powershell%E6%8A%A5%E5%AD%97%E7%AC%A6%E9%94%99%E7%BC%BA%E5%B0%91%E7%BB%88%E6%AD%A2%E7%AC%A6%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>通常我打开某个文件夹 powershell 的方式是在这个文件夹下同时按 shift + 鼠标右键，但是今天在打开的时候 powershell 居然报了下面的错误：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">字符串缺少终止符: <span class="string">&#x27;。</span></span><br><span class="line"><span class="string">    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException</span></span><br><span class="line"><span class="string">    + FullyQualifiedErrorId : TerminatorExpectedAtEndOfString</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>然后毫无以外的 powershell 文件夹切换也没成功。。。</p>
<p>直接 powershell 用切换命令，毫无意外的也跪了…</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;D:\Chao&#x27;s Blog&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<p>看了一眼报错信息发现是没有终止字符，我的文件夹的名如下图</p>
<p><img src="image-20201201082804013.png" alt="image-20201201082804013"></p>
<p>原来是这个单引号 ‘ 搞的，<strong>先说解决方法</strong>，<strong>直接删掉这个 ‘s 前面的 ‘</strong> </p>
<p>如果此时末尾给个闭合的 ‘ , 会报如下的错误</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-Location</span> : 找不到接受实际参数“s”的位置形式参数。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">1</span></span><br><span class="line">+ <span class="built_in">Set-Location</span> <span class="literal">-literalPath</span> <span class="string">&#x27;D:\Chao&#x27;</span>s Blog<span class="string">&#x27;&#x27;</span></span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidArgument: (:) [<span class="built_in">Set-Location</span>]，ParameterBindingException</span><br><span class="line">    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.SetLocationCommand</span><br></pre></td></tr></table></figure>

<p>所以平时我们命名文件夹，不建议加符号之类的。</p>
]]></content>
      <categories>
        <category>PowerShell命令行报错</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
        <tag>字符串缺少终止符</tag>
      </tags>
  </entry>
  <entry>
    <title>前端简历-面试准备及技巧</title>
    <url>/2020/12/13/%E5%89%8D%E7%AB%AF%E7%AE%80%E5%8E%86-%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="什么是面试"><a href="#什么是面试" class="headerlink" title="什么是面试"></a>什么是面试</h1><ul>
<li><p>经过组织者精心设计</p>
</li>
<li><p>以交谈和观察为主要手段</p>
</li>
<li><p>评价知识、能力和经验，综合素质</p>
</li>
</ul>
<p><strong>如果有机会一定要去现场面试！</strong></p>
<a id="more"></a>

<p><strong>保持积极乐观自信向上的态度和表情，在被问到问题时需要表现出积极的的态度。</strong></p>
<h1 id="公司如何拿到你的简历"><a href="#公司如何拿到你的简历" class="headerlink" title="公司如何拿到你的简历"></a>公司如何拿到你的简历</h1><ul>
<li><p>员工内推推荐这种，这种是最好的方式</p>
</li>
<li><p>猎头推荐</p>
</li>
<li><p>hr收集（主动搜索，接收邮件）</p>
</li>
</ul>
<p><strong>切记三选一！！！</strong></p>
<p><strong>分辨 骗技术经验的面试、以及小公司</strong></p>
<h1 id="面试流程"><a href="#面试流程" class="headerlink" title="面试流程"></a>面试流程</h1><ul>
<li>一面</li>
<li>二面（交叉面试）</li>
<li>三面</li>
<li>hr面</li>
</ul>
<p><strong>一面</strong>都会考察基础知识（基层工程师面试官）</p>
<p><strong>二面</strong>也是以基础知识到框架原理到计算机原理到业务场景（项目经验），始于基础知识（原理）终于项目经验 -&gt; （交叉面试：包含多个不同部门面试官面试）（如果是应届毕业生，自己做的小项目，在项目经验这一块不会问太多） </p>
<p><strong>三面</strong>项目leader或者组织leader，讲一下你在组里定位，讲一下某个项目想法（纯技术问题比较少），但是这一块也挺重要，直接决定了你在leader心中的水平</p>
<p><strong>四面</strong>hr面试在这一块一定为人要低调，在大厂有一票否决权（如阿里、腾讯），表现出阳光积极这样的态度，在谈薪资的时候要稍微放低一下姿态去说，不要带有任何的情绪，比较踏实就可以</p>
<h1 id="校招和社招的区别"><a href="#校招和社招的区别" class="headerlink" title="校招和社招的区别"></a>校招和社招的区别</h1><ul>
<li>校招看中基础知识和能力，主要在一面  </li>
<li>社招看中经验，主要在二面（基础知识要过关） </li>
<li>社招，工作时间越长，越偏重经验   </li>
</ul>
<h1 id="JD是什么"><a href="#JD是什么" class="headerlink" title="JD是什么"></a>JD是什么</h1><ul>
<li>JD是用人单位发布的招聘信息  </li>
<li>职位描述  </li>
<li>岗位要求  </li>
</ul>
<p><strong>JD分析：分析日常在平台上看到的一些用人单位发布的一些用人需求并解读</strong></p>
<h1 id="从JD中能看到什么"><a href="#从JD中能看到什么" class="headerlink" title="从JD中能看到什么"></a>从JD中能看到什么</h1><ul>
<li><p>工作内容</p>
</li>
<li><p>技术栈</p>
</li>
<li><p>经验要求 </p>
</li>
</ul>
<h1 id="不要过于在意JD"><a href="#不要过于在意JD" class="headerlink" title="不要过于在意JD"></a>不要过于在意JD</h1><ul>
<li><p>JD是hr发布的</p>
</li>
<li><p>hr和技术人员可能会沟通不及时</p>
</li>
<li><p>不能完全相信JD的要求</p>
</li>
</ul>
<p><strong>不要被JD劝退！！！！！</strong></p>
<h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><h2 id="简历包含的内容"><a href="#简历包含的内容" class="headerlink" title="简历包含的内容"></a>简历包含的内容</h2><ul>
<li>个人信息</li>
<li>教育经历</li>
<li>专业技能</li>
<li>工作经历（没有省去）</li>
<li>项目经历（或者个人项目）</li>
<li>博客和开源</li>
</ul>
<p>一定要按照上面从上到下的顺序写简历</p>
<p>此处说明最后的个人评价和个人爱好啥的都没有用，直接就不要写。</p>
<h2 id="简历内容-基本信息"><a href="#简历内容-基本信息" class="headerlink" title="简历内容-基本信息"></a>简历内容-基本信息</h2><ul>
<li>必备：姓名、性别、电话、邮箱、籍贯</li>
<li>年龄可不写（能从教育经历评估出来），建议年龄写上</li>
<li>头像无所谓，特别好看可以放上</li>
</ul>
<h2 id="简历内容-教育经历"><a href="#简历内容-教育经历" class="headerlink" title="简历内容-教育经历"></a>简历内容-教育经历</h2><ul>
<li>写上最高学历即可</li>
<li>学校，专业，入学和毕业时间</li>
<li>不要写上高中，显的很不专业</li>
</ul>
<p>教育经历可以尽量屏蔽掉不好的学校，竞争力没那么好的一些信息，所以只写最高学历就行了</p>
<h2 id="简历内容-专业技能"><a href="#简历内容-专业技能" class="headerlink" title="简历内容-专业技能"></a>简历内容-专业技能</h2><ul>
<li>表现出自己的核心竞争力</li>
<li>内容不要太多，3、5条即可</li>
<li>太基础的不要写，例如会用 vscode</li>
</ul>
<h2 id="简历内容-项目经历"><a href="#简历内容-项目经历" class="headerlink" title="简历内容-项目经历"></a>简历内容-项目经历</h2><ul>
<li>写2-4个具有说服力的项目（视工作时间）</li>
<li>项目描述，技术栈，个人角色</li>
<li>技巧：可以把别人的项目写上，只要你能hold住，能说圆了就可以</li>
</ul>
<h2 id="简历内容-博客或开源"><a href="#简历内容-博客或开源" class="headerlink" title="简历内容-博客或开源"></a>简历内容-博客或开源</h2><ul>
<li>有博客或者开源作品，会让你更有竞争力</li>
<li>切记:需要真的有内容，不可临时抱佛脚</li>
<li>可以从现在开始，慢慢积累（种一棵树最好的时间是十年前，其次就是现在）</li>
</ul>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>界面不要太花哨，简洁明了即可</li>
<li>注意用词，”精通”、”熟练”等慎用</li>
<li>不可造假，会被拉入黑名单（项目经历那里，不是造假！！）</li>
<li>求职意向可写可不写</li>
</ul>
<h1 id="面试前的准备工作"><a href="#面试前的准备工作" class="headerlink" title="面试前的准备工作"></a>面试前的准备工作</h1><ul>
<li><p>看JD，是否需要临时准备一下</p>
</li>
<li><p>打印纸质简历，带着纸和笔</p>
</li>
<li><p>最好带着自己的电脑，现场可能手写代码</p>
</li>
</ul>
<h1 id="面试前的注意事项-1"><a href="#面试前的注意事项-1" class="headerlink" title="面试前的注意事项 - 1"></a>面试前的注意事项 - 1</h1><ul>
<li><p>要有时间观念，如果迟到或者推迟，要提前说</p>
</li>
<li><p>衣着适当，不用正装，也不要太随意</p>
</li>
<li><p>为何离职？——不要吐槽前东家，说自己的原因</p>
</li>
</ul>
<h1 id="面试前的注意事项-2"><a href="#面试前的注意事项-2" class="headerlink" title="面试前的注意事项 - 2"></a>面试前的注意事项 - 2</h1><ul>
<li><p>能加班吗？——能！除非你特别自信，能找到其他机会</p>
</li>
<li><p>不要挑战面试官，即便他错了</p>
</li>
<li><p>遇到不会的问题，要表现出自己积极的一面</p>
</li>
</ul>
<p><strong>如果遇到不太会的问题，可以思考一两分钟，或者和面试官说可不可以给个思路引导一下，如果实在不会，可以和面试官说这个我确实不会，要不然和我说说答案，或者告诉我这个问题哪里可以查到这个问题，我回去再研究研究去，我觉得这确实是我自己知识的一个盲区。</strong></p>
]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>前端简历</tag>
        <tag>面试准备</tag>
        <tag>面试技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo更换next主题及部分配置功能的启用</title>
    <url>/2020/11/18/hexo%E6%9B%B4%E6%8D%A2next%E4%B8%BB%E9%A2%98%E5%8F%8A%E9%83%A8%E5%88%86%E9%85%8D%E7%BD%AE%E5%8A%9F%E8%83%BD%E7%9A%84%E5%90%AF%E7%94%A8/</url>
    <content><![CDATA[<p>默认hexo博客框架使用的主题是landscape，而每个人对自己页面主题样式文本的喜好不同，所以接下来通过next主题案例来介绍如何更换主题及部分配置功能启用。更多主题参考链接：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> </p>
<a id="more"></a>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><p>已经生成hexo博客主页（可以参考我的上一篇博客）</p>
</li>
<li><p>代码编辑器（sublime、vscode等）</p>
</li>
<li><p>支持MarkDown语言的编辑器（推荐Typora）</p>
</li>
</ul>
<p>注：站点配置文件指的是博客文件夹根目录中的_config.yml，主题配置文件指的是next主题文件夹下的_config.yml</p>
<h1 id="下载、启用及配置next主题"><a href="#下载、启用及配置next主题" class="headerlink" title="下载、启用及配置next主题"></a>下载、启用及配置next主题</h1><h2 id="下载next主题"><a href="#下载next主题" class="headerlink" title="下载next主题"></a>下载next主题</h2><p>点击链接跳转到github页面下载next主题压缩包<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<p>解压至站点（博客文件夹根目录）的 themes 目录下，并将解压后的文件夹名称更改为next。</p>
<h2 id="启用next主题"><a href="#启用next主题" class="headerlink" title="启用next主题"></a>启用next主题</h2><p>打开站点配置文件，推荐使用sublime, Ctrl+L快捷键输入theme找到 theme 字段，并将其值更改为 next（保证与themes文件夹下面next主题文件夹名字一致否则主题失效）。</p>
<p><img src="%E5%90%AF%E7%94%A8next%E4%B8%BB%E9%A2%98.jpg"></p>
<p>更改后在命令行中Ctrl+C打断正在运行的服务，hexo s重新启动服务器，并在浏览器中刷新输入命令行中的本地地址，当出现下面的页面说明更换主题成功。</p>
<p><img src="%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.jpg"></p>
<p>注：根据个人意愿删除themes文件夹下的landscape主题。</p>
<h2 id="更改主题配置文件"><a href="#更改主题配置文件" class="headerlink" title="更改主题配置文件"></a>更改主题配置文件</h2><h3 id="更改主题为中文"><a href="#更改主题为中文" class="headerlink" title="更改主题为中文"></a>更改主题为中文</h3><p>在主题配置文件文件中找到language字段修改为zh-CN，如下图  </p>
<p><img src="zh-CN.jpg"></p>
<p>按顺序在命令行中执行命令hexo clean、hexo g、hexo s，重启服务器后刷新页面即可生效。</p>
<p>小小吐槽一下：这步本人遇到了一点小坑，官方网站配置的参考如下图</p>
<p><img src="%E5%AE%98%E6%96%B9zh.jpg"></p>
<p>然而配置完成后并没有生效，检查了一下next主题的根目录下的languages，发现有zh-CN.yml语言配置文件，于是值改成zh-CN后中文就生效了…</p>
<h3 id="增加标签页、分类页"><a href="#增加标签页、分类页" class="headerlink" title="增加标签页、分类页"></a>增加标签页、分类页</h3><p>打开主题配置文件，找到menu字段，将下图白色箭头所示的注释打开（直接删掉前面的#或者注释快捷键都可以），在首页刷新，就可以看到红色箭头所示的效果（但是此时点开标签会报错空内容）。  </p>
<p><img src="%E5%A2%9E%E5%8A%A0%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%81%E5%88%86%E7%B1%BB%E9%A1%B5.jpg"></p>
<p>关掉博客服务，然后输入命令hexo n page tags</p>
<p>命令执行完成后会在source目录下新增一个tags文件夹，内容为一个名为index.md的文件，可以用Typora打开并编辑。</p>
<p><img src="newtags.jpg"></p>
<p>再开启服务，刷新后点开首页中的标签就会有内容了。</p>
<p>关掉服务，输入命令hexo n page categories，命令执行完成后会在source目录下新增一个categories文件夹，内容为一个名为index.md的文件，可以用Typora打开并编辑。</p>
<p><img src="newcategories.jpg"></p>
<p>再开启服务，刷新后点开首页中的分类就会有内容了。</p>
<h3 id="next主题页面布局样式更改"><a href="#next主题页面布局样式更改" class="headerlink" title="next主题页面布局样式更改"></a>next主题页面布局样式更改</h3><p>进入站点配置文件，找到Scheme 字段，根据自己的喜欢更改主题的样式（打开一个，将其他注释），每次修改完成后都可以在浏览器中刷新查看主题样式的变化。</p>
<p><img src="next%E4%B8%BB%E9%A2%98%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E6%A0%B7%E5%BC%8F%E6%9B%B4%E6%94%B9.jpg"></p>
<h3 id="设置主题的头像"><a href="#设置主题的头像" class="headerlink" title="设置主题的头像"></a>设置主题的头像</h3><p>在主题配置文件中查找avatar，url后面的#号去掉，并按照你自己头像的后缀更改此处的头像名后缀，在主题next下的\source\images文件夹中删掉avatar.gif，替换为你此处在url中的命名图片即可，刷新页面就会有头像显示。  </p>
<p><img src="%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A2%98%E7%9A%84%E5%A4%B4%E5%83%8F.jpg"></p>
<h3 id="更改标题及作者"><a href="#更改标题及作者" class="headerlink" title="更改标题及作者"></a>更改标题及作者</h3><p>在站点配置文件中找到这几行，按需修改即可</p>
<p><img src="%E6%9B%B4%E6%94%B9%E6%A0%87%E9%A2%98%E5%8F%8A%E4%BD%9C%E8%80%85.jpg"></p>
<h3 id="启用左边社交栏链接"><a href="#启用左边社交栏链接" class="headerlink" title="启用左边社交栏链接"></a>启用左边社交栏链接</h3><p>在博客的_config.yml中找到这几行，按需修改即可  </p>
<p><img src="%E5%90%AF%E7%94%A8%E5%B7%A6%E4%BE%A7%E7%A4%BE%E4%BA%A4%E6%A0%8F%E9%93%BE%E6%8E%A5.jpg"></p>
<p> 如果有什么问题或者技术交流，欢迎在博客首页左下角社交或者下方发布渠道二维码与我联系。 </p>
]]></content>
      <categories>
        <category>从0搭建博客及美化</category>
      </categories>
      <tags>
        <tag>hexo更换主题</tag>
        <tag>next主题</tag>
        <tag>next主题配置功能启用</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo框架搭建个人博客</title>
    <url>/2020/11/18/hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建前的准备工作</p>
<p>在搭建博客开始之前，你必须已经</p>
<a id="more"></a>

<ul>
<li><p>有一个github/gitee账号，没有的话去注册一个；</p>
</li>
<li><p>安装了node.js（博客是基于node.js搭建的）、npm（这两步相对简单百度即可，npm -v验证是否安装成功）；</p>
</li>
<li><p>切换npm的淘宝镜像源（为了加快下载包的速度，不然npm的下载速度会非常非常慢，如能忍受这一步可忽略）</p>
<p>淘宝镜像源是基于npm安装好的情况下，在cmd或者powershell命令行中执行以下命令：</p>
<p>npm install –g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>  </p>
<p>安装成功后 cnpm -v可查看当前是否安装成功，出现cnpm的版本号即为安装成功。</p>
</li>
</ul>
<h1 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h1><h2 id="全局安装hexo博客框架"><a href="#全局安装hexo博客框架" class="headerlink" title="全局安装hexo博客框架"></a>全局安装hexo博客框架</h2><p>说明：如果你没有安装cnpm，那么接下来的命令行中的cnpm要用npm代替，这里默认你已经安装cnpm。</p>
<p>在powershell（个人比较习惯用）或者cmd命令行中全局安装hexo，输入命令：cnpm install -g hexo-cli</p>
<p>如果出现红色英文或者很长时间命令行没有反应，可以Ctrl+C打断这次安装操作，解决办法：</p>
<ul>
<li>如果没有切换淘宝镜像源可以按照上面的准备工作中的方法切换</li>
<li>重新执行此次命令</li>
<li>如果是笔记本连手机热点（我自己很多次就是这样解决的…）</li>
</ul>
<h2 id="使用hexo生成博客"><a href="#使用hexo生成博客" class="headerlink" title="使用hexo生成博客"></a>使用hexo生成博客</h2><p>在新的文件夹下，打开powershell窗口（快捷键：shift+鼠标右键，列表中会有在此处打开powershell）</p>
<p>命令行中输入命令：hexo init  （过程非常简单，但是下载的时间比较长，耐心等待…）</p>
<p><em>提示：如果搭建博客过程中有问题，大不了把文件夹干掉重来，无需畏惧</em></p>
<p><img src="1.jpg"></p>
<p> 当出现Start blogging with Hexo！字样的时候表示博客已经安装完成  </p>
<p>这时候我们可以启动我们的博客</p>
<p>命令行：hexo s     （注：s为start的简写）</p>
<p><img src="2.jpg"></p>
<p>此时可以选中其中的地址，输入到浏览器中访问我们的博客 。</p>
<p> <img src="3.jpg"></p>
<p>此处默认使用的主题为landscape，可以根据自己不同的主题喜好更改（具体配置修改参考<a href="https://hexo.io/zh-cn/docs/themes.html%EF%BC%89">https://hexo.io/zh-cn/docs/themes.html）</a><br>这里默认为我们创建了第一篇文章。<br>标题名为Hello World，多么熟悉的语句~<br>文章简述了hexo怎样使用，可以简单的看一看。<br>顺便提一句，这里文章创作推荐使用Typora 这款Markdown的编辑器来写。</p>
<p>后续还会更新更换其他主题及页面样式的美化。</p>
<p>如果有什么问题或者技术交流，欢迎在博客首页左下角社交或者下方发布渠道二维码与我联系。</p>
]]></content>
      <categories>
        <category>从0搭建博客及美化</category>
      </categories>
      <tags>
        <tag>hexo框架</tag>
        <tag>博客搭建前的准备工作</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试刷题的方法和注意事项</title>
    <url>/2020/11/19/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%88%B7%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>针对我自己刷前端面试题方法效率低，刷过的题一看就会一做就废的这个毛病，我请教了一位几年前端工作经验并且为许多学生引过路的前辈，了解到了一些刷题的方法以及应该注意的问题。在这里我将这些方法记录并分享出来，希望能够帮助到正在刷题的你。</p>
<a id="more"></a>

<h1 id="刷题方法"><a href="#刷题方法" class="headerlink" title="刷题方法"></a>刷题方法</h1><p>这位前辈针对刷面试题方法一共提出了<strong>四点建议</strong>，分别是：</p>
<ul>
<li><p>遇到面试题，先看到的应该是题的考点，其次，脑子里都要思考四个问题</p>
<p>1.是什么 </p>
<p>2.原理</p>
<p>3.解决什么问题 </p>
<p>4.怎么用</p>
</li>
<li><p>会的题，应该怎么用有逻辑性的语言表达出来（建议分条）</p>
</li>
<li><p>每道题（如跨域）要会其主流的流程，并且以主流为重点说，其他的可以稍微提一下</p>
</li>
<li><p>这一点是在第二点的基础上，往自己开发的项目上靠，例如自己平时做项目的时候是用什么什么方法解决的。</p>
</li>
</ul>
<p>在平时刷题的时候养成这种好习惯，相信对刷题的效率一定会有所提升。</p>
<h1 id="刷题注意事项"><a href="#刷题注意事项" class="headerlink" title="刷题注意事项"></a>刷题注意事项</h1><p>这一块主要是自己平时逛社区看到的，总结了一下分享出来：</p>
<p><strong>1.大厂偏爱考察基础，特别是对于工作经验少的人，因此基础题一定要完全掌握</strong></p>
<p><strong>2.做不完的题海：以不变应万变，题可变，考点是不会变的，如Promis解决什么问题，这一定与异步有关</strong></p>
<h1 id="高效学习三步曲"><a href="#高效学习三步曲" class="headerlink" title="高效学习三步曲"></a>高效学习三步曲</h1><p>这块是慕课网上的老师讲到的，感觉讲的非常好，拿出来mark一下</p>
<ul>
<li><p><strong>找准知识体系</strong></p>
<p>这一步很重要很重要，也很难，这个知识体系是一个<strong>结构化的知识范围</strong>，就像一棵树一样，有根有树干，再往下分树枝、树叶这些，<strong>有组织</strong>，<strong>易扩展</strong>，这种知识体系便于我们的记忆（推荐<strong>思维导图</strong>）。</p>
</li>
<li><p><strong>刻意训练</strong></p>
<p>这一块不用多说，练就完事了！</p>
</li>
<li><p><strong>及时反馈</strong></p>
<p>可以通过在技术交流社区中写文章这种方式，总结输出自己的知识点，另一方面，如果写得好还会有人点赞，或者哪地方有进步的空间大家还可以互相交流。</p>
</li>
</ul>
<p>自己也搜罗整理了一些面试资料（包括面试的知识体系），如果有兴趣可以通过下方的二维码、留言或首页社交块与我联系。</p>
]]></content>
      <categories>
        <category>前端刷题</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>面试题</tag>
        <tag>刷题方法</tag>
        <tag>刷题注意事项</tag>
        <tag>高效学习三步曲</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS-Web-API-Ajax</title>
    <url>/2020/12/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS-Web-API-Ajax/</url>
    <content><![CDATA[<p>每个工程师都必须熟练掌握的技能</p>
<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="手写一个-XMLHttpRequest"><a href="#手写一个-XMLHttpRequest" class="headerlink" title="手写一个 XMLHttpRequest"></a>手写一个 XMLHttpRequest</h2><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// true 的意思是异步的请求, false 是同步</span></span><br><span class="line"><span class="comment">// 网络请求不能卡顿影响页面，所以需要异步</span></span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;./test.json&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 必须三等</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            alert(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;其他情况&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于是 get 请求，不用发送任何数据，直接 null 即可</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 请求</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;./test.json&quot;</span>, <span class="literal">false</span>) </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            alert(xhr.responseText)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;其他情况&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> postData = &#123;</span><br><span class="line">    name: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">    password: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 json 数据变成字符串发送</span></span><br><span class="line">xhr.send(<span class="built_in">JSON</span>.stringify(postData))</span><br></pre></td></tr></table></figure>



<h2 id="xhr-readyState"><a href="#xhr-readyState" class="headerlink" title="xhr.readyState"></a>xhr.readyState</h2><ul>
<li>0 -（未初始化）还没有调用 send（）方法</li>
<li>1 -（载入）已调用 send（）方法，正在发送请求</li>
<li>2 -（载入完成）send（）方法执行完成，已经接收到全部响应内容</li>
<li>3 -（交互）正在解析响应内容</li>
<li>4 -（完成）响应内容解析完成，可以在客户端调用</li>
</ul>
<h2 id="xhr-status"><a href="#xhr-status" class="headerlink" title="xhr.status"></a>xhr.status</h2><ul>
<li>2xx - 表示成功处理请求，如 200</li>
<li>3xx - 需要重定向，浏览器直接跳转，如 301（永久重定向）、302（临时重定向）、304（资源未改变）</li>
<li>4xx - 客户端请求错误，如 404（请求地址有误，或者服务端没有）、403（客户端没有权限，在内部系统应用较多）</li>
<li>5xx - 服务器端错误（出 bug 了）</li>
</ul>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><ul>
<li><p>什么是跨域（同源策略）</p>
<p><strong>同源策略</strong></p>
<ul>
<li>ajax 请求时，<strong>浏览器要求</strong>当前网页和 server 端必须同源（安全）</li>
<li>同源：协议、端口、域名，三者必须一致</li>
<li>前端: <a href="http://a.com:8080/">http://a.com:8080/</a> ；server: <a href="https://b.com/api/xxx">https://b.com/api/xxx</a> , 二者三个要求均不同</li>
</ul>
<p><strong>加载图片、CSS、JS 可无视同源策略</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;跨域的图片地址 &#x2F;&gt;</span><br><span class="line">&lt;link href&#x3D;跨域的图片地址 &#x2F;&gt;</span><br><span class="line">&lt;script src&#x3D;跨域的 JS 地址&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img &#x2F;&gt; 可用于统计打点，可使用第三方统计服务</span><br><span class="line">&lt;link &#x2F;&gt; &lt;script&gt; 可使用 CDN , CDN 一般都是外域</span><br><span class="line">&lt;script&gt; 可实现 JSONP</span><br></pre></td></tr></table></figure>

<p><strong>跨域</strong></p>
<ul>
<li>所有的跨域，都必须经过 server 端允许和配合</li>
<li>未经 server 端允许就实现跨域，说明浏览器有漏洞，危险信号</li>
</ul>
</li>
</ul>
<ul>
<li><p>JSONP</p>
<ul>
<li>访问知乎或者虎扑，服务端一定返回同一个 html 文件吗？</li>
<li>服务器可以任意动态拼接数据返回，只要符合 html 格式要求</li>
<li>同理访问 script 的一个 js 文件，不一定返回的是一个静态的 js 文件，而是服务端可以任意拼接符合 js 不报错即可</li>
</ul>
<p><strong>JSONP 原理</strong></p>
<p>1.通过 script 可绕过跨域限制</p>
<p>2.服务器可以任意动态拼接数据返回</p>
<p>3.所以，script 标签就可以获得跨域的数据，只要服务端愿意返回</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSONP 代码演示 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.abc = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8002/jsonp.js?username=xxx&amp;callback=abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jsonp.js --&gt;</span></span><br><span class="line">abc(</span><br><span class="line">    &#123; name: &#x27;xxx&#x27; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>CORS（服务器端支持）</p>
<p><strong>CORS - 服务器设置 http header</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二个参数填写允许跨域的域名称，不建议直接写 &quot;*&quot;</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8011&quot;</span>);</span><br><span class="line"><span class="comment">// 该字段表明服务端支持的请求方法</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line"><span class="comment">// 实际请求将携带的自定义请求首部字段</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收跨域的 cookie</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="手写一个简易的-Ajax"><a href="#手写一个简易的-Ajax" class="headerlink" title="手写一个简易的 Ajax"></a>手写一个简易的 Ajax</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结合 Promise 使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, type, success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(type, url, <span class="literal">true</span>)</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.status === <span class="number">404</span>) &#123;</span><br><span class="line">                    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;404 not found&quot;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.send(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;./test.json&quot;</span></span><br><span class="line">ajax(url, <span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="实际项目中-Ajax-的常用插件"><a href="#实际项目中-Ajax-的常用插件" class="headerlink" title="实际项目中 Ajax 的常用插件"></a>实际项目中 Ajax 的常用插件</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">使用 Fetch - Web API 接口参考 | MDN (mozilla.org)</a></p>
<p><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档|axios中文网 | axios (axios-js.com)</a></p>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>JS-Web-API-Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS-Web-API-DOM</title>
    <url>/2020/12/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS-Web-API-DOM/</url>
    <content><![CDATA[<p>学会DOM，才能具备网页开发的基础</p>
<p>从 JS 基础知识到 JS Web API</p>
<ul>
<li>JS 基础知识，规定语法（ECMA 262 标准）</li>
<li>JS Web API，网页操作的 API （W3C 标准）</li>
<li>前者是后者的基础，两者结合才能真正实际应用</li>
</ul>
<a id="more"></a>

<p>JS 基础知识</p>
<ul>
<li>变量的类型和计算</li>
<li>原型和原型链</li>
<li>作用域和闭包</li>
</ul>
<p>JS Web API</p>
<ul>
<li>DOM 操作（网页的 DOM 元素）</li>
<li>BOM 操作（浏览器的导航、url 地址、跳转、宽高等）</li>
<li>事件绑定（监听一个点击等）</li>
<li>Ajax（发送一个网络请求）</li>
<li>存储</li>
</ul>
<h1 id="DOM-操作（Document-Object-Model）"><a href="#DOM-操作（Document-Object-Model）" class="headerlink" title="DOM 操作（Document Object Model）"></a>DOM 操作（Document Object Model）</h1><ul>
<li>vue 和 react 框架应用广泛，封装了 DOM 操作</li>
<li>但 DOM 操作一直都会是前端工程师的基础、必备知识</li>
<li>只会 vue 而不懂 DOM 操作的前端程序员，不会长久</li>
</ul>
<p>知识点</p>
<ul>
<li>DOM 本质</li>
<li>DOM 节点操作</li>
<li>DOM 结构操作</li>
<li>DOM 性能</li>
</ul>
<h2 id="DOM-本质"><a href="#DOM-本质" class="headerlink" title="DOM 本质"></a>DOM 本质</h2><p>本质就是从 HTML 语言解析出来的一棵树。</p>
<h2 id="DOM-节点操作"><a href="#DOM-节点操作" class="headerlink" title="DOM 节点操作"></a>DOM 节点操作</h2><p>1.获取 DOM 节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>) <span class="comment">// 元素</span></span><br><span class="line"><span class="keyword">const</span> divList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>) <span class="comment">// 元素</span></span><br><span class="line"><span class="built_in">console</span>.log(divList.length)</span><br><span class="line"><span class="built_in">console</span>.log(divList[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> containerList = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;.container&quot;</span>) <span class="comment">// 集合</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>) <span class="comment">// 集合</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>DOM 节点的 property 和 attribute</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// property </span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> p = pList[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(p.style.width) <span class="comment">// 获取样式</span></span><br><span class="line">p.style.width = <span class="string">&quot;100px&quot;</span> <span class="comment">// 修改样式</span></span><br><span class="line"><span class="built_in">console</span>.log(p.className) <span class="comment">// 获取 class</span></span><br><span class="line">p.className = <span class="string">&quot;p1&quot;</span> <span class="comment">// 修改class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 nodeName 和 nodeType</span></span><br><span class="line"><span class="built_in">console</span>.log(p.nodeName)</span><br><span class="line"><span class="built_in">console</span>.log(p.nodeType)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// attribute</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> p = pList[<span class="number">0</span>]</span><br><span class="line">p.getAttribute(<span class="string">&quot;data-name&quot;</span>)</span><br><span class="line">p.setAttribute(<span class="string">&quot;data-name&quot;</span>, <span class="string">&quot;faker&quot;</span>)</span><br><span class="line">p.getAttribute(<span class="string">&quot;style&quot;</span>)</span><br><span class="line">p.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;font-size:30px;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="property-和-attribute"><a href="#property-和-attribute" class="headerlink" title="property 和 attribute"></a>property 和 attribute</h3><ul>
<li>property：修改对象属性，不会体现到 html 结构中</li>
<li>attribute：修改 html 属性，会改变 html 结构</li>
<li>两者都有可能引起 DOM 重新渲染</li>
</ul>
<h2 id="DOM-结构操作"><a href="#DOM-结构操作" class="headerlink" title="DOM 结构操作"></a>DOM 结构操作</h2><ul>
<li>新增/插入节点</li>
<li>获取子元素列表，获取父元素</li>
<li>删除子元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新节点</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>)</span><br><span class="line">p1.innerHTML = <span class="string">&quot;this is p1&quot;</span></span><br><span class="line">div1.appendChild(p1) <span class="comment">// 添加新创建的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动已有节点，注意是移动！！！</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">div1.appendChild(p2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子元素列表</span></span><br><span class="line"><span class="built_in">console</span>.log(div1.childNodes)</span><br><span class="line"><span class="comment">// 如果有 text 文本将其过滤</span></span><br><span class="line"><span class="keyword">const</span> div1ChildNodesP = <span class="built_in">Array</span>.prototype.slice.call(div1.childNodes).filters(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (child.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父元素</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.parentNode)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> child = div1.childNodes</span><br><span class="line">div1.removeChild(child[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="DOM-性能（重点）"><a href="#DOM-性能（重点）" class="headerlink" title="DOM 性能（重点）"></a>DOM 性能（重点）</h2><ul>
<li>DOM 操作非常“昂贵”（占用 CPU 比较多，有可能导致浏览器的重绘和重排），避免频繁的 DOM 操作</li>
<li>对 DOM 查询做缓存</li>
<li>将频繁操作改为一次性操作</li>
</ul>
<h3 id="DOM-查询做缓存"><a href="#DOM-查询做缓存" class="headerlink" title="DOM 查询做缓存"></a>DOM 查询做缓存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不缓存 DOM 查询结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>).length; i++) &#123;</span><br><span class="line">    <span class="comment">// 每次循环，都会计算 length，频繁进行 DOM 查询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存 DOM 查询结果</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> length = pList.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// 缓存 length，只进行一次 DOM 查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将频繁操作改为一次性操作"><a href="#将频繁操作改为一次性操作" class="headerlink" title="将频繁操作改为一次性操作"></a>将频繁操作改为一次性操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listNode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文档片段，此时还没有插入到 DOM 树中</span></span><br><span class="line"><span class="keyword">const</span> frag = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行插入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    li.innerHTML = <span class="string">&quot;List item &quot;</span> + x</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先插入文档片段中</span></span><br><span class="line">    frag.appendChild(li)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都完成之后，再统一插入到 DOM 树中</span></span><br><span class="line">listNode.appendChild(frag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也就是说，先建一个临时区域，把所有的高频操作都在临时区域中去插入</span></span><br><span class="line"><span class="comment">// 插入完成之后，再把临时区域一块放在 DOM 结构中，这样性能就会大大提升</span></span><br></pre></td></tr></table></figure>



<p><strong>DOM 是哪种数据结构</strong></p>
<ul>
<li>树型结构（DOM 树）</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>JS-Web-API-DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS-Web-API-BOM</title>
    <url>/2020/12/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS-Web-API-BOM/</url>
    <content><![CDATA[<p>内容虽然不多，但是不可不会</p>
<h1 id="BOM-操作-（Browser-Object-Model）"><a href="#BOM-操作-（Browser-Object-Model）" class="headerlink" title="BOM 操作 （Browser Object Model）"></a>BOM 操作 （Browser Object Model）</h1><p>这一块在面试中考点相对较少</p>
<a id="more"></a>

<p><strong>知识点</strong></p>
<ul>
<li><strong>navigator</strong></li>
<li>screen</li>
<li><strong>location</strong></li>
<li>history</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// navigator</span></span><br><span class="line"><span class="comment">// 识别浏览器类型</span></span><br><span class="line"><span class="keyword">const</span> ua = navigator.userAgent</span><br><span class="line"><span class="keyword">const</span> isEdge = ua.indexOf(<span class="string">&quot;Edg&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(isEdge)</span><br><span class="line"></span><br><span class="line"><span class="comment">// screen</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.width)   <span class="comment">// 浏览器屏幕宽度</span></span><br><span class="line"><span class="built_in">console</span>.log(screen.height)  <span class="comment">// 浏览器屏幕高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// location</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href)        <span class="comment">// 网址</span></span><br><span class="line"><span class="built_in">console</span>.log(location.protocol)    <span class="comment">// 协议</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host)        <span class="comment">// 域名</span></span><br><span class="line"><span class="built_in">console</span>.log(location.pathname)    <span class="comment">// 浏览器路径</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search)      <span class="comment">// 查询参数</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash)		  <span class="comment">// 哈希值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// history</span></span><br><span class="line">history.back()      <span class="comment">// 操作页面后退</span></span><br><span class="line">history.forward()   <span class="comment">// 操作页面前进</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>JS-Web-API-BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS-Web-API-事件</title>
    <url>/2020/12/04/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS-Web-API-%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>事件不会，等于残废，必考！！！</p>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>知识点</strong></p>
<ul>
<li>事件绑定</li>
<li>事件冒泡</li>
<li>事件代理</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件绑定</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>)</span><br><span class="line">btn.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;clicked&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的事件绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem, type, fn</span>) </span>&#123;</span><br><span class="line">    elem.addEventListener(type, fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件冒泡</span></span><br><span class="line"><span class="comment">// 当子元素触发点击后，其父元素，或其所在的向上层级元素，都会截获点击事件</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.body</span><br><span class="line">bindEvent(body, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;body clicked&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(event.target) <span class="comment">// 获取触发的元素</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止冒泡</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">bindEvent(p1, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.stopPropagation() <span class="comment">// 阻止冒泡</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML</span></span><br><span class="line"><span class="comment">/* &lt;div id=&quot;div3&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;#&quot;&gt;a1&lt;/a&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;#&quot;&gt;a2&lt;/a&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;#&quot;&gt;a3&lt;/a&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;a href=&quot;#&quot;&gt;a4&lt;/a&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    &lt;button&gt;加载更多...&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的事件绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem, type, fn</span>) </span>&#123;</span><br><span class="line">    elem.addEventListener(type, fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理绑定</span></span><br><span class="line"><span class="comment">// 就是把事件绑定到一些不好每个都去绑定事件的情况</span></span><br><span class="line"><span class="comment">// 我们把它绑定到父元素上，然后做一些判断是否为我们想要的元素</span></span><br><span class="line"><span class="comment">// 然后再做其他的一些动作</span></span><br><span class="line"><span class="keyword">const</span> div3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div3&quot;</span>)</span><br><span class="line">bindEvent(div3, <span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> target = event.target</span><br><span class="line">    <span class="keyword">if</span> (target.nodeName === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">        alert(target.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h2><ul>
<li>代码简洁</li>
<li>减少浏览器内存占用（如果 a 标签非常多的话，每个 a 标签都去挂一个事件，数量过多会非常耗费内存，但是我们只在父元素挂一次事件就不会耗费那么多内存）</li>
<li>但是，不要滥用（在瀑布流、结构复杂不好每一个都绑定事件的这种情况下去用）</li>
</ul>
<h2 id="通用的事件绑定函数-重点"><a href="#通用的事件绑定函数-重点" class="headerlink" title="通用的事件绑定函数(重点)"></a>通用的事件绑定函数(重点)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的事件绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem, type, selector, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入参数个数</span></span><br><span class="line">    <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">        fn = selector</span><br><span class="line">        selector = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    elem.addEventListener(type, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> target = event.target</span><br><span class="line">        <span class="keyword">if</span> (selector) &#123;</span><br><span class="line">            <span class="comment">// 需要代理绑定</span></span><br><span class="line">            <span class="comment">// 判断一个 DOM 元素是不是符合一个 CSS 选择器</span></span><br><span class="line">            <span class="keyword">if</span> (target.matches(selector)) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">               let result = element.matches(selectorString);</span></span><br><span class="line"><span class="comment">				result 的值为 true 或 false.</span></span><br><span class="line"><span class="comment">				selectorString 是个 css 选择器字符串.</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">                <span class="comment">// 若不用 call 这里的 this 则指向 window</span></span><br><span class="line">                fn.call(target, event)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; eles &#123;</span><br><span class="line">            <span class="comment">// 不需要代理绑定</span></span><br><span class="line">            fn.call(target, event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> div3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div3&quot;</span>)</span><br><span class="line">bindEvent(div3, <span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    alert(<span class="built_in">this</span>.innerHTML)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul>
<li><p>编写一个通用的事件监听函数</p>
<p>参考上面代码</p>
</li>
</ul>
<ul>
<li><p>描述事件冒泡的流程</p>
<p>1.基于 DOM 树形结构</p>
<p>2.事件会顺着触发元素往上冒泡</p>
<p>3.应用场景：代理</p>
</li>
</ul>
<ul>
<li><p>无限下拉的图片列表，如何监听每个图片的点击</p>
<p>1.事件代理</p>
<p>2.用 event.target 获取触发元素</p>
<p>3.用 matches 来判断是否触发元素</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>JS-Web-API-BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS之异步进阶1</title>
    <url>/2020/12/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%BF%9B%E9%98%B61/</url>
    <content><![CDATA[<p>想进互联网大厂，就会有更多的异步问题…</p>
<p>在这一块，一线大厂面试官经常会玩着花样的去考，所以务必要会！</p>
<h1 id="event-loop-（事件循环-事件轮询）"><a href="#event-loop-（事件循环-事件轮询）" class="headerlink" title="event loop （事件循环 / 事件轮询）"></a>event loop （事件循环 / 事件轮询）</h1><a id="more"></a>

<p>这一块非常重要！</p>
<p>首先</p>
<ul>
<li>JS 是单线程运行的</li>
<li>异步要基于回调来实现</li>
<li>event loop 就是异步回调的实现原理</li>
</ul>
<p>这一块需要了解一下 JS 是如何执行的</p>
<ul>
<li>JS 代码是从前到后，一行一行执行的</li>
<li>如果某一行执行错误，则停止下面代码的执行</li>
<li>先把同步代码执行完，再执行异步</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先看一个示例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">cb1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;cb1&quot;</span>) <span class="comment">// cb 即为 callback</span></span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Bye&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><em>注： 学习 event loop 这一块不要扣细节，不要扩大范围，核心就是 event loop 的过程</em></p>
<p><strong>执行第一行代码</strong></p>
<img src="image-20201202090054370.png" alt="image-20201202090054370" style="zoom: 25%;" />



<p><strong>执行第二行代码</strong></p>
<p>setTimeout 是一个函数，函数第一个参数是一个 function，第二个参数是 5s，此时浏览器 console 行不会打印任何东西，暂时执行不到 console.log(‘cb1’) , 推入调用栈并执行 setTimeout 函数时，由于 setTimeout 函数是浏览器定义的（也就是在 Web APIs 这块定义的），它不是 es6 的一个内容，所以我们执行这个函数的时候，这个函数的背后其实是把它的第一个参数 cb1 给它放到一个定时器里面，定时器的定时是 5s，5s 之后把 cb1 放入 Callback Queue 里面，这样 setTimeout 这三行代码就执行结束了，然后再次将调用栈清空，但是此时定时器还在，不会清空。简单来说，setTimeout 执行的产出就是将 cb1 放入到一个定时器里面。</p>
<img src="image-20201202092527861.png" alt="image-20201202092527861" style="zoom: 25%;" />



<p><strong>执行第三行代码</strong></p>
<img src="image-20201202093122044.png" alt="image-20201202093122044" style="zoom: 25%;" />

<p>执行完第三行后，此时这个定时器还会在，因为从第一行执行到最后一行的时间极短。</p>
<p><strong>整个主线的同步代码（两个 log，一个 setTimeout）全部执行完后，此时没有任何代码将要推到 Call Stack 中执行，也就是 Call Stack 空了，这个时候会启动 Event Loop 机制（浏览器内核启动），这个机制会一遍一遍的做循环，每次循环回到 Callback Queue （也就是异步函数回调）里面去找还有没有函数，如果有函数就拿过来推入到 Call Stack 调用栈里面去执行。</strong></p>
<p>1、Callback Queue 为空的</p>
<img src="image-20201202094217599.png" alt="image-20201202094217599" style="zoom: 25%;" />

<p>2、5s 后，定时器把 cb1 推到 Callback Queue 里面</p>
<img src="image-20201202094241074.png" alt="image-20201202094241074" style="zoom: 25%;" />

<p>3、 Event Loop 触发的时候会发现 cb1 的函数，就立马将这个函数推到 Call Stack  里面，并且将 Callback Queue 清空</p>
<img src="image-20201202094304243.png" alt="image-20201202094304243" style="zoom: 25%;" />

<p>4、 有了函数放到 Call Stack 里面，就会立马触发这个函数的执行，由于这个函数有一个函数体 console.log(‘cb1’) ，所以定位到 setTimeout 里面的 console.log(‘cb1’) 行，然后将这行推入到调用栈里面，调用栈执行，在浏览器 console 区打印 cb1</p>
<img src="image-20201202094856278.png" alt="image-20201202094856278" style="zoom: 25%;" />

<p>当打印语句执行完后，就会在调用栈里面将其清空</p>
<img src="image-20201202094950795.png" alt="image-20201202094950795" style="zoom: 25%;" />

<p>当打印语句执行完毕后，也就代表着 setTimeout 执行完毕，所以也将 cb1 函数从调用栈中清除</p>
<img src="image-20201202095104446.png" alt="image-20201202095104446" style="zoom:25%;" />

<h2 id="总结-Event-Loop-过程-1"><a href="#总结-Event-Loop-过程-1" class="headerlink" title="总结 Event Loop 过程 1"></a>总结 Event Loop 过程 1</h2><ul>
<li>同步代码，一行一行放在 Call Stack 中执行</li>
<li>遇到异步，会先 “记录” 下，等待时机（定时，网络请求等，时机一到就会放入到 Callback Queue 里面）</li>
</ul>
<h2 id="总结-Event-Loop-过程-2"><a href="#总结-Event-Loop-过程-2" class="headerlink" title="总结 Event Loop 过程 2"></a>总结 Event Loop 过程 2</h2><ul>
<li>如 Call Stack 为空（即同步代码执行完毕），Event Loop 开始工作</li>
<li>轮询查找 Callback Queue ，如有则移动到 Call Stack 执行</li>
<li>然后继续轮询查找（如setInterval永动机一样）</li>
</ul>
<h2 id="DOM-事件与-Event-Loop"><a href="#DOM-事件与-Event-Loop" class="headerlink" title="DOM 事件与 Event Loop"></a>DOM 事件与 Event Loop</h2><p>DOM 事件也使用回调，基于 Event Loop，触发时机与定时器不同，是浏览器控制的，监听用户的点击事件，但 DOM 事件不是异步</p>
<img src="image-20201202101219328.png" alt="image-20201202101219328" style="zoom: 33%;" />

<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><ul>
<li>三种状态</li>
<li>状态的表现和变化</li>
<li>then 和 catch 对状态的影响</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 Promise 实现加载一张图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pending...</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(img)  <span class="comment">// resolved</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`图片加载失败！<span class="subst">$&#123;src&#125;</span>`</span>)</span><br><span class="line">            reject(err)  <span class="comment">// rejected</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> urll = <span class="string">&quot;./1.jpg&quot;</span></span><br><span class="line"><span class="comment">// 通过链式调用避免 Callback hell</span></span><br><span class="line">loadImg(urll)</span><br><span class="line">    .then(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img1.width)</span><br><span class="line">        <span class="comment">// 返回一个普通对象</span></span><br><span class="line">        <span class="keyword">return</span> img1</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img1.height)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><ul>
<li>pending（在过程中，还没结果）、resolved（已经成功解决了，<strong>又称Fulfilled</strong>）、rejected（已经失败了）</li>
</ul>
<h2 id="状态的变化"><a href="#状态的变化" class="headerlink" title="状态的变化"></a>状态的变化</h2><ul>
<li>pending -&gt; resolved     或者     pending -&gt; rejected</li>
<li>这种变化是不可逆的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码演示</span></span><br><span class="line"><span class="comment">// pending</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p1&quot;</span>, p1)  <span class="comment">// promise 为 pending 状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve/fulfilled</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个异步</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p2&quot;</span>, p2) <span class="comment">// 点开后 promise 为 resolve/fulfilled 状态</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p2-setTimeout&quot;</span>, p2)) <span class="comment">// resolve/fulfilled 状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rejected</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个异步</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;p3-setTimeout&quot;</span>, p3)) <span class="comment">// rejected状态</span></span><br></pre></td></tr></table></figure>

<h2 id="状态的表现"><a href="#状态的表现" class="headerlink" title="状态的表现"></a>状态的表现</h2><ul>
<li>pending 状态，不会触发 then 和 catch</li>
<li>resolved 状态，会触发后续的 then 回调函数</li>
<li>rejected 状态，会触发后续的 catch 回调函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">100</span>) <span class="comment">// resolved</span></span><br><span class="line"><span class="comment">// console.log(&quot;p1&quot;, p1)</span></span><br><span class="line">p1.then(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data1&quot;</span>, data1)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;err1&quot;</span>, err1) <span class="comment">// 不会触发，因为 p1 是 resolved 状态</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">&quot;error2&quot;</span>) <span class="comment">// rejected</span></span><br><span class="line"><span class="comment">// console.log(&quot;p2&quot;, p2)</span></span><br><span class="line">p2.then(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data2&quot;</span>, data2)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;err2&quot;</span>, err2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="then-和-catch-改变状态"><a href="#then-和-catch-改变状态" class="headerlink" title="then 和 catch 改变状态"></a>then 和 catch 改变状态</h2><ul>
<li>then 正常返回 resolved，里面有报错则返回 rejected</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(&quot;p1&quot;, p1) // resolved 触发后续 then 的回调</span></span><br><span class="line">p1.then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">123</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;then error&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(&quot;p2&quot;, p2) // rejected 触发后续 catch 的回调</span></span><br><span class="line">p2.then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">456</span>)).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;err100&quot;</span>, err))</span><br></pre></td></tr></table></figure>

<ul>
<li>catch 正常返回 resolved，里面有报错则返回 rejected</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p3 = <span class="built_in">Promise</span>.reject(<span class="string">&quot;my error1&quot;</span>).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p3&quot;</span>, p3) <span class="comment">// resolved or fulfilled 注意！ 触发 then 回调</span></span><br><span class="line">p3.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.reject(<span class="string">&quot;my error&quot;</span>).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;my error2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;p4&quot;</span>, p4) <span class="comment">// rejected  触发 catch 回调</span></span><br><span class="line">p4.catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Promise-catch-连接-then"><a href="#Promise-catch-连接-then" class="headerlink" title="Promise catch 连接 then"></a>Promise catch 连接 then</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一些小题目</span></span><br><span class="line"><span class="comment">// 第一题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;erro1&#x27;</span>)</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123; <span class="comment">// 注意这里是 catch</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise-总结"><a href="#Promise-总结" class="headerlink" title="Promise 总结"></a>Promise 总结</h2><ul>
<li>三种状态，状态的表现和变化</li>
<li>then 和 catch 对状态的影响（重要）</li>
<li>then 和 catch 的链式调用</li>
</ul>
<h1 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h1><p>async / await 是同步语法，彻底消灭回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码演示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pending...</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(img) <span class="comment">// resolved</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`图片加载失败！<span class="subst">$&#123;src&#125;</span>`</span>)</span><br><span class="line">            reject(err) <span class="comment">// rejected</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src1 = <span class="string">&quot;./1.jpg&quot;</span></span><br><span class="line"><span class="keyword">const</span> src2 = <span class="string">&quot;./2.jpg&quot;</span></span><br><span class="line"><span class="comment">// 通常在立即执行函数前面加一个 ！ 来避免 ...() 执行的歧义</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 同步的写法</span></span><br><span class="line">    <span class="comment">// 获取 img1</span></span><br><span class="line">    <span class="keyword">const</span> img1 = <span class="keyword">await</span> loadImg(src1)</span><br><span class="line">    <span class="built_in">console</span>.log(img1.height, img1.width)</span><br><span class="line">    <span class="comment">// 获取 img2</span></span><br><span class="line">    <span class="keyword">const</span> img2 = <span class="keyword">await</span> loadImg(src2)</span><br><span class="line">    <span class="built_in">console</span>.log(img2.height, img2.width)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="async-await-和-Promise-的关系"><a href="#async-await-和-Promise-的关系" class="headerlink" title="async / await 和 Promise 的关系"></a>async / await 和 Promise 的关系</h2><ul>
<li>async / await 是消灭异步回调的终极武器</li>
<li>但和 Promise 并不互斥</li>
<li>反而两者相辅相成</li>
</ul>
<p>两者结合，总结来说</p>
<ul>
<li>执行 async 函数，返回的是 Promise 对象</li>
<li>await 相当于 Promise 的 then</li>
<li>try…catch 可捕获异常，代替了 Promise 的 catch</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行 async 函数，返回的是 Promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span> <span class="comment">// 相当于 return Promise.resolve(100)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> res1 = fn1() <span class="comment">// 执行 async 函数返回的是一个 Promise 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// Promise 对象</span></span><br><span class="line">res1.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data&quot;</span>, data) <span class="comment">// 100</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// await 相当于 Promise 的 then</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> p1 <span class="comment">// await 相当于 Promise 的 then</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data&quot;</span>, data)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// await 后面跟的不是一个 Promise 对象</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="number">400</span> <span class="comment">// 相当于封装成 await Promise.resolve(400)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data1&quot;</span>, data1)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// try...catch 相当于 Promise 的 catch</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p4 = <span class="built_in">Promise</span>.reject(<span class="string">&quot;err&quot;</span>) <span class="comment">// rejected 状态</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> p4</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>



<h1 id="异步的本质"><a href="#异步的本质" class="headerlink" title="异步的本质"></a>异步的本质</h1><ul>
<li><p>async / await 是消灭异步回调的终极武器</p>
</li>
<li><p>JS 还是单线程，还得是有异步，还是得基于 event loop</p>
</li>
<li><p>async / await 只是一个基于 Promise 的语法糖，但这颗糖是真的香！</p>
<p>它让我们可以使用同步的方式写异步代码</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真题示例1</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>) <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">await</span> async2() <span class="comment">// undefined</span></span><br><span class="line">    <span class="comment">// await 后面，都可以看做是 callback 里的内容，即异步</span></span><br><span class="line">    <span class="comment">// 类似，event loop ，setTimeout(cb1)</span></span><br><span class="line">    <span class="comment">// setTimeout(function () &#123; console.log(&#x27;async end) &#125;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>) <span class="comment">// 1</span></span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script end&quot;</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真题示例2</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="comment">// 下面三行都是异步回调 callback 的内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> async3()</span><br><span class="line">    <span class="comment">// 下面一行是异步回调的内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>)</span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script end&quot;</span>)</span><br><span class="line"><span class="comment">// script start -&gt; async1 start -&gt; async2 -&gt; script end -&gt; async1 end -&gt; async3 -&gt; async1 end 2</span></span><br></pre></td></tr></table></figure>

<p><em>注：首先定义函数不执行不用管，其次异步函数执行要立马执行函数体，await 下面的代码都是异步内容，当同步代码执行完毕，参考 event loop 的机制，启动异步代码的执行</em></p>
<p><strong>异步的本质是，JS 是单线程的，JS 的异步需要回调，哪怕我们有 async / await 这种比较高级的语法，是 Promise 的语法糖。异步要基于 event loop 去实现。</strong></p>
<h1 id="for…of-（重要）"><a href="#for…of-（重要）" class="headerlink" title="for…of  （重要）"></a>for…of  （重要）</h1><ul>
<li>类似于 for…in (以及 forEach、for ) 是常规的同步遍历</li>
<li>for…of 常用于异步的遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">muti</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(num * num)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// // forEach 为同步的遍历，不会等待，会在一瞬间执行完成</span></span><br><span class="line"><span class="comment">// // 所以同时出现 1   4   9</span></span><br><span class="line"><span class="comment">// nums.forEach(async (i) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const res = await muti(i)</span></span><br><span class="line"><span class="comment">//     console.log(res)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要做出排队一样的效果就需要用到 for...of</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> muti(i)</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>异步进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS-Web-API-存储</title>
    <url>/2020/12/08/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS-Web-API-%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>知识点</p>
<ul>
<li>cookie</li>
<li>localStorage 和 session Storage</li>
</ul>
<a id="more"></a>

<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul>
<li><p>本身用于浏览器和 server 通讯</p>
</li>
<li><p>被”借用”到本地存储</p>
</li>
<li><p>可用 document.cookie = ‘…’ 来修改</p>
</li>
</ul>
<h2 id="cookie-缺点"><a href="#cookie-缺点" class="headerlink" title="cookie 缺点"></a>cookie 缺点</h2><ul>
<li>存储大小，最大 4k</li>
<li>http 请求时需要发送到服务端，增加请求数据量</li>
<li>只能用 document.cookie = ‘…’ 来修改，太过简陋</li>
<li>cookie 的安全性过低</li>
</ul>
<h2 id="localStorage-和-sessionStorage"><a href="#localStorage-和-sessionStorage" class="headerlink" title="localStorage 和 sessionStorage"></a>localStorage 和 sessionStorage</h2><ul>
<li>HTML5 专门为存储而设计，最大可存 5M</li>
<li>API 简单易用 setItem、getItem</li>
<li>不会随着 http 请求被发送出去</li>
</ul>
<p><strong>二者区别</strong></p>
<ul>
<li>localStorage 数据会永久存储，除非代码或手动删除</li>
<li>sessionStorage 数据只存在于当前会话，浏览器关闭则清空</li>
<li>一般用 localStorage 会更多一些</li>
</ul>
<h1 id="描述-cookie、localStorage、sessionStorage区别"><a href="#描述-cookie、localStorage、sessionStorage区别" class="headerlink" title="描述 cookie、localStorage、sessionStorage区别"></a>描述 cookie、localStorage、sessionStorage区别</h1><ul>
<li>容量</li>
<li>API 易用性</li>
<li>是否跟随 http 请求发送出去</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>JS-Web-API-Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS之异步进阶2</title>
    <url>/2020/12/03/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%BF%9B%E9%98%B62/</url>
    <content><![CDATA[<h1 id="宏任务-macroTask-和微任务-microTask"><a href="#宏任务-macroTask-和微任务-microTask" class="headerlink" title="宏任务 macroTask 和微任务 microTask"></a>宏任务 macroTask 和微任务 microTask</h1><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不同类型的异步执行顺序不同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="comment">// 宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 微任务</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>)</span><br><span class="line"><span class="comment">// 100 -&gt; 400 -&gt; 300 -&gt; 200</span></span><br></pre></td></tr></table></figure>

<ul>
<li>宏任务：setTimeout、setInterval、Ajax、DOM 事件</li>
<li>微任务：Promise、async / await</li>
<li>微任务执行时机比宏任务要早</li>
</ul>
<h1 id="event-loop-和-DOM-渲染"><a href="#event-loop-和-DOM-渲染" class="headerlink" title="event loop 和 DOM 渲染"></a>event loop 和 DOM 渲染</h1><ul>
<li>JS 是单线程的，而且和 DOM 渲染共用一个线程</li>
<li>JS 执行的时候，得留一些时机供 DOM 渲染</li>
</ul>
<p><strong>再次回顾 event loop 的过程</strong></p>
<ul>
<li>每一次 call stack 结束（每次轮询结束），同步任务执行完毕，都会触发 DOM 渲染（不一定非得渲染，就是给一次 DOM 渲染的机会！）</li>
<li>然后再触发下一次 Event Loop</li>
</ul>
<p>触发 Event Loop 机制，如果 Callback Queue 里面执行完毕，也就是 call stack 再次空闲，又会尝试触发 DOM 渲染，然后再触发 Event Loop 机制，以此循环下去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $p1 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p2 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p3 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).append($p1).append($p2).append($p3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;length&#x27;</span>,  $(<span class="string">&#x27;#container&#x27;</span>).children().length )</span><br><span class="line">alert(<span class="string">&#x27;本次 call stack 结束，DOM 结构已更新，但尚未触发渲染&#x27;</span>)</span><br><span class="line"><span class="comment">// （alert 会阻断 js 执行，也会阻断 DOM 渲染，便于查看效果，因此只有当关闭 alert 对话框的时候才会渲染出标签）</span></span><br><span class="line"><span class="comment">// 到此，即本次 call stack 结束后（同步任务都执行完了），浏览器会自动触发渲染，不用代码干预</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外，按照 event loop 触发 DOM 渲染时机，setTimeout 时 alert ，就能看到 DOM 渲染后的结果了</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;setTimeout 是在下一次 Call Stack ，就能看到 DOM 渲染出来的结果了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="宏任务与微任务的区别"><a href="#宏任务与微任务的区别" class="headerlink" title="宏任务与微任务的区别"></a>宏任务与微任务的区别</h1><ul>
<li><p>宏任务：在 DOM 渲染后触发，如 setTimeout</p>
</li>
<li><p>微任务：DOM 渲染前触发，如 Promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 DOM</span></span><br><span class="line"><span class="keyword">const</span> $p1 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p2 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> $p3 = $(<span class="string">&#x27;&lt;p&gt;一段文字&lt;/p&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).append($p1).append($p2).append($p3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微任务：渲染之前执行（DOM 结构已更新）</span></span><br><span class="line"><span class="comment">// Promise.resolve().then(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const length = $(&#x27;#container&#x27;).children().length</span></span><br><span class="line"><span class="comment">//     alert(`micro task $&#123;length&#125;`) // 3,DOM 没有渲染出来</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏任务：渲染之后执行（DOM 结构已更新）</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = $(<span class="string">&#x27;#container&#x27;</span>).children().length</span><br><span class="line">    alert(<span class="string">`macro task <span class="subst">$&#123;length&#125;</span>`</span>) <span class="comment">// 3,DOM 已经渲染完毕</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>再深入思考一下：为何两者会有以上区别，一个在渲染前，一个在渲染后？</p>
<ul>
<li>微任务：ES 语法标准之内，JS 引擎来统一处理。即，不用浏览器有任何干预，即可一次性处理完，更快更及时。</li>
<li>宏任务：ES 语法没有，JS 引擎不处理，浏览器（或 nodejs）干预处理。</li>
</ul>
<h1 id="从-event-loop-解释，为何微任务执行更早"><a href="#从-event-loop-解释，为何微任务执行更早" class="headerlink" title="从 event loop 解释，为何微任务执行更早"></a>从 event loop 解释，为何微任务执行更早</h1><img src="image-20201203094801835.png" alt="image-20201203094801835" style="zoom: 25%;" />

<p>当执行 Promise 或 async/await 这种微任务的时候，会等待时机将它放在 micro task queue （与宏任务队列 Callba queue 是分开的）里面，而且不会经过 Web APIs ，因为 Promise 是 ES6 规范，不是 W3C 规范。</p>
<p>产生这种区别的原因是：</p>
<ul>
<li>微任务是 ES6 语法规定的</li>
<li>宏任务是由浏览器规定的</li>
</ul>
<p>因此在执行的时候分成了四步来完成：</p>
<img src="image-20201203095401879.png" alt="image-20201203095401879" style="zoom:25%;" />

<h1 id="微任务和宏任务-总结"><a href="#微任务和宏任务-总结" class="headerlink" title="微任务和宏任务-总结"></a>微任务和宏任务-总结</h1><ul>
<li>宏任务有哪些？微任务有哪些？为什么微任务触发时机更早</li>
<li>微任务、宏任务和 DOM 渲染的关系</li>
<li>微任务、宏任务和 DOM 渲染，在 event loop 的过程</li>
</ul>
<h1 id="考题"><a href="#考题" class="headerlink" title="考题"></a>考题</h1><p><strong>描述 event loop 机制（可画图）</strong></p>
<ul>
<li>回顾 event loop 的过程</li>
<li>和 DOM 渲染的关系</li>
<li>微任务和宏任务在 event loop 过程中的不同处理</li>
</ul>
<p>后两点可以先放一放，先把第一点讲清楚后，如果进阶问，再讲这块，否则一气讲完会很乱</p>
<p><strong>什么事宏任务和微任务，两者区别</strong></p>
<ul>
<li>宏任务：setTimeout，setInterval、Ajax、DOM 事件</li>
<li>微任务：Promise、async/await</li>
<li>微任务执行时机比宏任务要早（再细就是微任务在 DOM 渲染前触发，宏任务在 DOM 渲染后触发）</li>
</ul>
<p><strong>Promise 的三种状态，如何变化</strong></p>
<ul>
<li>pending、resolved、rejected</li>
<li>pending -&gt; resolved 或 pending -&gt; rejected</li>
<li>变化不可逆</li>
</ul>
<p><strong>场景题 - promise then 和 catch 的连接</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error1&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三题</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error1&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：13，123，12</span></span><br></pre></td></tr></table></figure>

<p><strong>场景题 - async / await 语法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = fn() <span class="comment">// ??</span></span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> fn() <span class="comment">// ??</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 返回 promise 对象，b 返回 100</span></span><br><span class="line"></span><br><span class="line">!(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>, a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">200</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b&quot;</span>, b)</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">300</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;c&quot;</span>, c)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;)() <span class="comment">// 执行完毕后，打印哪些内容？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start -&gt; a 100 -&gt; b 200 -&gt; 报错</span></span><br></pre></td></tr></table></figure>

<p><strong>场景题 - Promise 和 setTimeout 的顺序</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100 -&gt; 400 -&gt; 300 -&gt; 200</span></span><br></pre></td></tr></table></figure>

<p><strong>场景题 - 外加 async / await 的顺序问题</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start -&gt; async1 start -&gt; async2 -&gt; promise1 -&gt; script end -&gt; async1 end -&gt; promise2 -&gt; setTimeout</span></span><br></pre></td></tr></table></figure>

<p><em>注：new Promise 时，传入的函数会立马被执行</em></p>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>异步进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS基础之单线程和异步</title>
    <url>/2020/12/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<p>三座大山之三，必考！</p>
<h1 id="单线程和异步"><a href="#单线程和异步" class="headerlink" title="单线程和异步"></a>单线程和异步</h1><ul>
<li>JS 是单线程语言，只能同时做一件事</li>
<li>浏览器和 nodejs 已经支持 JS启动进程，如 Web Worker</li>
<li>JS 和 DOM 渲染共用一个线程，因为 JS 可以修改 DOM 结构</li>
</ul>
<p>因此</p>
<a id="more"></a>

<ul>
<li>遇到等待（网络请求、定时任务）不能卡住</li>
<li>需要异步（解决单线程等待的这种问题）</li>
<li>异步是基于 callback 函数形式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步 通过 callback 函数，这里是 () =&gt; &#123; console.log(200) &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line">alert(<span class="number">200</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<h2 id="异步的应用场景"><a href="#异步的应用场景" class="headerlink" title="异步的应用场景"></a>异步的应用场景</h2><ul>
<li>网络请求，如 Ajax、图片加载</li>
<li>定时任务，如 setTimeout</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ajax</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">$.get(<span class="string">&quot;./data.json&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片加载</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;loaded&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(end)</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">200</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<h1 id="callback-hell"><a href="#callback-hell" class="headerlink" title="callback hell"></a>callback hell</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// callback hell (回调地狱)</span></span><br><span class="line"><span class="comment">// 获取第一份数据</span></span><br><span class="line">$.get(url1, <span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第二份数据</span></span><br><span class="line">    $.get(url2, <span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第三份数据</span></span><br><span class="line">        $.get(url3, <span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data3)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 还可能获取更多的数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise 主要解决的是 callback hell 的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url,</span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">error</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url1 = <span class="string">&quot;./data1.json&quot;</span></span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&quot;./data2.json&quot;</span></span><br><span class="line"><span class="keyword">const</span> url3 = <span class="string">&quot;./data3.json&quot;</span></span><br><span class="line">getData(url1)</span><br><span class="line">    .then(<span class="function">(<span class="params">data1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data1)</span><br><span class="line">        <span class="keyword">return</span> getData(url2)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data2)</span><br><span class="line">        <span class="keyword">return</span> getData(url3)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data3)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err))</span><br></pre></td></tr></table></figure>

<h1 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h1><ul>
<li>异步是基于 JS 是单线程语言</li>
<li>异步不会阻塞代码执行</li>
<li>同步会阻塞代码执行</li>
</ul>
<h1 id="手写-Promise-加载两张图片"><a href="#手写-Promise-加载两张图片" class="headerlink" title="手写 Promise 加载两张图片"></a>手写 Promise 加载两张图片</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">        img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`图片加载失败！<span class="subst">$&#123;src&#125;</span>`</span>)</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> urll = <span class="string">&quot;./1.jpg&quot;</span></span><br><span class="line"><span class="keyword">const</span> url2 = <span class="string">&quot;./2.jpg&quot;</span></span><br><span class="line">loadImg(urll)</span><br><span class="line">    .then(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img1.width)</span><br><span class="line">        <span class="comment">// 返回一个普通对象</span></span><br><span class="line">        <span class="keyword">return</span> img1</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">img1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img1.height)</span><br><span class="line">        <span class="comment">// 返回一个 Promise 实例</span></span><br><span class="line">        <span class="keyword">return</span> loadImg(url2)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">img2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img2.width)</span><br><span class="line">        <span class="keyword">return</span> img2</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">img2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(img2.height)</span><br><span class="line">        <span class="keyword">return</span> loadImg(url2)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>变量类型和计算</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS基础之作用域和闭包</title>
    <url>/2020/11/30/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<p>三座大山之二，不会闭包，基本不会通过！</p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>块级作用域（ES6新增）</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 块级作用域</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x)  <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure>



<h2 id="自由变量"><a href="#自由变量" class="headerlink" title="自由变量"></a>自由变量</h2><ul>
<li>一个变量没有被当前作用域定义，但被使用了</li>
<li>向上级作用域，一层一层依次寻找，直到找到为止</li>
<li>如果到全局作用域都没找到，则报错 xx is not defined</li>
</ul>
<img src="image-20201215195243851.png" alt="image-20201215195243851" style="zoom: 50%;" />

<p>如上图，a、a1、a2 都是自由变量，a3则是在当前函数作用域下定义过</p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>其实是作用域应用的特殊情况，有两种表现:</p>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 此处的 a 是一个自由变量，向上级作用域寻找</span></span><br><span class="line">        <span class="built_in">console</span>.log(a)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = create()</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span></span><br><span class="line">fn()  <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">200</span></span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a 是自由变量，上级作用域为全局作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">print(fn)  <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：所有的自由变量的查找，是在函数定义的地方向上级作用域查找，不是在执行的地方！</strong></p>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul>
<li>作为全局下普通函数的调用者</li>
<li>使用 call、apply、bind 调用</li>
<li>作为对象方法被调用</li>
<li>在 class 方法中调用</li>
<li>在箭头函数中调用</li>
</ul>
<p><strong>切记，this 在上面场景中取什么样的值，是在函数执行的时候确认的，不是在定义的时候确认的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn1()  <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line">fn1.call(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;) <span class="comment">// &#123; x: 100 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.bind(&#123; <span class="attr">x</span>: <span class="number">200</span> &#125;)  <span class="comment">// bind 返回一个新的函数</span></span><br><span class="line">fn2()  <span class="comment">// &#123; x: 200 &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zs = &#123;</span><br><span class="line">    name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// this 即当前对象 zs</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">wait</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// this === window</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zs = &#123;</span><br><span class="line">    name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// this 即当前对象 zs</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">waitAgain</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// this 即当前对象 zs</span></span><br><span class="line">            <span class="comment">// 箭头函数里面的 this 取值是取上级作用域的 this 值</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> People(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">zs.sayHi()   <span class="comment">// zs 对象</span></span><br></pre></td></tr></table></figure>



<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="this-不同应用场景如何取值"><a href="#this-不同应用场景如何取值" class="headerlink" title="this  不同应用场景如何取值"></a>this  不同应用场景如何取值</h2><ul>
<li>作为普通函数调用（包括立即执行函数），this 指向 window</li>
<li>使用 call、apply、bind 调用，传入什么 this 就指向的是什么</li>
<li>在对象方法中调用，如果有 settimeout 则 this 指向 window ，若无 settimeout ，则指向当前对象本身</li>
<li>在箭头函数中的 this 取上级作用域的 this 的值</li>
<li>在 class 方法中调用 this ，则指向实例本身</li>
</ul>
<h2 id="手写-bind-函数"><a href="#手写-bind-函数" class="headerlink" title="手写 bind 函数"></a>手写 bind 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种 通过 call 或 apply 实现</span></span><br><span class="line"><span class="comment">// 通过在构造函数原型对象上增加一个 myBind 来模拟 bind</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将参数拆解为数组</span></span><br><span class="line">    <span class="comment">// const args = Array.prototype.slice.call(arguments)</span></span><br><span class="line">    <span class="keyword">const</span> args = [...arguments]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 this 并将数组第一项 this 挖出去</span></span><br><span class="line">    <span class="keyword">const</span> t = args.shift()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fn1.myBind(...) 中的 fn1</span></span><br><span class="line">    <span class="comment">// 由于是 fn1 调用的 bind2</span></span><br><span class="line">    <span class="comment">// 所以这里的 this 指向 fn1</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(t, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种 不通过 call、apply 方法实现</span></span><br><span class="line"><span class="comment">// Function.prototype.myBind = function () &#123;</span></span><br><span class="line"><span class="comment">//     const args = [...arguments]</span></span><br><span class="line"><span class="comment">//     const fn = Symbol(&quot;fn&quot;)</span></span><br><span class="line"><span class="comment">//     const bindObj = args.shift()</span></span><br><span class="line"><span class="comment">//     bindObj.fn = this</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         const result = bindObj.fn(...args)</span></span><br><span class="line"><span class="comment">//         delete bindObj.fn</span></span><br><span class="line"><span class="comment">//         return result</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is fn1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.myBind(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">相当于返回了一个函数</span></span><br><span class="line"><span class="comment">const fn2 = function () &#123;</span></span><br><span class="line"><span class="comment">    return fn1.apply(&#123; x: 100 &#125;, [10, 20, 30])</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> res = fn2()</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br></pre></td></tr></table></figure>



<h2 id="手写-call-函数"><a href="#手写-call-函数" class="headerlink" title="手写 call 函数"></a>手写 call 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这一段是无参数判断逻辑，并通过 apply 实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [...arguments]</span><br><span class="line">    <span class="keyword">const</span> t = args.shift()</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> result = self.apply(t, args)</span><br><span class="line">    <span class="built_in">console</span>.log(self)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种实现方式 不通过 apply 实现</span></span><br><span class="line"><span class="comment">// Function.prototype.myCall = function () &#123;</span></span><br><span class="line"><span class="comment">//     const args = [...arguments]</span></span><br><span class="line"><span class="comment">//     const self = args.shift()</span></span><br><span class="line"><span class="comment">//     const fn = Symbol(&quot;fn&quot;)</span></span><br><span class="line"><span class="comment">//     self.fn = this</span></span><br><span class="line"><span class="comment">//     const result = self.fn(...args)</span></span><br><span class="line"><span class="comment">//     delete self.fn</span></span><br><span class="line"><span class="comment">//     return result</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this&quot;</span>, <span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line">a.myCall(&#123; <span class="attr">a</span>: <span class="number">100</span> &#125;, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这一段是实现参数判断逻辑</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入的第一个参数是否为一个对象且不能为 null</span></span><br><span class="line">    <span class="comment">// 如果不是则 this 为 window</span></span><br><span class="line">    <span class="comment">// const flag = arguments.length &gt;= 2 &amp;&amp; typeof arguments[0] === &#x27;object&#x27; &amp;&amp; arguments[0] !== &#x27;null&#x27;</span></span><br><span class="line">    <span class="comment">// 上下两种逻辑均可</span></span><br><span class="line">    <span class="keyword">const</span> flag = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="built_in">Object</span></span><br><span class="line">    <span class="keyword">const</span> args = [...arguments]</span><br><span class="line">    <span class="keyword">let</span> t</span><br><span class="line">    <span class="comment">// 如果有绑定的对象则将这个对象从数组中挖出来</span></span><br><span class="line">    <span class="keyword">if</span> (flag) t = args.shift()</span><br><span class="line">    <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> result = self.apply(t, args)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this&quot;</span>, <span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line">a.myCall(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h2 id="手写-apply-函数"><a href="#手写-apply-函数" class="headerlink" title="手写 apply 函数"></a>手写 apply 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种实现方式 通过 call 实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> args = [...arguments]</span><br><span class="line">    <span class="keyword">const</span> self = args.shift()</span><br><span class="line">    <span class="comment">// arguments 里面是一个对象 + 数组</span></span><br><span class="line">    <span class="comment">// 通过扩展运算符,并取出第一个对象后</span></span><br><span class="line">    <span class="comment">// 此时里面的 index 为 0 的数据是一个数组，所以需要 args[0]</span></span><br><span class="line">    <span class="keyword">const</span> result = that.call(self, ...args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种实现方式 不通过 call 实现</span></span><br><span class="line"><span class="comment">// Function.prototype.myApply = function (thisArg, args) &#123;</span></span><br><span class="line"><span class="comment">//     const fn = Symbol(&#x27;fn&#x27;)        // 声明一个独有的Symbol属性, 防止fn覆盖已有属性</span></span><br><span class="line"><span class="comment">//     thisArg = thisArg || window    // 若没有传入this, 默认绑定window对象</span></span><br><span class="line"><span class="comment">//     thisArg.fn = this              // this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class="line"><span class="comment">//     const result = thisArg.fn(...args)  // 执行当前函数</span></span><br><span class="line"><span class="comment">//     delete thisArg.fn              // 删除我们声明的fn属性</span></span><br><span class="line"><span class="comment">//     return result                  // 返回函数执行结果</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;</span><br><span class="line">foo.myApply(&#123; <span class="attr">x</span>: <span class="number">300</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p><strong><em>注：Symbol 生成一个全局唯一的值</em></strong></p>
<h2 id="三兄弟区别"><a href="#三兄弟区别" class="headerlink" title="三兄弟区别"></a>三兄弟区别</h2><ul>
<li>三兄弟接收的第一个参数都是要绑定的 this 指向</li>
<li>apply 的第二个参数是一个参数数组，call 和 bind 的第二个及之后的参数作为函数实参按顺序传入</li>
<li>bind 不会立即调用，其他两个会立即调用</li>
</ul>
<h1 id="实际开发中闭包的应用"><a href="#实际开发中闭包的应用" class="headerlink" title="实际开发中闭包的应用"></a>实际开发中闭包的应用</h1><ul>
<li><p>隐藏数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包隐藏数据，只提供 API</span></span><br><span class="line"><span class="comment">// 做一个简单的 cache 工具</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCache</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125; <span class="comment">// 闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">    <span class="comment">// 闭包的一种方式，返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            data[key] = value</span><br><span class="line">        &#125;,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们不通过 set、get 无法修改 data 的值</span></span><br><span class="line"><span class="comment">// 因为 data 是在 createCache 作用域里面的，不会被外界所访问</span></span><br><span class="line"><span class="keyword">const</span> c = createCache()</span><br><span class="line">c.set(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c.get(<span class="string">&quot;a&quot;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击 a 标签弹出对应的标签序号</span></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="comment">// let i 是定义了一个 for 里面的块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    a.innerHTML = i + <span class="string">&quot;&lt;br&gt;&quot;</span></span><br><span class="line">    a.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        alert(i)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者也可使用立即执行函数来实现。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>作用域和闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS基础之原型和原型链</title>
    <url>/2020/11/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p><strong>三座大山之一，必考！！！</strong></p>
<p>JS 本身是一个基于原型基层的语言，ES6 之前，写继承的时候只能通过原型来继承，ES6 出来之后引入了 class 语法，可以通过 class 继承，但是基于对 class 的剖解来看，class 真正上的继承还是原型上的继承。</p>
<a id="more"></a>

<h1 id="如何用-Class-实现继承"><a href="#如何用-Class-实现继承" class="headerlink" title="如何用 Class 实现继承"></a>如何用 Class 实现继承</h1><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>class 本质上就类似于一个模版，我们可以通过模版去构建一些东西。</p>
<ul>
<li>constructor</li>
<li>属性</li>
<li>方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, number</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.number = number</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="comment">// 模版字符串</span></span><br><span class="line">            <span class="string">`姓名:<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, 学号:<span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>`</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类 new 对象/实例  (可以 new n多个对象)</span></span><br><span class="line"><span class="keyword">let</span> xiaoa = <span class="keyword">new</span> Student(<span class="string">&#x27;小A&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaoa.name)    <span class="comment">// 小A</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaoa.number)  <span class="comment">// 18</span></span><br><span class="line">xiaoa.sayHi()              <span class="comment">// 姓名:小A, 学号:18</span></span><br></pre></td></tr></table></figure>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>当我们有很多个 class ，这些 class 有一些比较公共的属性的时候，就可以把它抽离出来，让后让这些 class 继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, number</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 super 把 name 给 people 的 constructor</span></span><br><span class="line">        <span class="comment">// 然后把名字赋值到属性上</span></span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.number = number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`姓名:<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,学号<span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// teacher子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, major</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.major = major</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">teach</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> 教授 <span class="subst">$&#123;<span class="built_in">this</span>.major&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;A同学&#x27;</span>, <span class="number">66</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.name)      <span class="comment">// A同学</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.number)	  <span class="comment">// 66</span></span><br><span class="line">s1.sayHi()				 <span class="comment">// 姓名:A同学,学号66</span></span><br><span class="line">s1.eat()                  <span class="comment">// A同学 eat something</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> Teacher(<span class="string">&#x27;C老师&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(t1.name)     <span class="comment">// C老师</span></span><br><span class="line"><span class="built_in">console</span>.log(t1.major)    <span class="comment">// 语文</span></span><br><span class="line">t1.teach()               <span class="comment">// C老师 教授 语文</span></span><br><span class="line">t1.eat()                 <span class="comment">// C老师 eat something</span></span><br></pre></td></tr></table></figure>



<h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h1><p>主要是判断 instanceof 前面的是否由 instanceof 后面的构建出来的，接上面代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line">s1 <span class="keyword">instanceof</span> Student     <span class="comment">// true</span></span><br><span class="line">s1 <span class="keyword">instanceof</span> People      <span class="comment">// true   People 是 Student 的父类，也参与了构建的一部分</span></span><br><span class="line">s1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>      <span class="comment">// true   Object 是所有 class 的父类</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>       <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>      <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h1 id="JS原型"><a href="#JS原型" class="headerlink" title="JS原型"></a>JS原型</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 实际上是函数，可见是语法糖</span></span><br><span class="line"><span class="keyword">typeof</span> People   <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> Student  <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式原型和显式原型</span></span><br><span class="line"><span class="built_in">console</span>.log( s1.__proto__ )        <span class="comment">// 隐式原型</span></span><br><span class="line"><span class="built_in">console</span>.log( Student.prototype )   <span class="comment">// 显式原型</span></span><br><span class="line"><span class="built_in">console</span>.log( s1.__proto__ === Student.prototype )  <span class="comment">// true 也就是两个引用的是一个内存地址</span></span><br></pre></td></tr></table></figure>

<p>在定义 class Student 的时候会有一个显式原型（prototype）指向一个对象（Student.prototype），并且把方法（sayHi）放在这个对象（Student.prototype）里面，通过 new 一个实例对象 s1 之后，他的 name、number 会放在实例对象 s1 本身，而这里的 sayHi 方法是通过隐式原型指向（Student.prototype）里面的方法来获取的。</p>
<img src="1606225829665.png" alt="1606225829665" style="zoom: 67%;" />



<h2 id="原型关系"><a href="#原型关系" class="headerlink" title="原型关系"></a>原型关系</h2><ul>
<li>每个 class 都有显式原型 prototype</li>
<li>每个实例都有隐式原型 __ proto __</li>
<li>实例的隐式原型 __ proto __ 指向对应的 class 的显示原型 prototype</li>
</ul>
<h2 id="基于原型的执行规则"><a href="#基于原型的执行规则" class="headerlink" title="基于原型的执行规则"></a>基于原型的执行规则</h2><ul>
<li><p>获取属性 s1.name 或执行方法 s1.sayHi() 时</p>
</li>
<li><p>先在自身属性和方法寻找</p>
</li>
<li><p>如果找不到则自动去隐式原型 __ proto __ 中查找 </p>
<p>例如获取 s1.sayHi（），此时 s1 自身并没有 sayHi 方法，因此去 s1 的 __ proto __ 中查找，而隐式原型正好指向 class 的显式原型 Student.prototype ，然后就找到了 sayHi 方法。</p>
</li>
</ul>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Student.prototype.__proto__)</span><br><span class="line"><span class="built_in">console</span>.log(People.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(People.prototype === Student.prototype.__proto__)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>首先，左下角三个图的关系对应上一张图。但这里的 Student 的显式原型（Student.prototype）还会有一个隐式原型，指向了 People 的显式原型（People.prototype）,People 原型里面有 eat 方法。</p>
<p>逻辑上来讲，实例 s1 是通过 Student new 出来的，所以 s1 的隐式原型指向 Student 的显式原型。其次可以理解为 Student 的显式原型对象（Student.prototype）是通过 People new 出来的，所以 Student.prototype 的隐式原型指向 People 的显式原型（People.prototype）,</p>
<img src="1606262732500.png" alt="1606262732500" style="zoom: 80%;" />

<p>整体上说：</p>
<ul>
<li><p>访问 s1.name/number 是通过 s1 本身属性；</p>
</li>
<li><p>访问 s1.sayHi() ,此时由于 s1 本身没有 sayHi 方法，所以通过隐式原型指向的 Student 上的显式原型对象找到 sayHi 方法；</p>
</li>
<li><p>访问 s1.eat() , s1 的身上与其身上隐式原型指向的 Student.prototype 都没有此方法，因此再通过 Student.prototype 上的隐式原型指向的 People.prototype 上来找到 eat 方法（由此形成了一个链）</p>
</li>
</ul>
<p>我们可以通过 s1.hasOwnProperty(‘属性’) 来判断某个属性或方法是否为自身拥有，那么 hasOwnProperty() 方法是哪里来的？</p>
<p>从下图可以看出 Student 继承于 People ， People 继承于 Object ，所以说 People 的显式原型对象中也有隐式原型，并且指向 Object 的显式原型对象 Object.prototype （JS 引擎本身自己带的），Object 原型里面有很多方法。</p>
<p><strong>因此 s1 访问 hasOwnProperty 方法，就会通过这个原型链来一级一级查找，最终在基类 Object 的显式原型上找到 hasOwnProperty 方法</strong></p>
<img src="1606264497414.png" alt="1606264497414" style="zoom:80%;" />

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类 Object 的显式原型对象身上的隐式原型永远指向 null </span></span><br><span class="line"><span class="comment">// 因此基类 Object 的显式原型对象为原型链的最后一级</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__     <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



<h3 id="再看-instanceof"><a href="#再看-instanceof" class="headerlink" title="再看 instanceof"></a>再看 instanceof</h3><p>还是这张图， instanceof 前面的变量顺着隐式原型往上找，如果能对应到 instanceof 后面的参数 class 的显式原型（或者原型链上的显式原型），如果能对应到，那么 instanceof 成立返回 true，如果对应不到就返回 false ，</p>
<img src="1606264497414.png" alt="1606264497414" style="zoom:80%;" />



<h2 id="重要提示！！！"><a href="#重要提示！！！" class="headerlink" title="重要提示！！！"></a>重要提示！！！</h2><ul>
<li>class 是 ES6 语法规范，由 ECMA 委员会发布</li>
<li>ECMA 只规定语法规则，即我们代码的书写规范，不规定如何实现</li>
<li>以上实现方式都是 V8 引擎的实现方式，也是主流的</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><ul>
<li><p>如何准确判断一个变量是不是数组？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结合原型链的图理解 instanceof </span></span><br><span class="line"><span class="keyword">const</span> a = []</span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从原型入手: Array.prototype.isPrototypeOf(obj)</span></span><br><span class="line"><span class="comment">// 利用isPrototypeOf()方法，判定Array是不是在obj的原型链中如果是，则返回true,否则false。</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.isPrototypeOf(a)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>class 的原型本质，怎么理解？</p>
<ul>
<li>每个 class 都有显式原型 prototype</li>
<li>每个实例都有隐式原型 __ proto __</li>
<li>实例的隐式原型 __ proto __ 指向对应的 class 的显示原型 prototype</li>
<li>获取实例身上属性或执行方法时，先在自身属性和方法寻找，如果找不到则自动去隐式原型指向的父类显式原型对象中查找 ，然后顺着与原型链去查找。</li>
</ul>
</li>
<li><p>手写一个简易的 jQuery，考虑插件和扩展性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 首先 DOM 查询</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="built_in">document</span>.querySelectorAll(selector)</span><br><span class="line">        <span class="keyword">const</span> length = result.length</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对查出的结果进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 把遍历的每个结果都放到 this 上</span></span><br><span class="line">            <span class="built_in">this</span>[i] = result[i]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.length = length</span><br><span class="line">        <span class="built_in">this</span>.selector = selector</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jQuery 中的 get 方法</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>[index]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// each 遍历</span></span><br><span class="line">    <span class="function"><span class="title">each</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">this</span>[i]</span><br><span class="line">            fn(elem)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// on 监听方法</span></span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">type, fn</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.each(<span class="function"><span class="params">elem</span> =&gt;</span> &#123;</span><br><span class="line">            elem.addEventListener(type, fn, <span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还可扩展很多 DOM 操作 API</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const $p = new jQuery(&#x27;p&#x27;)</span></span><br><span class="line"><span class="comment">// $p.get(1)</span></span><br><span class="line"><span class="comment">// $p.each((elem) =&gt; console.log(elem.nodeName))</span></span><br><span class="line"><span class="comment">// $p.on(&#x27;click&#x27;, () =&gt; alert(&#x27;clicked&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件机制（做一个插件，但其实用的还是 jQuery）</span></span><br><span class="line">jQuery.prototype.dialog = <span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">    alert(info)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $p.dialog(&#x27;123456&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;造轮子&quot; (复写机制)</span></span><br><span class="line"><span class="comment">// 就是基于这个 jQuery 去造一个更加完美的 myJQuery 供使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myJQuery</span> <span class="keyword">extends</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// super 的好处体现，直接使用 jQuery 的复杂 constructor，无需再写一遍逻辑</span></span><br><span class="line">        <span class="built_in">super</span>(selector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展自己的方法...</span></span><br><span class="line">    <span class="function"><span class="title">addClass</span>(<span class="params">className</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="title">style</span>(<span class="params">data</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>原型和原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-JS基础之变量类型和计算</title>
    <url>/2020/11/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-JS%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p><strong>变量是每个语言最开始的基础，不会变量，别说会 JS</strong></p>
<h1 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h1><h2 id="值类型与引用类型的区别"><a href="#值类型与引用类型的区别" class="headerlink" title="值类型与引用类型的区别"></a>值类型与引用类型的区别</h2><a id="more"></a>

<p>先看两段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">let</span> a = &#123; age = <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.age) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p>深入分析</p>
<p><strong>通过第一个值类型来看</strong>，首先变量一般会在函数中或者全局中出现，无论是函数还是全局中，值类型都是通过在栈（计算机的内存结构）中存储的，示意图如下</p>
<p><img src="1606179634158.png" alt="1606179634158"></p>
<p><strong>通过第二个引用类型来看</strong>，在计算机变量存储的时候，栈和堆是同时存在的，栈是从上到下一层层累加，而堆是从下往上一层层落，因此在 age = 20 的这个对象在堆中申请一个内存地址，然后把 age = 20 放在堆里面，然后 key 中存储对应的内存地址，而这个时候栈中存储的 a 的 value 指向的是内存地址 1，也就是说并不是直接存储的对象，而是存储的这个内存地址指向这个对象，示意图如下</p>
<p><img src="1606180185281.png" alt="1606180185281"></p>
<h3 id="常见的值类型与引用类型"><a href="#常见的值类型与引用类型" class="headerlink" title="常见的值类型与引用类型"></a>常见的值类型与引用类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见值类型</span></span><br><span class="line"><span class="keyword">let</span> a                  <span class="comment">// undefined（const a必须赋值，不赋值直接报错而不是undefined）</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;abc&#x27;</span>        <span class="comment">// String</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">100</span>          <span class="comment">// Number</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span>         <span class="comment">// Boolean</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>(<span class="string">&#x27;s&#x27;</span>)  <span class="comment">// ES6新增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见引用类型</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> n = <span class="literal">null</span>     <span class="comment">// 特殊引用类型，指针指向为空地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;   <span class="comment">// 特殊引用类型，但不用与存储数据，所以没有&quot;拷贝、赋值函数&quot;这一说</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例题</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1</span><br><span class="line"><span class="keyword">let</span> x1 = obj1.x      <span class="comment">// x1 为值类型，直接就把 100 赋值过去</span></span><br><span class="line">obj2.x = <span class="number">101</span></span><br><span class="line">x1 = <span class="number">102</span>			<span class="comment">// x1的改变与引用类型没有关系</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1)    <span class="comment">// &#123; x: 101, y: 200 &#125;</span></span><br></pre></td></tr></table></figure>

<p><em>注：</em>至于值类型与引用类型是不同的赋值形式，原因是<strong>考虑到性能或者存储</strong>的问题，<strong>值类型占用的空间较少</strong>（因为只有一个值），所以直接放在栈里面同时复制的时候也不会对性能造成很大的影响；而<strong>引用类型中的 Json 对象可能非常大</strong>，第一：直接放到栈的值里面会导致存储地址非常大，不好管理。第二：如果复制的时候直接复制value会导致复制过程非常的慢。因此<strong>计算机所有的程序，所有的代码，所有的语言都是采用值类型与引用类型严格的分离出来</strong>，它们的<strong>存储机制</strong>、<strong>赋值机制</strong>、<strong>拷贝机制</strong>也是严格的区分出来，它是<strong>基于内存的空间与 CPU 计算的耗时</strong>做到这样的区分。让<strong>引用类型也类似于值类型赋值方式</strong>，就<strong>需要深拷贝</strong>。</p>
<h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><ul>
<li>识别所有值类型</li>
<li>识别函数</li>
<li>判断是否是引用类型（不可再细分）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断所有值类型</span></span><br><span class="line"><span class="keyword">let</span> a;                  <span class="keyword">typeof</span> a   <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abc&#x27;</span>;      <span class="keyword">typeof</span> str <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="literal">true</span>;         <span class="keyword">typeof</span> n   <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span>;          <span class="keyword">typeof</span> b   <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);  <span class="keyword">typeof</span> s   <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 能判断函数</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log       <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;     <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 能识别引用类型（不能再继续识别数组、null 这些，只能归为 object）</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>        <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]  <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;  <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p><strong>浅拷贝</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝，浅拷贝只是拷贝了引用对象存储栈中的 value（内存地址），所以任意的修改会造成堆中值的修改</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    name: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        city: <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    arr: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = obj1</span><br><span class="line">obj2.address.city = <span class="string">&#x27;tieling&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.adress.city)   <span class="comment">// tieling</span></span><br></pre></td></tr></table></figure>

<p><strong>深拷贝</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若只想修改 obj2 而不干扰到 obj1，所以就需要深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// obj 是 null， 或者 obj 不是对象或者数组，就没必要做深拷贝</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化返回结果</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是数组，就将返回结果初始化为空数组</span></span><br><span class="line">        result = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是对象，就将返回结果初始化为空对象</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无论是对象或者数组都可以用 for in 做遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// 保证key不是原型的属性，而是自身特有的</span></span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="comment">// 递归调用！防止剩余深层次的内容</span></span><br><span class="line">            <span class="comment">// result[key] = &#123; key1: &#123; key2: obj[key][key1][key2] &#125; &#125; 如果还有就一直循环下去</span></span><br><span class="line">            result[key] = deepClone(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将结果返回出去</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时就可以通过下面这一行代码实现深拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj2 = deepClone(obj1)</span><br></pre></td></tr></table></figure>



<h2 id="变量计算-类型转换"><a href="#变量计算-类型转换" class="headerlink" title="变量计算-类型转换"></a>变量计算-类型转换</h2><p><em>最容易考察也是最容易疏忽的地方</em></p>
<ul>
<li>字符串拼接</li>
<li>==   （等号运算符）</li>
<li>if语句和逻辑运算</li>
</ul>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span> + <span class="number">10</span>       <span class="comment">// 110</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span> + <span class="string">&#x27;10&#x27;</span>     <span class="comment">// &#x27;10010&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span> + <span class="string">&#x27;10&#x27;</span>    <span class="comment">// &#x27;true10&#x27;</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">true</span> + <span class="number">1</span>       <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="literal">false</span> - <span class="number">1</span>      <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="== 运算符"></a>== 运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 会发生隐式的转换，让他们尝试相等</span></span><br><span class="line"><span class="number">100</span> == <span class="string">&#x27;100&#x27;</span>        <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">&#x27;&#x27;</span>             <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>          <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;&#x27;</span>         <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 == null （判断一个对象属性是 null 或 undefined）之外，在实际开发中其他一律用 === ，例如</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (obj.a == <span class="literal">null</span>) &#123; &#125;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="comment">// if (obj.a === null || obj.a === undefined) &#123; &#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="if语句和逻辑运算"><a href="#if语句和逻辑运算" class="headerlink" title="if语句和逻辑运算"></a>if语句和逻辑运算</h2><ul>
<li><p>truly变量：!!a === true 的变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(!n);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!n)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>falsely变量：!!a === false 的变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(!n);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!n)   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>)        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="string">&#x27;&#x27;</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>)   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;)          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下是 falsely 变量。除此之外都是 truly 变量</span></span><br><span class="line">!!<span class="number">0</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">NaN</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="string">&#x27;&#x27;</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">null</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">undefined</span> === <span class="literal">false</span></span><br><span class="line">!!<span class="literal">false</span> === <span class="literal">false</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>实际上 if 语句里面判断的不是 true 或者 false ，判断的是 truly 或者 falsely 变量</strong></p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// truly 变量</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123; <span class="comment">// ... &#125;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> (b) &#123; <span class="comment">// ... &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// falsely 变量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (c) &#123; <span class="comment">// ... &#125;</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (d) &#123; <span class="comment">// ... &#125;</span></span><br><span class="line"><span class="keyword">let</span> e</span><br><span class="line"><span class="keyword">if</span> (e) &#123; <span class="comment">// ... &#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp;&amp; <span class="number">0</span>)        <span class="comment">// 0      &amp;&amp; 第一个值为 true 则返回第二个，第一个值为 false 则返回第一个</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;abc&#x27;</span>)    <span class="comment">// &#x27;abc&#x27;  || 第一个值为 false 则返回第二个，第一个为 true 则返回第一个</span></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="built_in">window</span>.abc)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>变量类型和计算</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-http 面试题</title>
    <url>/2020/12/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-http-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>前后端分离的时代，网络请求是前端的生命线！</p>
<p>http 面试题</p>
<ul>
<li>前端工程师开发界面</li>
<li>需要调用后端的接口，提交/获取 数据 —— http 协议</li>
<li>要求事先掌握好 ajax</li>
</ul>
<a id="more"></a>

<p>首先看题目</p>
<ul>
<li>http 常见的状态码有哪些？</li>
<li>http 常见的 header 有哪些？</li>
<li>什么是 Restful api</li>
<li>描述一下 http 的缓存机制（重要）</li>
</ul>
<h1 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h1><h2 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h2><ul>
<li>1xx 服务器接收到请求</li>
<li>2xx 请求成功，如 200</li>
<li>3xx 重定向，如 302</li>
<li>4xx 客户端错误，如 404</li>
<li>5xx 服务器端错误，如 500</li>
</ul>
<h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><ul>
<li>200 成功</li>
<li>301 永久重定向（配合 location 新的地址，浏览器自动处理）</li>
<li>302 临时重定向（配合 location 新的地址，浏览器自动处理）</li>
<li>304 资源未被修改</li>
<li>404 资源未找到</li>
<li>403 没有权限</li>
<li>500 服务器错误</li>
<li>504 网关超时</li>
</ul>
<h1 id="http-methods"><a href="#http-methods" class="headerlink" title="http methods"></a>http methods</h1><h2 id="传统的-methods"><a href="#传统的-methods" class="headerlink" title="传统的 methods"></a>传统的 methods</h2><ul>
<li>get 获取服务器的数据</li>
<li>post 向服务器提交数据</li>
<li>简单的网页功能就这两个操作</li>
</ul>
<h2 id="现在的-methods"><a href="#现在的-methods" class="headerlink" title="现在的 methods"></a>现在的 methods</h2><ul>
<li>get 获取数据</li>
<li>post 新建数据（数据还没有，要创建一个新的，比如一个新的留言、新的博客）</li>
<li>patch / put 更新数据</li>
<li>delete 删除数据</li>
</ul>
<h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h1><ul>
<li>一种新的 API 设计方法（早已推广使用）</li>
<li><strong>传统 API 设计：把每个 url 当做一个功能</strong></li>
<li><strong>Restful API 设计：把每个 url 当做一个唯一的资源的标识</strong></li>
</ul>
<h2 id="如何设计一个唯一的资源"><a href="#如何设计一个唯一的资源" class="headerlink" title="如何设计一个唯一的资源"></a>如何设计一个唯一的资源</h2><ul>
<li><p><strong>尽量不用 url 参数</strong></p>
<p><strong>传统 API 设计</strong>：      /api/list?pageInde=2 ，有点像问号前面是一个函数，然后问号后面是一个参数</p>
<p><strong>Restful API 设计</strong>： /api/list/2 ，就是一个资源的标识，不会与其他重复</p>
</li>
<li><p><strong>用 method 表示操作类型</strong></p>
<p><strong>传统 API 设计</strong></p>
<p>​    post 请求： /api/create-blog</p>
<p>​    post 请求： /api/update-blog?id=100</p>
<p>​    get 请求：   /api/get-blog?id=100</p>
<p><strong>Restful API 设计</strong></p>
<p>​    post请求：    /api/blog<br>​    patch请求：  /api/blog/100<br>​    get请求：      /api/blog/100</p>
</li>
</ul>
<h1 id="http-headers"><a href="#http-headers" class="headerlink" title="http headers"></a>http headers</h1><h2 id="常见的-Request-Headers"><a href="#常见的-Request-Headers" class="headerlink" title="常见的 Request Headers"></a>常见的 Request Headers</h2><ul>
<li>Accept：浏览器可接收的数据格式</li>
<li>Accept-Encoding：浏览器可接收的压缩算法，如 gzip (如原来内容100kb，最小压缩到 30kb)</li>
<li>Accept-Language：浏览器可接受的语言，如 zh-CN</li>
<li>Connection:keep-aive 一次 TCP 连接重复使用</li>
<li>cookie</li>
<li>Host：域名</li>
<li>User-Agent（简称 UA）浏览器信息</li>
<li>Content-type：发送数据的格式，如 application/json</li>
</ul>
<h2 id="常见的-Response-Headers"><a href="#常见的-Response-Headers" class="headerlink" title="常见的 Response Headers"></a>常见的 Response Headers</h2><ul>
<li>Content-type：返回数据的格式，如 application/json</li>
<li>Content-length：返回数据的大小，多少字节</li>
<li>Content-Encoding：返回数据的压缩算法，如 gzip</li>
<li>Set-Cookie</li>
</ul>
<h1 id="http-缓存策略"><a href="#http-缓存策略" class="headerlink" title="http 缓存策略"></a>http 缓存策略</h1><h2 id="关于缓存"><a href="#关于缓存" class="headerlink" title="关于缓存"></a>关于缓存</h2><p>当第一次用浏览器访问一个新的网站时（本地无该网站任何信息），服务端会原原本本把所有的数据返回给浏览器，但是当第二次访问时，可以把没有必要重新获取的东西不再重新获取。</p>
<h2 id="关于为什么需要缓存"><a href="#关于为什么需要缓存" class="headerlink" title="关于为什么需要缓存"></a>关于为什么需要缓存</h2><p>最大的目的是为了让页面加载的更快一些。</p>
<p>网络请求的加载到相比于 CPU 的计算，包括页面的渲染都是非常慢的一个事情，所以如果要做性能优化，让页面显示的更快，因此要从最带的瓶颈——网络请求下手，<strong>尽量减少网络请求的体积和数量，让网络请求更快一些</strong>。</p>
<p><strong>可以被缓存的资源</strong>—— 静态资源（js、css、img），可根据文件内容生成一个哈希值，如果内容变了，哈希值会变，输出的文件名也会变，这样文件缓存就没有问题了，但访问 html 时无法再后面加入哈希值。</p>
<h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>初次请求，浏览器返回资源和 Cache-Control ，浏览器有了资源之后可继续工作，这个时候如果服务端感觉资源可以被缓存，就会加一个 Cache-Control ，如果服务端感觉资源不适合被缓存就不会加 Cache-Control 。</p>
<img src="image-20201208212554249.png" alt="image-20201208212554249" style="zoom: 33%;" />

<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><ul>
<li>在 Response Headers 中（服务端控制）</li>
<li>控制强制缓存的逻辑</li>
<li>例如 Cache- Control:max-age=31536000（单位是秒），一年</li>
</ul>
<p>百度的 logo  Cache- Control 是一年</p>
<img src="image-20201208213526848.png" alt="image-20201208213526848" style="zoom: 50%;" />

<p>因此在此请求的时候只要判断 Cache- Control 时间还没过期，然后浏览器就会在本地缓存里面去找这个资源，不会到服务端，然后直接返回这个资源。因此该次请求未经过网络，直接读取的本地缓存会非常快，所以此次请求会更快一些，</p>
<img src="image-20201208213852916.png" alt="image-20201208213852916" style="zoom: 33%;" />

<img src="image-20201208214312281.png" alt="image-20201208214312281" style="zoom: 50%;" />

<p>如果缓存过期失效了，就会再次请求服务端，服务端重新返回资源和 Cache- Control ，然后又会设置一遍过期时间，这样如果近期再请求，就会命中了本地缓存，很快的返回资源。</p>
<img src="image-20201208214414482.png" alt="image-20201208214414482" style="zoom:33%;" />

<h3 id="Cache-Control-的值"><a href="#Cache-Control-的值" class="headerlink" title="Cache- Control 的值"></a>Cache- Control 的值</h3><ul>
<li>max-age：缓存最大过期时间</li>
<li>no-cache：不用强制缓存，正常向服务端请求</li>
<li>no-store：不用强制缓存而且不用服务端的缓存措施，直接简单粗暴的把资源再重新返回一份，比较彻底，但不常见</li>
<li>private</li>
<li>public</li>
</ul>
<h3 id="关于-Expries（知道即可）"><a href="#关于-Expries（知道即可）" class="headerlink" title="关于 Expries（知道即可）"></a>关于 Expries（知道即可）</h3><ul>
<li>同在 Response Headers 中</li>
<li>同为控制缓存过期</li>
<li>已被 Cache- Control 代替</li>
</ul>
<h2 id="协商缓存（对比缓存）"><a href="#协商缓存（对比缓存）" class="headerlink" title="协商缓存（对比缓存）"></a>协商缓存（对比缓存）</h2><ul>
<li>服务器端缓存策略（服务端判断资源是否可以用浏览器中缓存的内容）</li>
<li>服务器判断客户端资源，是否和服务端资源一样</li>
<li>一致则返回 304，否则返回 200 和最新的资源</li>
</ul>
<img src="image-20201208220028941.png" alt="image-20201208220028941" style="zoom:33%;" />

<h3 id="资源标识"><a href="#资源标识" class="headerlink" title="资源标识"></a>资源标识</h3><p>在 Response Headers （因为是服务端返回的）中，有两种：</p>
<ul>
<li>Last-Modified 资源的最后修改时间</li>
<li>Etag 资源的唯一标识（一个字符串，类似人类的指纹）</li>
</ul>
<h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p>If-Modified-Since 永远返回浏览器缓存中最近一次修改的时间</p>
<img src="image-20201208220458639.png" alt="image-20201208220458639" style="zoom:33%;" />

<h4 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h4><p>If-None-Match 就是上一次服务器端返回的 Etag 字符串</p>
<img src="image-20201208220923688.png" alt="image-20201208220923688" style="zoom:33%;" />

<img src="image-20201208221644782.png" alt="image-20201208221644782" style="zoom: 33%;" />

<p>第一次访问：</p>
<img src="image-20201208221747981.png" alt="image-20201208221747981" style="zoom:25%;" />

<p>第二次访问（通过 Last-Modified 或 Etag 命中缓存）：</p>
<img src="image-20201208221815899.png" alt="image-20201208221815899" style="zoom:25%;" />

<p>可以看出两次资源请求的 size 差的很多</p>
<h4 id="Last-Modified-和-Etag-共存"><a href="#Last-Modified-和-Etag-共存" class="headerlink" title="Last-Modified 和 Etag 共存"></a>Last-Modified 和 Etag 共存</h4><ul>
<li><p>会优先使用 Etag</p>
<p>Last-Modified 只能精确到秒级，对计算机来说秒级还是一个比较宽泛的时间段，一般以 mm 或以内为单位</p>
</li>
<li><p>如果资源被重复生成，而内容不变，则 Etag 更精确（Etag 根据内容计算），而 Last-Modified 每次都会重新请求</p>
</li>
</ul>
<h2 id="http-缓存-综述"><a href="#http-缓存-综述" class="headerlink" title="http 缓存-综述"></a>http 缓存-综述</h2><img src="image-20201208222322100.png" alt="image-20201208222322100" style="zoom: 50%;" />

<h2 id="三种刷新操作"><a href="#三种刷新操作" class="headerlink" title="三种刷新操作"></a>三种刷新操作</h2><ul>
<li>正常操作：地址栏输入 url，跳转链接，前进后退等</li>
<li>手动刷新：F5，点击刷新按钮，右击菜单刷新</li>
<li>强制刷新：ctrl+F5</li>
</ul>
<h3 id="不同刷新操作，不同的缓存策略"><a href="#不同刷新操作，不同的缓存策略" class="headerlink" title="不同刷新操作，不同的缓存策略"></a>不同刷新操作，不同的缓存策略</h3><ul>
<li>正常操作：强制缓存有效，协商缓存有效</li>
<li>手动刷新：强制缓存失效，协商缓存有效</li>
<li>强制刷新：强制缓存失效，协商缓存失效</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul>
<li>http 常见的状态码有哪些</li>
<li>http 常见的 header 有哪些</li>
<li>什么是 Restful API</li>
<li>描述一下 http 的缓存机制（重要，上面流程图一定要会）</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>知识点总结</tag>
        <tag>HTTP 面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-第一阶段完成小结</title>
    <url>/2020/12/11/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E5%AE%8C%E6%88%90%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="知识体系思维导图"><a href="#知识体系思维导图" class="headerlink" title="知识体系思维导图"></a>知识体系思维导图</h1><a id="more"></a>

<img src="前端面试课-思维导图-知识体系.png" alt="前端面试课-思维导图-知识体系" style="zoom: 150%;" />

<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="HTML-面试题"><a href="#HTML-面试题" class="headerlink" title="HTML 面试题"></a>HTML 面试题</h2><ul>
<li>如何理解 HTML 语义化</li>
<li>默认情况下，哪些 HTML 标签是块级元素、哪些是內联元素</li>
</ul>
<h2 id="CSS-布局（1）"><a href="#CSS-布局（1）" class="headerlink" title="CSS - 布局（1）"></a>CSS - 布局（1）</h2><ul>
<li>盒子模型的宽度如何计算</li>
<li>margin 纵向重叠的问题</li>
<li>margin 负值的问题</li>
</ul>
<h2 id="CSS-布局（2）"><a href="#CSS-布局（2）" class="headerlink" title="CSS - 布局（2）"></a>CSS - 布局（2）</h2><ul>
<li>BFC 理解和应用</li>
<li>float 布局的问题，以及 clearfix </li>
<li>flex 画色子</li>
</ul>
<h2 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS - 定位"></a>CSS - 定位</h2><ul>
<li>absolute 和 relative 分别依据什么定位</li>
<li>居中对齐有哪些实现方式</li>
</ul>
<h2 id="CSS-图文样式"><a href="#CSS-图文样式" class="headerlink" title="CSS - 图文样式"></a>CSS - 图文样式</h2><ul>
<li>line-height的继承问题</li>
</ul>
<h2 id="CSS-响应式"><a href="#CSS-响应式" class="headerlink" title="CSS - 响应式"></a>CSS - 响应式</h2><ul>
<li>rem 是什么</li>
<li>如何实现响应式</li>
</ul>
<h2 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h2><ul>
<li>typeof 能判断哪些类型</li>
<li>何时使用 === 何时使用 ==</li>
<li>值类型和引用类型的区别</li>
<li>手写深拷贝</li>
</ul>
<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ul>
<li>如何准确判断一个变量是不是数组</li>
<li>手写一个简易的 jQuery，考虑插件和扩展性</li>
<li>class 的原型本质，怎么理解</li>
</ul>
<h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><ul>
<li>this的不同应用场景，如何取值</li>
<li>手写bind函数</li>
<li>实际开发中闭包的应用场景，举例说明</li>
<li>循环定义生成十个 a 标签，弹出的 i 是多少</li>
</ul>
<h2 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h2><ul>
<li>同步和异步的区别是什么</li>
<li>手写用 Promise 加载一张图片</li>
<li>前端使用异步的场景有哪些</li>
<li>异步执行顺序问题</li>
</ul>
<h2 id="JS-异步进阶"><a href="#JS-异步进阶" class="headerlink" title="JS 异步进阶"></a>JS 异步进阶</h2><ul>
<li>请描述 event loop（事件循环/事件轮询）的机制，可画图</li>
<li>什么是宏任务和微任务，两者有什么区别</li>
<li>Promise 有哪三种状态？如何变化</li>
<li>promise、then 和 catch 的连接</li>
<li>async / await 的语法</li>
<li>promise 和 setTimeout 的顺序</li>
<li>外加 async / await 的顺序问题</li>
</ul>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul>
<li>DOM 是哪种数据结构</li>
<li>DOM 操作的常用 API </li>
<li>attr 和 property 的区别</li>
<li>一次性插入多个 DOM 节点，考虑性能</li>
</ul>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul>
<li>如何识别浏览器的类型</li>
<li>分析拆解 url 各个部分</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>编写一个通用的事件监听函数</li>
<li>描述事件冒泡的流程</li>
<li>无限下拉的图片列表，如何监听每个图片的点击</li>
</ul>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><ul>
<li>手写一个简易的 ajax</li>
<li>跨域的常用实现方式</li>
</ul>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul>
<li>描述 cookie、localStorage、sessionStorage 区别</li>
</ul>
<h2 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h2><ul>
<li>从输入 url 到渲染出页面的整个过程</li>
<li>window.onload 和 DOMContentloaded 的区别</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>前端常见性能优化方案</li>
<li>手写节流和防抖（体验优化）</li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul>
<li>Web 前端常见的安全攻击方式及预防</li>
</ul>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li>http 常见的状态码有哪些</li>
<li>http 常见的 header 有哪些</li>
<li>什么是 Restful api</li>
<li>描述一下 http 的缓存机制（重要）</li>
</ul>
<h1 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h1><ul>
<li><p>关于简历</p>
<p>1.简洁明了，突出个人技能和项目经验</p>
<p>2.可以把个人博客、开源作品放在简历中（但博客要有内容）</p>
<p>3.不要造假，保证能力上的真实性（斟酌用词，如精通xxx，写了解，最多写个熟练）</p>
</li>
<li><p>面试过程中注意事项</p>
<p>1.如何看待加班：像借钱，救急不救穷</p>
<p>2.千万不要挑战面试官，反考面试官</p>
<p>3.学会给面试官惊喜，证明你能想到更多，做的更好，但不要太多</p>
<p>4.遇到不会的问题，说出你知道的部分即可，但别岔开话题</p>
<p>5.谈谈你的缺点：说一下你最近在学什么即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
        <tag>小结</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-运行环境</title>
    <url>/2020/12/11/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>会了这些，就可以起飞…</p>
<ul>
<li>运行环境即浏览器（server 端有 nodejs）</li>
<li>下载网页代码，渲染出页面，期间会执行若干 JS</li>
<li>要保证代码在浏览器中：稳定且高效</li>
</ul>
<a id="more"></a>

<p>主要内容：</p>
<ul>
<li>网页加载过程</li>
<li>性能优化</li>
<li>安全</li>
</ul>
<h1 id="网页加载过程"><a href="#网页加载过程" class="headerlink" title="网页加载过程"></a>网页加载过程</h1><p>知识点</p>
<ul>
<li>加载资源的形式</li>
<li>加载资源的过程</li>
<li>渲染页面的过程</li>
</ul>
<h2 id="加载资源的形式"><a href="#加载资源的形式" class="headerlink" title="加载资源的形式"></a>加载资源的形式</h2><ul>
<li>html 代码</li>
<li>媒体文件，如图片、视频等</li>
<li>Javascript css</li>
</ul>
<h2 id="加载资源的过程"><a href="#加载资源的过程" class="headerlink" title="加载资源的过程"></a>加载资源的过程</h2><ul>
<li>DNS（Domain Name Server）解析∶域名 -&gt; IP 地址</li>
<li>浏览器根据 IP 地址向服务器发起 http 请求</li>
<li>服务器处理 http 请求，并返回给浏览器</li>
</ul>
<h2 id="渲染页面的过程-1"><a href="#渲染页面的过程-1" class="headerlink" title="渲染页面的过程-1"></a>渲染页面的过程-1</h2><ul>
<li>根据 HTML 代码生成 DOM Tree</li>
<li>根据 CSS 代码生成 CSSOM（CSS Object Module）</li>
<li>将 DOM Tree 和 CSSOM 整合形成 Render tree</li>
</ul>
<h2 id="渲染页面的过程-2"><a href="#渲染页面的过程-2" class="headerlink" title="渲染页面的过程-2"></a>渲染页面的过程-2</h2><ul>
<li><p>根据 Render tree 渲染页面</p>
</li>
<li><p>遇到 &lt;script&gt; 则暂停渲染，优先加载并执行 JS 代码，完成再继续</p>
<p><em>JS 线程与渲染线程共用一个线程，因为 JS 有可能会改变 DOM 结构，所以遇到 &lt;script&gt; 标签会暂停</em></p>
</li>
<li><p>直至把 Render tree 渲染完成</p>
</li>
</ul>
<p><strong>思考</strong></p>
<ul>
<li><p>为何建议把 css 放在 head 中？</p>
<p>是为了在 DOM tree 生成之前把 CSS 规则加载完，当 DOM tree 生成完之后，直接和所有的 CSS 规则整合生成一个渲染树，然后一步渲染完成，防止重复渲染</p>
</li>
<li><p>为何建议把 JS 放在 body 最后？</p>
<p>防止刚渲染出一部分，然后卡住并停止渲染，加载完 JS 之后又去渲染，会导致页面渲染时间比较长（例如本来期望应该页面的一共渲染时间为 1s，期望在 0.3 秒或者 0.5 秒之内让用户看到页面的所有内容，然后剩下时间再执行 JS 代码，最终把页面渲染完成，而不是直到最后一秒才让用户看到所有内容，所以要把 JS 放到最后）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面的全部资源加载完成才会执行，包括图片、视频等</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM 渲染完成即可执行，此时图片、视频还可能没有加载完</span></span><br><span class="line">    <span class="comment">// 比较靠谱的选择</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><p>从输入 url 到渲染出页面的整个过程</p>
<p>1.下载资源：各个资源类型，下载过程</p>
<p>2.渲染页面：结合 html css javascript 图片等</p>
</li>
<li><p>window.onload 与 DOMContentLoaded 区别</p>
<p>1.window. onload：资源全部加载完才能执行，包括图片</p>
<p>2.DOMContentLoaded：DOM 渲染完成即可，图片可能尚未下载</p>
</li>
</ul>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ul>
<li>是一个综合性问题，没有标准答案，但要求尽量全面</li>
<li>某些细节问题可能会单独提问：手写防抖、节流</li>
<li>只关注核心点，针对面试</li>
</ul>
<h2 id="性能优化原则"><a href="#性能优化原则" class="headerlink" title="性能优化原则"></a>性能优化原则</h2><ul>
<li>多使用内存、缓存或其他方法</li>
<li>减少 CPU 计算量，减少网络加载耗时</li>
<li>（适用于所有编程的性能优化 ：空间换时间）</li>
</ul>
<p><strong>从何入手</strong></p>
<h3 id="让加载更快"><a href="#让加载更快" class="headerlink" title="让加载更快"></a>让加载更快</h3><ul>
<li>减少资源体积：压缩代码</li>
<li>减少访问次数：合并代码、SSR 服务器端渲染、缓存、雪碧图</li>
<li>使用更快的网络：CDN（根据区域做服务器的处理，例如用 CDN 网络从北京访问的 IP 和从上海访问的 IP 是不一样的，根据区域联系运营商的服务器，让下载更快）</li>
</ul>
<h3 id="让渲染更快"><a href="#让渲染更快" class="headerlink" title="让渲染更快"></a>让渲染更快</h3><p><em>代码逻辑更合理，无无用功</em></p>
<p><strong>让渲染更快 1</strong></p>
<ul>
<li>CSS 放在 head，JS 放在 body 最下面</li>
<li>尽早开始执行 JS，用 DOMContentLoaded 触发</li>
<li>懒加载（图片懒加载，上滑加载更多）</li>
</ul>
<p><strong>让渲染更快 2</strong></p>
<ul>
<li>对 DOM 查询进行缓存</li>
<li>频繁 DOM 操作，合并到一起插入 DOM 结构</li>
<li>节流 throttle 防抖 debounce</li>
</ul>
<h2 id="前端性能优化的示例"><a href="#前端性能优化的示例" class="headerlink" title="前端性能优化的示例"></a>前端性能优化的示例</h2><ul>
<li><p>资源合并</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;b.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;c.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这种方式更加合算，因为只有一次网络请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    entry: path.join(__dirname, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;index&quot;</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&quot;bundle.[contenthash].js&quot;</span>, <span class="comment">// 利用哈希对文件名处理</span></span><br><span class="line">        path: path.join(__idrname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态资源加 hash 后缀，根据文件内容计算 hash</span></span><br><span class="line"><span class="comment">// 文件内容不变，则 hash 不变，则 url 不变</span></span><br><span class="line"><span class="comment">// url 和文件不变，则会自动触发 http 缓存机制，返回 304</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CDN</p>
<p>一般静态文件都是用 CDN 来做的，更大程度满足网络的性能</p>
<p><a href="https://www.zhihu.com/question/36514327">CDN是什么？使用CDN有什么优势？</a></p>
</li>
<li><p>SSR</p>
<p>服务器端渲染：将网页和数据一起加载，一起渲染</p>
<p>非 SSR（前后端分离）：先加载网页，再加载数据，再渲染数据</p>
<p>早先的 JSP、ASP、PHP，现在的 Vue、React、SSR、</p>
</li>
<li><p>懒加载</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;preview.png&quot;</span> <span class="attr">data-realsrc</span>=<span class="string">&quot;abc.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当滑动到指定位置</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    img1.src = img1.getAttribute(<span class="string">&#x27;data-realsrc&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存 DOM 查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不缓存 DOM 查询结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>).length; i++) &#123;</span><br><span class="line">    <span class="comment">// 每次循环，都会计算 length，频繁进行 DOM 查询</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存 DOM 查询结果</span></span><br><span class="line"><span class="keyword">const</span> pList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> length = pList.length</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// 缓存 length，只进行一次 DOM 查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多个 DOM 操作一起插入到 DOM 结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listNode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个文档片段，此时还没有插入到 DOM 树中</span></span><br><span class="line"><span class="keyword">const</span> frag = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行插入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">    li.innerHTML = <span class="string">&quot;List item &quot;</span> + x</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先插入文档片段中</span></span><br><span class="line">    frag.appendChild(li)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都完成之后，再统一插入到 DOM 树中</span></span><br><span class="line">listNode.appendChild(frag)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也就是说，先建一个临时区域，把所有的高频操作都在临时区域中去插入</span></span><br><span class="line"><span class="comment">// 插入完成之后，再把临时区域一块放在 DOM 结构中，这样性能就会大大提升</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h1><ul>
<li>监听一个输入框的，文字变化后触发 change 事件</li>
<li>直接用 keyup 事件，则会频发触发 change 事件</li>
<li>防抖：用户输入结束或暂停时，才会触发 change 事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟未做防抖场景</span></span><br><span class="line"><span class="comment">// html 中有一个输入框 &lt;input type=&quot;text&quot; id=&quot;ipt1&quot;&gt;</span></span><br><span class="line"><span class="comment">// js 代码如下</span></span><br><span class="line"><span class="keyword">var</span> ipt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ipt1&quot;</span>)</span><br><span class="line">ipt.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ipt.value) <span class="comment">// 频繁触发请求很糟糕</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 做防抖改造</span></span><br><span class="line"><span class="keyword">var</span> ipt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ipt1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">ipt.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ipt.value) <span class="comment">// 模拟触发 change 事件</span></span><br><span class="line"></span><br><span class="line">        timer = <span class="literal">null</span> <span class="comment">// 清空定时器</span></span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装 debounce 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// timer 是在闭包中的</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 闭包一般是用在函数作为返回值或者函数作为参数传入</span></span><br><span class="line">    <span class="comment">// 因此需要闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn()</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ipt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ipt1&quot;</span>)</span><br><span class="line">ipt.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, debounce(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ipt.value)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h1 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h1><p>频繁操作、频繁输入的时候会保持一个频率连续触发</p>
<ul>
<li>拖拽一个元素时，要随时拿到该元素被拖拽的位置</li>
<li>直接用 drag 事件，则会频发触发，很容易导致卡顿</li>
<li>节流：无论拖拽速度多快，都会每隔 100ms 触发一次</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="comment">// html 片段</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&lt;style&gt;</span></span><br><span class="line"><span class="comment">    #div1 &#123;</span></span><br><span class="line"><span class="comment">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="comment">        width: 200px;</span></span><br><span class="line"><span class="comment">        height: 100px;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt; </span></span><br><span class="line"><span class="comment">&lt;body&gt;</span></span><br><span class="line"><span class="comment">    &lt;div id=&quot;div1&quot; draggable=&quot;true&quot;&gt;可拖拽&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// js code</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">div1.addEventListener(<span class="string">&quot;drag&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="keyword">return</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.offsetX, e.offsetY)</span><br><span class="line"></span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装 throttle 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay = <span class="number">100</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 此处的 apply 方法后面的 arguments 对于 e 有用</span></span><br><span class="line">            fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 或者不用 apply</span></span><br><span class="line">    <span class="comment">// return function (e) &#123;</span></span><br><span class="line">    <span class="comment">//     if (timer) return</span></span><br><span class="line">    <span class="comment">//     timer = setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//         fn(e)</span></span><br><span class="line">    <span class="comment">//         timer = null</span></span><br><span class="line">    <span class="comment">//     &#125;, delay)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line">div1.addEventListener(<span class="string">&quot;drag&quot;</span>, throttle(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    	<span class="comment">// 这里面的 e 不会直接传递给函数里面</span></span><br><span class="line">    	<span class="comment">// 而是先传递到上面返回的函数里面</span></span><br><span class="line">    	<span class="comment">// 因此有必要在上面返回函数中的 fn 加上 apply(this, arguments)</span></span><br><span class="line">    	<span class="comment">// 这样函数里面才能接收到 e</span></span><br><span class="line">        <span class="built_in">console</span>.log(e.offsetX, e.offsetY)</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>问题：</p>
<p>常见的 web 前端攻击方式有哪些？</p>
<h2 id="XSS-跨站请求攻击"><a href="#XSS-跨站请求攻击" class="headerlink" title="XSS 跨站请求攻击"></a>XSS 跨站请求攻击</h2><ul>
<li><p>个博客网站，我发表一篇博客，其中嵌入 &lt;script&gt; 脚本</p>
</li>
<li><p>脚本内容：获取 cookie，发送到我的服务器（服务器配合跨域）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 一段内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;document.cookie&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发布这篇博客，有人查看它，我轻松收割访问者的 cookie</p>
</li>
</ul>
<p><strong>XSS 预防</strong></p>
<ul>
<li><p>替换特殊字符，如 &lt; 变成 &amp;lt； &gt; 变成 &amp;gt;</p>
</li>
<li><p>&lt;script&gt;变成 &amp;lt;script&amp;gt; , 直接显示，而不会作为脚本执行</p>
</li>
<li><p>前端要替换，后端也要替换，都做总不会有错</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html code --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 一段内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(document.cookie);<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.npmjs.com/package/xss">https://www.npmjs.com/package/xss</a></p>
</li>
</ul>
<h2 id="XSRF-跨站请求伪造"><a href="#XSRF-跨站请求伪造" class="headerlink" title="XSRF 跨站请求伪造"></a>XSRF 跨站请求伪造</h2><p>场景</p>
<ul>
<li>你正在购物，看中了某个商品，商品 id 是 100</li>
<li>付费接口是 xxx.com/pay?id=100，但没有任何验证</li>
<li>我是攻击者，我看中了一个商品，id是 200</li>
</ul>
<p>请求伪造</p>
<ul>
<li>我向你发送一封电子邮件，邮件标题很吸引人</li>
<li>但邮件正文隐藏着 &lt;img src=xxx.com/pay?id=200/&gt;</li>
<li>你一查看邮件，就帮我购买了 id 是 200 的商品</li>
</ul>
<p>XSRF 预防</p>
<ul>
<li>使用 post 接口（用这种方法，再用 img 或其他就无法攻击，post 接口做跨域很麻烦，需要 server 支持）</li>
<li>增加验证，例如密码、短信验证码、指纹等</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
        <tag>前端运行环境</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-开发环境</title>
    <url>/2020/12/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>不会这些，你就会被认定是菜鸟小白，没做过项目</p>
<h1 id="关于开发环境"><a href="#关于开发环境" class="headerlink" title="关于开发环境"></a>关于开发环境</h1><ul>
<li>面试官想通过开发环境了解候选人的实际工作情况</li>
<li>开发环境的工具，能体现工作产出的效率</li>
<li>会以聊天形式为主，不会问具体的问题</li>
</ul>
<a id="more"></a>

<p><strong>开发环境</strong></p>
<ul>
<li>git</li>
<li>调试工具</li>
<li>抓包</li>
<li>webpack、babel</li>
<li>linux 常用命令</li>
</ul>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ul>
<li>最常用的代码版本管理工具</li>
<li>大型项目需要多人协作开发，必须熟用 git</li>
<li>如果不知道或者之前不用git，不会通过面试</li>
<li>Mac os 自带 git 命令， windows 可去官网下载安装</li>
<li>git 服务端常见的有 github、coding. net 等</li>
<li>大公司会搭建自己的内网 git 服务</li>
</ul>
<h2 id="常用的-git-命令"><a href="#常用的-git-命令" class="headerlink" title="常用的 git 命令"></a>常用的 git 命令</h2><ul>
<li>git add .</li>
<li>git checkout xxx </li>
<li>git commit -m “xxx” </li>
<li>git push origin master </li>
<li>git pull origin master</li>
<li>git branch</li>
<li>git checkout -b xxx</li>
<li>git merge xxx</li>
<li>git diff</li>
<li>git log</li>
<li>git fetch</li>
<li>git stash</li>
<li>git reset –hard id</li>
<li>git stash</li>
<li>git stash pop</li>
</ul>
<p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单（单击访问）</a></p>
<p><strong>Git 思维导图</strong></p>
<p><img src="https://img-blog.csdn.net/20180808170716549?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTk2NTA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<h2 id="chrome-调试工具"><a href="#chrome-调试工具" class="headerlink" title="chrome 调试工具"></a>chrome 调试工具</h2><ul>
<li>Elements</li>
<li>Console</li>
<li>Network</li>
<li>debugger（需在代码片段中引入该断点命令）</li>
<li>Application</li>
</ul>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ul>
<li>移动端 h5 页，查看网络请求，需要用工具抓包</li>
<li>windows 一般用 fiddler </li>
<li>Mac os 一般用 charles</li>
</ul>
<p><strong>移动端</strong>（<a href="https://www.cnblogs.com/yyhh/p/5140852.html">Fiddler抓包工具总结</a>）</p>
<ul>
<li>手机和电脑连同一个局域网</li>
<li>将手机代理到电脑上</li>
<li>手机浏览网页，即可抓包</li>
</ul>
<h2 id="webpack-和-babel"><a href="#webpack-和-babel" class="headerlink" title="webpack 和 babel"></a>webpack 和 babel</h2><ul>
<li>ES6 模块化，浏览器暂不支持</li>
<li>ES6 语法，浏览器并不完全支持</li>
<li>压缩代码，整合代码，以让网页加载更快</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码演示（需nodejs）</span></span><br><span class="line"><span class="comment">// 根目录 npm init -y</span></span><br><span class="line"><span class="comment">// 接着命令行安装（此处借助淘宝代理） cnpm install webpack webpack-cli -D</span></span><br><span class="line"><span class="comment">// 根目录新建 src 文件夹及子文件 index.js（里面内容随便打印个就可）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根目录新建文件 webpack.config.js ， 内容如下</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&quot;development&quot;</span>, <span class="comment">// production</span></span><br><span class="line">    entry: path.join(__dirname, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;index.js&quot;</span>), <span class="comment">// 文件入口</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后可尝试运行（可在 package.json 文件中的 script 里面加入 &quot;build&quot;: &quot;webpack&quot; 简化执行操作）</span></span><br><span class="line"><span class="comment">// 根目录命令行 npm run build</span></span><br><span class="line"><span class="comment">// 打包完毕，根目录会生成 dist 文件夹及子文件 bundle.js</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在网页中显示</span></span><br><span class="line"><span class="comment">// src 文件夹下新建 index.html ,随便生成个 html 框架（无需引入 index.js）</span></span><br><span class="line"><span class="comment">// 命令行安装插件（解析 html） cnpm install html-webpack-plugin -D</span></span><br><span class="line"><span class="comment">// 命令行安装插件（启动服务的插件） cnpm install webpack-dev-server -D</span></span><br><span class="line"><span class="comment">// 安装完成后可在 package.json 的 devDependencies 中查看安装信息</span></span><br><span class="line"><span class="comment">// webpack.config.js 代码</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>) <span class="comment">// 引入插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&quot;development&quot;</span>, <span class="comment">// production</span></span><br><span class="line">    entry: path.join(__dirname, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;index.js&quot;</span>), <span class="comment">// 文件入口</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置插件</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.join(__dirname, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;index.html&quot;</span>), <span class="comment">// 找到已有的 index.html</span></span><br><span class="line">            filename: <span class="string">&quot;index.html&quot;</span>, <span class="comment">// 产出文件名</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 启动本地服务</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">3000</span>, <span class="comment">// 端口</span></span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 当前目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终在 package.json 的 scripts 中添加代码： &quot;dev&quot;: &quot;webpack-dev-server&quot;</span></span><br><span class="line"><span class="comment">// 成功之后可在浏览器中访问 http://localhost:3000/index.html 即可</span></span><br><span class="line"><span class="comment">// 能加载出来原因是因为引入了 bundle.js 文件，并且其中包括了 index.js 的代码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关于版本报错问题，可尝试下列版本，nodejs 版本过高也可能导致报错</span></span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^4.5.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.41.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.8.2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ES6</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果在 index.js 中写一个箭头函数，当打包之后，在 bundle.js 中还是一个 ES6 的箭头函数，此时就需要 babel 的编译</span></span><br><span class="line"><span class="comment">// 需要安装 babel ：(@符号为组的意思)</span></span><br><span class="line"><span class="comment">// npm install @babel/core @babel/preset-env babel-loader -D --registry=https://registry.npm.taobao.org    </span></span><br><span class="line"><span class="comment">// 在根目录新建文件 .babelrc 文件，代码如下</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 module.exports 里面加入代码：</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>, <span class="comment">// 只要是 .js 结尾的都走 babel-loader</span></span><br><span class="line">            loader: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">            include: path.join(__dirname, <span class="string">&quot;src&quot;</span>), <span class="comment">// 包含哪些目录需要走这个 loader</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// npm run dev 之后在 bundle.js 里面的箭头函数就会被转译为 ES5 语法</span></span><br></pre></td></tr></table></figure>



<h2 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刚才在上个文件的 src 目录下新建 a.js ,代码如下：</span></span><br><span class="line"><span class="comment">// 单个导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一块导出简写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;fn&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span> &#123;</span><br><span class="line">    fn, <span class="comment">// ES5 中需写成 fn: fn ,ES6 中 key 与 value 值一样则可省略 value</span></span><br><span class="line">    name,</span><br><span class="line">    obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后在 index.js 文件下的头部引入并输出）</span></span><br><span class="line"><span class="keyword">import</span> &#123; fn, name, obj &#125; <span class="keyword">from</span> <span class="string">&quot;./a&quot;</span>  <span class="comment">// 解构赋值</span></span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者，但是这种方法没办法用解构赋值，只能挨个导入</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    obj,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="如何配置-webpack-生产环境"><a href="#如何配置-webpack-生产环境" class="headerlink" title="如何配置 webpack 生产环境"></a>如何配置 webpack 生产环境</h2><p>根目录下新建 webpack.prod.js （一共两个配置文件，一个开发环境下的，一个生产环境下的）</p>
<p><strong>1</strong>.可先复制一份 webpack.config.js 然后将里面的 mode 修改 production</p>
<p><strong>2</strong>.将 devServer 配置项全部删掉</p>
<p><strong>3</strong>.将 output 中的 filename 改为 “bundle.[contenthash].js”</p>
<p>  - 根据代码内容算出哈希的值，如果内容变了，这个哈希值也会跟着变，内容不变则不会变</p>
<p><strong>4</strong>.改 package.json 里面的 build ，之前默认的是启动服务，但此时不需要所以改变为 </p>
<p> - “build”: “webpack –config webpack.prod.js”</p>
<p>此时再次 npm run build</p>
<p>dist 文件夹下的 bundle.js 文件名称跟着长串字符（配置的 [contenthash] ），这个长串字符就是内容变则变，内容不变则不变</p>
<p>目地是最大程度命中 http 的缓存，让页面加载的更快</p>
<p>内容也是经过压缩，体积小、执行快、下载快</p>
<h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><ul>
<li>公司的线上机器一般都是 linux （参考阿里云）</li>
<li>测试机也要保持一致，用 linux</li>
<li>测试机或者线上机出了问题，本地有不能复现，需要去排查（非常常见）</li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux 命令大全</a></p>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
        <tag>前端开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>将hexo博客部署到github或gitee</title>
    <url>/2020/11/18/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E6%88%96gitee/</url>
    <content><![CDATA[<p>使用github/gitee pages服务搭建博客的好处有： </p>
<ul>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以绑定自己的域名；</li>
<li>数据安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>= =</li>
</ul>
<a id="more"></a>

<h1 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h1><h2 id="github部署的方式"><a href="#github部署的方式" class="headerlink" title="github部署的方式"></a>github部署的方式</h2><ul>
<li>优点：部署比较简单，且不用频繁的更新部署</li>
<li>缺点：访问速度相对于gitee较慢，每次hexo d比较慢。</li>
</ul>
<p>登录github后，点击右上角的＋，然后点击new repository</p>
<p><img src="newrepository.jpg"></p>
<p>说明：下面这张图片中出现红色是因为我之前已经用这个地址申请过一个仓库，波浪线处尽量与前面的名字一样，后面的.github.io固定。然后拉到底部点击create repository</p>
<p><img src="newsave.jpg"></p>
<p><img src="%E9%83%A8%E7%BD%B211.jpg"></p>
<p>复制仓库地址后后打开站点配置文件，找到deploy字段，按下图操作。</p>
<p><img src="%E9%83%A8%E7%BD%B2222.jpg"></p>
<p>此时我们需要在博客根目录下打开命令行，装一个部署git的插件(已经切换到淘宝镜像源的可用cnpm命令)</p>
<p>npm install –save hexo-deployer-git</p>
<p>插件安装完成后，可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p> 就可以部署到github，此时打开仓库就会有内容了。</p>
<p>直接把你的网址中下面图片中蓝色部分拿出来，输入到浏览器中即可访问你的静态博客页面。</p>
<p><img src="%E8%AE%BF%E9%97%AE11.jpg"></p>
<p>注：1. 刷新不出博客页面稍等两分钟即可   2.每次部署可以：hexo d -m “提交的说明”</p>
<h2 id="gitee（码云）部署到远端"><a href="#gitee（码云）部署到远端" class="headerlink" title="gitee（码云）部署到远端"></a>gitee（码云）部署到远端</h2><ul>
<li>优点：访问速度快，中文页面友好</li>
<li>缺点：每次部署后都需要服务中点击更新部署</li>
</ul>
<p>与github部署方式大同小异，登录gitee后点击右上角的加号，新建仓库</p>
<p><img src="gitee%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA.jpg"></p>
<p>仓库建好后，复制仓库地址到站点配置文件_config.yml中</p>
<p><img src="gitee%E9%83%A8%E7%BD%B2%E5%90%8E%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.jpg"></p>
<p>此时我们需要在博客根目录下打开命令行，装一个部署git的插件(已经切换到淘宝镜像源的可用cnpm命令)</p>
<p>npm install –save hexo-deployer-git</p>
<p>插件安装完成后，可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>命令执行完毕后，刷新仓库页面，此时仓库就会有内容，点击仓库的服务</p>
<p><img src="gitee%E6%9C%8D%E5%8A%A1.jpg"></p>
<p><img src="gitee%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.jpg"></p>
<p><img src="gitee%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90.jpg"></p>
<p>这个地址就是你的个人静态博客地址，也可以打开博客部署到的仓库查看地址，点击可直接访问。</p>
<p><img src="MyblogAdress.jpg"></p>
<p>注意：每次执行完命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d -m &quot;提交说明&quot; </span><br></pre></td></tr></table></figure>

<p>需要到仓库服务中点开Gitee Pages，然后点击更新等一两分钟才能更新静态博客。</p>
<p> 如果有什么问题或者技术交流，欢迎在下方发布渠道二维码联系我或者文章底部留言。 </p>
]]></content>
      <categories>
        <category>从0搭建博客及美化</category>
      </categories>
      <tags>
        <tag>部署博客到远端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 3.x 基础语法</title>
    <url>/2020/12/19/Vue-3-x-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Vue-3-x"><a href="#Vue-3-x" class="headerlink" title="Vue 3.x"></a>Vue 3.x</h1><p><strong>基本语法</strong></p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// createApp 表示创建一个 Vue 应用, 存储到 app 变量中</span></span><br><span class="line"><span class="comment">// 传入的参数表示，这个应用最外层的组件，应该如何展示</span></span><br><span class="line"><span class="comment">// MVVM 设计模式，M -&gt; Model 数据， V -&gt; View 视图， VM -&gt; ViewModel 视图数据连接层(vue 组件做的)</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="comment">// M 层（数据）</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// V 层（视图）</span></span><br><span class="line">  template: <span class="string">&quot;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// vm （视图数据连接层）代表的就是 Vue 应用的根组件</span></span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Vue-3-x-生命周期函数"><a href="#Vue-3-x-生命周期函数" class="headerlink" title="Vue 3.x 生命周期函数"></a>Vue 3.x 生命周期函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 生命周期函数：在某一时刻会自动执行的函数</span><br><span class="line">const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &#39;hello world&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 在实例生成之前会自动执行的函数</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        console.log(&#39;beforeCreate&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 在实例生成之后会自动执行的函数</span><br><span class="line">    created() &#123;</span><br><span class="line">        console.log(&#39;created&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 在组件内容被渲染到页面之前立即自动执行的函数</span><br><span class="line">    beforeMount() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;beforeMount&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 在组件内容被渲染到页面之后自动执行的函数</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;mounted&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 当数据发生变化时会自动执行的函数</span><br><span class="line">    &#x2F;&#x2F; 可通过 console 中 vm.$data.message &#x3D; &#39;any&#39; 触发该钩子</span><br><span class="line">    beforeUpdate() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;beforeUpdate&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 当数据发生变化，页面重新渲染后，会自动执行的函数</span><br><span class="line">    updated() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;updated&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 当 Vue 应用失效时，自动执行的函数</span><br><span class="line">    beforeUnmount() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;beforeUnmount&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 当 Vue 应用失效时，且 DOM 完全销毁之后，自动执行的函数</span><br><span class="line">    unmounted() &#123;</span><br><span class="line">        console.log(document.getElementById(&#39;root&#39;).innerHTML, &#39;unmounted&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    template: &#39;&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line">const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<img src="lifecycle .png" alt="前端面试课-思维导图-知识体系" style="zoom: 150%;" />

<h2 id="动态绑定属性"><a href="#动态绑定属性" class="headerlink" title="动态绑定属性"></a>动态绑定属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两种在实际开发中应用的不多</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">&#x27;&lt;strong&gt;hello world&lt;/strong&gt;&#x27;</span>,</span><br><span class="line">            titleWord: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">            <span class="comment">// 在这里定义属性名</span></span><br><span class="line">            name: <span class="string">&#x27;title&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这里绑定属性名更加灵活（动态属性）</span></span><br><span class="line">    template: <span class="string">&#x27;&lt;div :[name]=&quot;titleWord&quot; v-html=&quot;message&quot;&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">&#x27;&lt;strong&gt;hello world&lt;/strong&gt;&#x27;</span>,</span><br><span class="line">            titleWord: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">            <span class="comment">// 定义绑定的事件类型如 click</span></span><br><span class="line">            event: <span class="string">&#x27;mouseenter&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">handleCick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;mouseenter&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 动态绑定属性</span></span><br><span class="line">    template: <span class="string">&#x27;&lt;div @[event]=&quot;handleCick&quot; v-html=&quot;message&quot;&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止默认行为</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">&#x27;&lt;strong&gt;hello world&lt;/strong&gt;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">handleCick</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// @click.prevent=&quot;...&quot; (这种语法叫做修饰符，可简化操作)</span></span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;https://www.baidu.com&quot; @click.prevent=&quot;handleCick&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><p>在 vue 里面的方法统一的 this 指向为 vue 组件的实例</p>
<h2 id="computed-与-methods-区别"><a href="#computed-与-methods-区别" class="headerlink" title="computed 与 methods 区别"></a>computed 与 methods 区别</h2><ul>
<li>computed：当计算属性依赖的内容发生变更时，才会重新执行计算</li>
<li>methods：只要页面重新渲染，就会重新计算</li>
</ul>
<h2 id="watch-监听器"><a href="#watch-监听器" class="headerlink" title="watch 监听器"></a>watch 监听器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">            count: <span class="number">2</span>,</span><br><span class="line">            price: <span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="comment">// 监听 count 变化</span></span><br><span class="line">        <span class="function"><span class="title">count</span>(<span class="params">newval, oldval</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newval, oldval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;&#123;&#123; count * price &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="class-定义样式"><a href="#class-定义样式" class="headerlink" title="class 定义样式"></a>class 定义样式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .red &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .green &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                &#x2F;&#x2F; class 定义样式，分为三类，字符串、对象、数组</span><br><span class="line">                classString: &#39;red&#39;,</span><br><span class="line">                classObject: &#123; red: false, green: true &#125;,</span><br><span class="line">                classArray: [&#39;red&#39;, &#39;green&#39;, &#123; brown: true &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;&lt;div :class&#x3D;&quot;classArray&quot;&gt;hello world&lt;&#x2F;div&gt;&#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="子组件与父组件区分"><a href="#子组件与父组件区分" class="headerlink" title="子组件与父组件区分"></a>子组件与父组件区分</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        &#x2F;&#x2F; 主动调用的一方叫做父组件</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            hello world</span><br><span class="line">            &lt;demo class&#x3D;&quot;green&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; demo 是被调用的，被调用的一方叫做子组件</span><br><span class="line">    app.component(&#39;demo&#39;, &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果子组件最外层只有一个标签</span><br><span class="line">        &#x2F;&#x2F; 除了可以把 class 写在 div 标签里，也可写在父组件调用的 demo 里，如上</span><br><span class="line">        &#x2F;&#x2F; 注意，如果最外层不是只有一个标签，则不能在父组件中写 class ，会无效</span><br><span class="line">        template: &#96;&lt;div&gt;single&lt;&#x2F;div&gt;&#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        &#x2F;&#x2F; 行内可直接写</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div style&#x3D;&quot;color: yellow;&quot;&gt;</span><br><span class="line">            hello world</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                &#x2F;&#x2F; 字符串方式</span><br><span class="line">                styleString: &#39;color: yellow;&#39;,</span><br><span class="line">                &#x2F;&#x2F; 对象方式</span><br><span class="line">                styleObject: &#123;</span><br><span class="line">                    color: &#39;orange&#39;,</span><br><span class="line">                    background: &#39;yellow&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div :style&#x3D;&quot;styleObject&quot;&gt;</span><br><span class="line">            hello world</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-if-与-v-show"><a href="#v-if-与-v-show" class="headerlink" title="v-if 与 v-show"></a>v-if 与 v-show</h2><p>如果要频繁的改变 DOM 元素展示与否，则用 v-show 会好一些，因为它不会销毁 DOM ，性能会相对好一些。</p>
<p>但是如果不涉及频繁的销毁或者创建 DOM ，这个时候 v-if 和 v-show 都差不多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; v-if、v-else-if、v-else</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                flag1: false,</span><br><span class="line">                flag2: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div v-if&#x3D;&quot;flag1&quot;&gt; if &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div v-else-if&#x3D;&quot;flag2&quot;&gt; elseif &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div v-else&gt; else &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                listArray: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;],</span><br><span class="line">                listObject: &#123;</span><br><span class="line">                    name: &#39;zs&#39;,</span><br><span class="line">                    age: 18,</span><br><span class="line">                    gender: &#39;male&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for&#x3D;&quot;(val, key, index) in listObject&quot;&gt;</span><br><span class="line">                &#123;&#123;key&#125;&#125; -- &#123;&#123;val&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在-v-for-中加入-key-的作用"><a href="#在-v-for-中加入-key-的作用" class="headerlink" title="在 v-for 中加入 :key 的作用"></a>在 v-for 中加入 :key 的作用</h2><p>如下代码，每点击一次会新增一个 hello 的 item，此时的改变 listArray 的数据就会让页面重新渲染，但是如果把以前的 a、b、c 全部重新渲染是比较损耗性能，我们的想法是增加一个内容，上面的内容保留就行，只渲染下面的就可以。</p>
<p>Vue 的底层为了优化性能会尽量的发现我们以前的 DOM 元素如果可以复用的话，就尽量的去复用，但是有的情况下 vue 不知道一些东西是不是应该复用，这个时候为了更好的辅助 vue 或者说让 vue 的效率更高、性能更高，一般建议在做 v-for 的指令时，给循环的每一项增加一个 key 值，一般不建议用 index 作为 key 值，用 item 作为 key 值会更好一些，做到 key 值尽量唯一，只有唯一才能对每个渲染的 DOM 元素作区分，让 vue 知道对应 DOM 元素该不该复用，能不能复用。</p>
<p>在第二次渲染的时候，a 的 key 值还是 0，如果这个元素两次的 key 值基本上是一样的，就会看一下之前 key 值对应的 DOM 元素能不能在这次渲染的时候被复用，如果能复用就不用创建 DOM 元素，在底层能够提升一些性能（偏于 vue 底层原理）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                listArray: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                &#x2F;&#x2F; 使用数组的变更函数</span><br><span class="line">                this.listArray.push(&#39;hello&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div :key&#x3D;&quot;index&quot; v-for&#x3D;&quot;(item, index) in listArray&quot;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleAdd&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="变更数组的三种方式"><a href="#变更数组的三种方式" class="headerlink" title="变更数组的三种方式"></a>变更数组的三种方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                listArray: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                &#x2F;&#x2F; 1.使用数组的变更函数 push、pop、shift、unshift、splice、sort、reverse</span><br><span class="line">                &#x2F;&#x2F; this.listArray.push(&#39;hello&#39;)</span><br><span class="line">                &#x2F;&#x2F; this.listArray.pop()</span><br><span class="line">                &#x2F;&#x2F; this.listArray.shift()</span><br><span class="line">                &#x2F;&#x2F; this.listArray.unshift(&#39;hello&#39;)</span><br><span class="line">                &#x2F;&#x2F; this.listArray.reverse()</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 2.直接替换数组</span><br><span class="line">                &#x2F;&#x2F; this.listArray &#x3D; [&#39;bye&#39;, &#39;world&#39;]</span><br><span class="line">                &#x2F;&#x2F; this.listArray &#x3D; [&#39;bye&#39;, &#39;world&#39;].filter(item &#x3D;&gt; item &#x3D;&#x3D;&#x3D; &#39;bye&#39;)</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 3.直接更新数组的内容</span><br><span class="line">                &#x2F;&#x2F; this.listArray[1] &#x3D; &#39;hello&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for&#x3D;&quot;(item, index) in listArray&quot;&gt;</span><br><span class="line">                &#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleAdd&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="为对象添加内容"><a href="#为对象添加内容" class="headerlink" title="为对象添加内容"></a>为对象添加内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                listObject: &#123;</span><br><span class="line">                    name: &#39;zs&#39;,</span><br><span class="line">                    age: 18,</span><br><span class="line">                    gender: &#39;male&#39;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                &#x2F;&#x2F; 直接添加对象的内容，也可以直接自动的展示出来</span><br><span class="line">                &#x2F;&#x2F; vue 新版本的特性，以前是不能这样写的</span><br><span class="line">                this.listObject.color &#x3D; &#39;red&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; v-for 也可以直接循环数字</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div :key&#x3D;&quot;index&quot; v-for&#x3D;&quot;(val, key, index) in listObject&quot;&gt;</span><br><span class="line">                &#123;&#123;key&#125;&#125; -- &#123;&#123;val&#125;&#125;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div v-for&#x3D;&quot;item in 10&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="想要不展示某个对象的属性"><a href="#想要不展示某个对象的属性" class="headerlink" title="想要不展示某个对象的属性"></a>想要不展示某个对象的属性</h2><p><strong>错误示例</strong></p>
<p>当做 for 循环 同时又做 if 判断，循环的优先级高于判断，因此判断不生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">    :key&#x3D;&quot;index&quot; </span><br><span class="line">    v-for&#x3D;&quot;(val, key, index) in listObject&quot;</span><br><span class="line">    v-if&#x3D;&quot;key !&#x3D;&#x3D; &#39;age&#39;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &#123;&#123;key&#125;&#125; -- &#123;&#123;val&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>

<p><strong>正确方式</strong></p>
<p>但是这种方式还会有小问题，我们渲染的是对象里面的内容，但是 if 写在里面，多加了一层，就相当于外部多出了一个 div 标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">    :key&#x3D;&quot;index&quot; </span><br><span class="line">    v-for&#x3D;&quot;(val, key, index) in listObject&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;key !&#x3D;&#x3D; &#39;age&#39;&quot;&gt;</span><br><span class="line">        &#123;&#123;key&#125;&#125; -- &#123;&#123;val&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>

<p><strong>改进后</strong></p>
<p>占位符 template 写法，template 类似于 div 这样的一个 DOM 元素，但实际上是一个占位符，并不会做渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;template </span><br><span class="line">    :key&#x3D;&quot;index&quot; </span><br><span class="line">    v-for&#x3D;&quot;(val, key, index) in listObject&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;key !&#x3D;&#x3D; &#39;age&#39;&quot;&gt;</span><br><span class="line">        &#123;&#123;key&#125;&#125; -- &#123;&#123;val&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>

<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p><strong>传递参数并且获取到原生的事件对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd(num, event) &#123;</span><br><span class="line">                this.counter +&#x3D; num</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 直接在绑定的事件里面传参</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;counter&#125;&#125;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleAdd(2, $event)&quot;&gt;button&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>同时触发两个事件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd1() &#123;</span><br><span class="line">                alert(1)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleAdd2() &#123;</span><br><span class="line">                alert(2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 以函数加括号执行的方式，并且多个事件之间逗号相隔</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleAdd1(), handleAdd2()&quot;&gt;button&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>停止事件冒泡修饰符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                this.counter +&#x3D; 1</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDivClick() &#123;</span><br><span class="line">                alert(&#39;div clicked&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 直接在 @click 后面加 .stop 即可停止冒泡</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;counter&#125;&#125;</span><br><span class="line">            &lt;div @click&#x3D;&quot;handleDivClick&quot;&gt;</span><br><span class="line">                &lt;button @click.stop&#x3D;&quot;handleAdd&quot;&gt;button&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>只有点击自身才执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                this.counter +&#x3D; 1</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDivClick() &#123;</span><br><span class="line">                alert(&#39;div clicked&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 在父元素的绑定的事件类型上加 .self 即可</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div @click.self&#x3D;&quot;handleDivClick&quot;&gt;</span><br><span class="line">                &#123;&#123;counter&#125;&#125;</span><br><span class="line">                &lt;button @click&#x3D;&quot;handleAdd&quot;&gt;button&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>绑定事件只执行一次</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                counter: 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleAdd() &#123;</span><br><span class="line">                this.counter +&#x3D; 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 加上 .once 即可</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;counter&#125;&#125;</span><br><span class="line">            &lt;button @click.once&#x3D;&quot;handleAdd&quot;&gt;button&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>stop、prevent、capture、self、once、passive</p>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>enter、delete、tab、esc、up、down、left、right</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleKeyDown(e) &#123;</span><br><span class="line">                console.log(e.keyCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 直接绑定的 click 后面加入 .enter 即可，不必 event.keyCode &#x3D;&#x3D;&#x3D; 13</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input @keydown.enter&#x3D;&quot;handleKeyDown&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h2><p>left、right、middle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(&#39;click&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 绑定的 click 后面加入 .left || .right || middle</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div @click.right&#x3D;&quot;handleClick&quot;&gt;123&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="精确修饰符"><a href="#精确修饰符" class="headerlink" title="精确修饰符"></a>精确修饰符</h2><p>exact （只有精确的点击了前面绑定的按键才能触发）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(&#39;click&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 不加 exact 后果是，按住 ctrl + 任意键，点击都会有效果</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div @click.ctrl.exact&#x3D;&quot;handleClick&quot;&gt;123&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表单中双向绑定指令的应用"><a href="#表单中双向绑定指令的应用" class="headerlink" title="表单中双向绑定指令的应用"></a>表单中双向绑定指令的应用</h2><p>input、textarea、checkbox、radio、select（加入 multiple 并且将绑定值改为数组即可实现多选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                &#x2F;&#x2F; checkbox 需要数组存放</span><br><span class="line">                message: [],</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            a&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;a&quot;&gt;</span><br><span class="line">            b&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;b&quot;&gt;</span><br><span class="line">            c&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;c&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                &#x2F;&#x2F; radio 单选需要字符串存放</span><br><span class="line">                message: &#39;&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            a&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;a&quot;&gt;</span><br><span class="line">            b&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;b&quot;&gt;</span><br><span class="line">            c&lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;message&quot; value&#x3D;&quot;c&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &#39;a&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 直接双向绑定到 select 身上</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            &lt;select v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">                &lt;option&gt;a&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option&gt;b&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option&gt;c&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; select 改进版</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &#39;&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 直接双向绑定到 select 身上</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            &lt;select v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">                &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择内容&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option value&#x3D;&quot;a&quot;&gt;a&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option value&#x3D;&quot;b&quot;&gt;b&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option value&#x3D;&quot;c&quot;&gt;c&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: [],</span><br><span class="line">                options: [&#123;</span><br><span class="line">                    text: &#39;a&#39;, value: &#39;a&#39;,</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    text: &#39;b&#39;, value: &#39;b&#39;,</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    text: &#39;c&#39;, value: &#39;c&#39;,</span><br><span class="line">                &#125;,]</span><br><span class="line">                &#x2F;&#x2F; 巧妙的存值方式，可以直接存对象</span><br><span class="line">                &#x2F;&#x2F; options: [&#123;</span><br><span class="line">                &#x2F;&#x2F;     text: &#39;a&#39;, value: &#123; value: &#39;a&#39; &#125;,</span><br><span class="line">                &#x2F;&#x2F; &#125;, &#123;</span><br><span class="line">                &#x2F;&#x2F;     text: &#39;b&#39;, value: &#123; value: &#39;b&#39; &#125;,</span><br><span class="line">                &#x2F;&#x2F; &#125;, &#123;</span><br><span class="line">                &#x2F;&#x2F;     text: &#39;c&#39;, value: &#123; value: &#39;c&#39; &#125;,</span><br><span class="line">                &#x2F;&#x2F; &#125;,]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            &lt;select v-model&#x3D;&quot;message&quot; multiple&gt;</span><br><span class="line">                &lt;option </span><br><span class="line">                :value&#x3D;&quot;item.value&quot; </span><br><span class="line">                :key&#x3D;&quot;index&quot; </span><br><span class="line">                v-for&#x3D;&quot;(item, index) in options&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                    &#123;&#123;item.text&#125;&#125;</span><br><span class="line">                &lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                message: &#39;hello&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; true、false 值的改变</span><br><span class="line">        template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123;message&#125;&#125;</span><br><span class="line">            &lt;input </span><br><span class="line">            type&#x3D;&quot;checkbox&quot; </span><br><span class="line">            v-model&#x3D;&quot;message&quot; </span><br><span class="line">            true-value&#x3D;&quot;hello&quot;</span><br><span class="line">            false-value&#x3D;&quot;world&quot; </span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>lazy（触发 blur 事件才会改变值）、number、trim</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;input v-model.lazy&#x3D;&quot;message&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123;typeof message&#125;&#125;</span><br><span class="line">    &lt;input v-model.number&#x3D;&quot;message&quot; type&#x3D;&quot;number&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    &lt;input v-model.trim&#x3D;&quot;message&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3.x语法篇</category>
      </categories>
      <tags>
        <tag>vue3.x</tag>
        <tag>基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的Composition API</title>
    <url>/2020/12/24/Vue%E4%B8%AD%E7%9A%84Composition-API/</url>
    <content><![CDATA[<p><strong>Composition API</strong></p>
<p>当一个组件越来越复杂的时候，组件内部的数据和方法会越来越多，此时看组件的模版想找到 name 相关的时候，需要不断的向上查找逻辑，这样的找逻辑会变得比较困难，维护性较差，在 Vue3 引入了 composition API 之后这种问题就会有效的被解决，时代吗更加容易聚合到一起，更好的维护性</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">setName</span>(<span class="params"></span>)</span> &#123; &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">setAge</span>(<span class="params"></span>)</span> &#123; &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">a</span>(<span class="params"></span>)</span> &#123; &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">b</span>(<span class="params"></span>)</span> &#123; &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;&#125;,</span><br><span class="line">        directives: &#123;&#125;,</span><br><span class="line">        mixins: [],</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>name:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">, age:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a>setup 函数</h1><p>此函数在 created 实例完全被初始化时执行，因此该函数也不能使用 this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// created 实例完全被初始化时执行</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setup 最基本的语法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 一定最后要有一个 return 的值, 将里面的内容暴露到外部</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义完模版可以直接使用</span></span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;zs&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                handleClick: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;clicked&#x27;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="ref、reactive-响应式引用的用法和原理"><a href="#ref、reactive-响应式引用的用法和原理" class="headerlink" title="ref、reactive 响应式引用的用法和原理"></a>ref、reactive 响应式引用的用法和原理</h1><h2 id="非响应式变量"><a href="#非响应式变量" class="headerlink" title="非响应式变量"></a>非响应式变量</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> name = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 非响应式变量</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                name = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line">            &#125;, 2000)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="响应式的引用"><a href="#响应式的引用" class="headerlink" title="响应式的引用"></a>响应式的引用</h2><p>原理：通过 proxy 对数据进行封装，当数据变化时，触发模版等内容的更新</p>
<h3 id="ref-处理基础类型的数据"><a href="#ref-处理基础类型的数据" class="headerlink" title="ref 处理基础类型的数据"></a>ref 处理基础类型的数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 从 vue 里面引入 ref</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; ref &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="comment">// ref 处理基础类型的数据，底层对括号里面的内容作了一个封装</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 变成 proxy(&#123; value: &#x27;zs&#x27; &#125;) 这样的一个响应式引用</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> name = ref(<span class="string">&#x27;zs&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                name.value = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line">            &#125;, 2000)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="reactive-处理非基础类型数据"><a href="#reactive-处理非基础类型数据" class="headerlink" title="reactive 处理非基础类型数据"></a>reactive 处理非基础类型数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">nameObj.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                nameObj.name = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line">            &#125;, 2000)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; nameObj &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种 compositon API 的写法可以替代掉老的 data return 的写法</p>
<h3 id="readyonly-API"><a href="#readyonly-API" class="headerlink" title="readyonly API"></a>readyonly API</h3><p>这种新的语法能够对响应式的引用做一个限制，通过 readonly 做处理返回的对象是不可以被响应式修改的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">nameObj.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, readonly &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> copyNameObj = readonly(nameObj)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                nameObj.name = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line"><span class="javascript">                copyNameObj.name = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line">            &#125;, 2000)</span><br><span class="line"><span class="javascript">            <span class="comment">// 不能解构返回 name，因为对象是响应式的，对象里面的具体值不是响应式的</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; nameObj &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解构的响应式数据"><a href="#解构的响应式数据" class="headerlink" title="解构的响应式数据"></a>解构的响应式数据</h3><p>利用 toRefs，原理是将 proxy({ name: “zs” }) 转变成 { name: proxy({ value: “zs” }) }</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, toRefs &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                nameObj.name = <span class="string">&quot;ls&quot;</span></span></span><br><span class="line">            &#125;, 2000)</span><br><span class="line"><span class="javascript">            <span class="comment">// 这种 toRefs 包装后就变成响应式值</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 原理是将 proxy(&#123; name: &quot;zs&quot; &#125;) 转变成 &#123; name: proxy(&#123; value: &quot;zs&quot; &#125;) &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; name &#125; = toRefs(nameObj)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="toRef-及-setup-第二个参数-context"><a href="#toRef-及-setup-第二个参数-context" class="headerlink" title="toRef 及 setup 第二个参数 context"></a>toRef 及 setup 第二个参数 context</h3><p>toRefs 如果一开始对象里面并没有要修改的值，并且修改后 setup 还将其返回，那么就会是 undefined，并且报错</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, toRefs &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; age &#125; = toRefs(data)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                age.value = <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line">            &#125;, 2000);</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; age &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>toRef</strong> （不推荐使用，不如直接在数据里面写一个空属性值）</p>
<p>如果想可能对象里面没有对应属性值，又想让这个属性值具备响应式特性的时候，既可以使用 toRef 语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, toRef &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> data = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 从 data 响应式数据里面尝试取 age</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果没取到就给 age 默认空的响应式数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> age = toRef(data, <span class="string">&#x27;age&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                age.value = <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line">            &#125;, 2000);</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; age &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>context</strong></p>
<p>attrs、slots、emit</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleChange</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;changed&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">child</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">child</span>&gt;</span>`,</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>1231311<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 没有 composition API 之前，向外触发事件</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mounted() &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     this.$emit(&#x27;change&#x27;)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; h &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; attrs, slots, emit &#125; = context</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 父组件传递过来的 None-Porps 属性(没有在组件中接收就变成 None-Porps 属性)</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(attrs)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 父组件传递过来的插槽,执行 slots.default() 后返回一个 Virtual DOM</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可利用 render function 生成 template (需提前注释掉组件的 template)</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(slots.default())</span></span><br><span class="line"><span class="javascript">            <span class="comment">// return () =&gt; h(&quot;div&quot;, &#123;&#125;, slots.default())</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 向外触发事件</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(emit)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// function handleClick() &#123; emit(&#x27;change&#x27;) &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return &#123; handleClick &#125;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用-Composition-API-开发-TodoList"><a href="#使用-Composition-API-开发-TodoList" class="headerlink" title="使用 Composition API 开发 TodoList"></a>使用 Composition API 开发 TodoList</h1><p>优雅的 code</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 关于 list 操作的内容进行了封装</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> listRelativeEffect = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> &#123; reactive &#125; = Vue</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> list = reactive([])</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> addItemToList = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line">            list.push(item)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; list, addItemToList &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 关于 iptVal 操作的内容进行了封装</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> inputRelativeEffect = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> &#123; ref &#125; = Vue</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> iptVal = ref(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> handleInputValueChange = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(e.target.value)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// ref, so need iptVal.value</span></span></span><br><span class="line">            iptVal.value = e.target.value</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123; iptVal, handleInputValueChange &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 流程调度中转</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; list, addItemToList &#125; = listRelativeEffect()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; iptVal, handleInputValueChange &#125; = inputRelativeEffect()</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                list, addItemToList,</span><br><span class="line">                iptVal, handleInputValueChange</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;iptVal&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;handleInputValueChange&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;() =&gt; addItemToList(iptVal)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>后续，如何实现提交后清空输入框（利用 context 参数的 emit 向外触发事件）</strong></p>
<h1 id="setup-的-computed-计算属性"><a href="#setup-的-computed-计算属性" class="headerlink" title="setup 的 computed 计算属性"></a>setup 的 computed 计算属性</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 解构出 computed</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; ref, computed &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">                count.value += 1</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">// 使用 computed</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> countAddFive = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> count.value + <span class="number">5</span></span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; count, handleClick, countAddFive &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> --- </span><span class="template-variable">&#123;&#123;<span class="name">countAddFive</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; ref, computed &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">                count.value += 1</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> countAddFive = computed(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当获取该属性时走的函数</span></span></span><br><span class="line"><span class="javascript">                get: <span class="function">() =&gt;</span> &#123; <span class="keyword">return</span> count.value + <span class="number">5</span> &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当修改该属性时走的函数</span></span></span><br><span class="line"><span class="javascript">                set: <span class="function">(<span class="params">param</span>) =&gt;</span> &#123; count.value = param - <span class="number">5</span> &#125;</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 因为 countAddFive 返回的也是被 ref 包裹的对象</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 所以也需要用 .value</span></span></span><br><span class="line">                countAddFive.value = 100</span><br><span class="line">            &#125;, 2000);</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; count, handleClick, countAddFive &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> --- </span><span class="template-variable">&#123;&#123;<span class="name">countAddFive</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="watch-和-watchEffect-的使用和差异"><a href="#watch-和-watchEffect-的使用和差异" class="headerlink" title="watch 和 watchEffect 的使用和差异"></a>watch 和 watchEffect 的使用和差异</h1><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>具有 lazy 特性，可以拿到原始和当前值，一个侦听器可以侦听多个内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// watch 具备一定的惰性（第一次刷新页面不会执行）</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 参数可以拿到原始和当前值</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果侦听的是 reactive 数据，则不能写成 nameObj.name</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 需要写一个箭头函数，返回的内容为需要监听的对象中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, watch, toRefs &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">EnglishName</span>: <span class="string">&#x27;ls&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 侦听 name、EnglishName 则需要侦听一个数组，并且后面参数也是数组</span></span></span><br><span class="line"><span class="javascript">            watch([<span class="function">() =&gt;</span> nameObj.name, <span class="function">() =&gt;</span> nameObj.EnglishName], <span class="function">(<span class="params">[newNam, newEng], [oldNam, oldEng]</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(newNam, oldNam)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(newEng, oldEng)</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; name, EnglishName &#125; = toRefs(nameObj)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, EnglishName &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                name:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                name is </span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                EnglishName:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;EnglishName&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                EnglishName is </span><span class="template-variable">&#123;&#123;<span class="name">EnglishName</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>立即执行，无惰性，偏向于 effect 的侦听器</p>
<p><strong>与 watch 不同点：</strong></p>
<ul>
<li>立即执行，无惰性</li>
<li>不需要传递你要侦听的内容，自动会感知代码依赖，不需要传递很多参数，只要传递一个回调函数</li>
<li>watchEffect 没法获取到之前的数据</li>
</ul>
<p>因此多用于 ajax 请求（不需要之前的数据），结合当前的数据发送一些请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, watch, toRefs, watchEffect &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">EnglishName</span>: <span class="string">&#x27;ls&#x27;</span> &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// watch([() =&gt; nameObj.name, () =&gt; nameObj.EnglishName], ([newNam, newEng], [oldNam, oldEng]) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(&#x27;watch&#x27;, newNam, oldNam, &#x27;----&#x27;, newEng, oldEng)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 只接收一个回调函数,立即执行，无惰性</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 会自动感知内部代码依赖，检测到内部对 nameObj.name 有依赖</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 只要 nameObj.name 发生变化，watchEffect 就会自动执行</span></span></span><br><span class="line"><span class="javascript">            watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 只有数据有依赖才会侦听</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(nameObj.name)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(nameObj.EnglishName)</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; name, EnglishName &#125; = toRefs(nameObj)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, EnglishName &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                name:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                name is </span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                EnglishName:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;EnglishName&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                EnglishName is </span><span class="template-variable">&#123;&#123;<span class="name">EnglishName</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="取消侦听器"><a href="#取消侦听器" class="headerlink" title="取消侦听器"></a>取消侦听器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; reactive, watch, toRefs, watchEffect &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> nameObj = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">EnglishName</span>: <span class="string">&#x27;ls&#x27;</span> &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 实现两秒后取消该侦听器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// const stop1 = watch([() =&gt; nameObj.name, () =&gt; nameObj.EnglishName], ([newNam, newEng], [oldNam, oldEng]) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(&#x27;watch&#x27;, newNam, oldNam, &#x27;----&#x27;, newEng, oldEng)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         stop1()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;, 5000);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 实现两秒后取消该侦听器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 将 watchEffect 返回的内容放入到一个常量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> stop = watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(nameObj.name)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(nameObj.EnglishName)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 定时器里面执行返回的内容</span></span></span><br><span class="line">                    stop()</span><br><span class="line">                &#125;, 5000);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; name, EnglishName &#125; = toRefs(nameObj)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, EnglishName &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                name:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                name is </span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                EnglishName:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;EnglishName&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                EnglishName is </span><span class="template-variable">&#123;&#123;<span class="name">EnglishName</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="将-watch-改为非惰性"><a href="#将-watch-改为非惰性" class="headerlink" title="将 watch 改为非惰性"></a>将 watch 改为非惰性</h2><p>只需要在 watch 最后一个参数对象中写入 immediate: true 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch([<span class="function">() =&gt;</span> nameObj.name, <span class="function">() =&gt;</span> nameObj.EnglishName], <span class="function">(<span class="params">[newNam, newEng], [oldNam, oldEng]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watch&#x27;</span>, newNam, oldNam, <span class="string">&#x27;----&#x27;</span>, newEng, oldEng)</span><br><span class="line">&#125;, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="声明周期函数的新写法"><a href="#声明周期函数的新写法" class="headerlink" title="声明周期函数的新写法"></a>声明周期函数的新写法</h1><p>在 Composition API 里面编写生命周期函数</p>
<p>在 Composition API 里面没有 beforeCreated、created 钩子，这是因为 setup 执行事件点就在于 beforeCreated、created 之间</p>
<p>新增</p>
<ul>
<li>onRenderTracked：每次渲染之后，重新收集响应式依赖自动执行</li>
<li>onRenderTriggered：每次触发页面重新渲染时自动执行 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// beforeMount = onBeforeMount</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mounted = onMounted</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// beforeUpdate = onBeforeUpdate</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// updated = onUpdated</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// beforeUnmount = onBeforeUnmount</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// unMounted = onUnMounted</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123;</span></span><br><span class="line">                ref,</span><br><span class="line">                onBeforeMount,</span><br><span class="line">                onMounted,</span><br><span class="line">                onBeforeUpdate,</span><br><span class="line">                onUpdated,</span><br><span class="line">                onBeforeUnmount,</span><br><span class="line">                onRenderTracked,</span><br><span class="line">                onRenderTriggered</span><br><span class="line">            &#125; = Vue</span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = ref(<span class="string">&#x27;aa&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            onBeforeMount(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onBeforeMount&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onMounted(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onMounted&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onBeforeUpdate(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onBeforeUpdate&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onUpdated(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onUpdated&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onBeforeUnmount(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onBeforeUnmount&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onMounted(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onUnMounted&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onRenderTracked(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onRenderTracked&#x27;</span>) &#125;)</span></span><br><span class="line"><span class="javascript">            onRenderTriggered(<span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;onRenderTriggered&#x27;</span>) &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                name.value = <span class="string">&#x27;bb&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, handleClick &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Provide、Inject-模版及-Ref-的用法"><a href="#Provide、Inject-模版及-Ref-的用法" class="headerlink" title="Provide、Inject 模版及 Ref 的用法"></a>Provide、Inject 模版及 Ref 的用法</h1><p>在 Composition API 里面做 Provide 的数据提供，并且修改数据（要符合单向数据流）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; provide, ref &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = ref(<span class="string">&#x27;zs&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            provide(<span class="string">&#x27;name&#x27;</span>, name)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 3. 在父组件中定义修改方法</span></span></span><br><span class="line"><span class="javascript">            provide(<span class="string">&#x27;changeName&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line">                name.value = value</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">child</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; inject &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 代表如果拿 name 拿不到，则赋予默认值 hello</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = inject(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 4. 接收修改方法</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> changeName = inject(<span class="string">&#x27;changeName&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 1. 父组件的数据在子组件直接修改不符合单项数据流的要求</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 2. 尽量让父组件修改</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// name.value = &#x27;ls&#x27;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 5. 传参修改</span></span></span><br><span class="line"><span class="javascript">                changeName(<span class="string">&#x27;ls&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, handleClick &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码还是可以直接在子组件修改父组件的数据，为此要避免在子组件直接修改，<strong>通过 readonly</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; provide, ref, readonly &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = ref(<span class="string">&#x27;zs&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过 readonly 封装 name 再传给子组件</span></span></span><br><span class="line"><span class="javascript">            provide(<span class="string">&#x27;name&#x27;</span>, readonly(name))</span></span><br><span class="line"><span class="javascript">            provide(<span class="string">&#x27;changeName&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line">                name.value = value</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">child</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; inject &#125; = Vue</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> name = inject(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> changeName = inject(<span class="string">&#x27;changeName&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// changeName(&#x27;ls&#x27;)</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">                <span class="comment">// 此时这种直接在子组件中就修改不了父组件传递过来的数据</span></span></span><br><span class="line"><span class="javascript">                name.value = <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; name, handleClick &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Composition API 的语法下，获取真实的 DOM 元素节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">child</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123; ref, onMounted &#125; = Vue</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 固定写法（创建一个空的 ref 的响应式对象）</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> hello = ref(<span class="literal">null</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 页面加载完毕获取到 div 对应的 DOM 节点</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// ref 的引用，因此需要加 .value</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(hello.value)</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 下面 div 中 ref 的 hello 与导出的 hello 对应的上</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// hello 变量实际上保存的就是 div 元素对应的 DOM 引用</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123; hello &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 获取一个 DOM 节点的 ref</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3.x Composition API</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
        <tag>Composition API</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的动画</title>
    <url>/2020/12/22/Vue%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="使用-Vue-实现基础的-CSS-过渡与动画效果"><a href="#使用-Vue-实现基础的-CSS-过渡与动画效果" class="headerlink" title="使用 Vue 实现基础的 CSS 过渡与动画效果"></a>使用 Vue 实现基础的 CSS 过渡与动画效果</h1><h2 id="通过-class-实现动画"><a href="#通过-class-实现动画" class="headerlink" title="通过 class 实现动画"></a>通过 class 实现动画</h2><a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> leftToRight &#123;</span></span><br><span class="line"><span class="css">        0% &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        50% &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        0% &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>); &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.animation</span> &#123; <span class="attribute">animation</span>: leftToRight <span class="number">3s</span>; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> </span></span><br><span class="line">                &#123; </span><br><span class="line">                    animate: &#123; </span><br><span class="line"><span class="javascript">                        animation: <span class="literal">false</span> </span></span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123; </span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.animate.animation = !<span class="built_in">this</span>.animate.animation </span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;animate&quot;</span>&gt; hello world&lt;/div&gt; </span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过-class-实现过渡效果"><a href="#通过-class-实现过渡效果" class="headerlink" title="通过 class 实现过渡效果"></a>通过 class 实现过渡效果</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.transition</span> &#123;</span></span><br><span class="line">        transition: 3s background-color ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line">        background: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.green</span> &#123;</span></span><br><span class="line">        background: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                animate: &#123;</span><br><span class="line"><span class="javascript">                    transition: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    blue: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    green: <span class="literal">false</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.animate.blue = !<span class="built_in">this</span>.animate.blue</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.animate.green = !<span class="built_in">this</span>.animate.green</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;animate&quot;</span>&gt; hello world&lt;/div&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通过行内的-style-实现过渡效果"><a href="#通过行内的-style-实现过渡效果" class="headerlink" title="通过行内的 style 实现过渡效果"></a>通过行内的 style 实现过渡效果</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.transition</span> &#123;</span></span><br><span class="line">        transition: 3s background-color ease;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                styleObj: &#123;</span><br><span class="line"><span class="javascript">                    background: <span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.styleObj.background === <span class="string">&#x27;blue&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.styleObj.background = <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.styleObj.background = <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;transition&quot;</span> :style=<span class="string">&quot;styleObj&quot;</span>&gt; hello world&lt;/div&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="单元素-单组件的入场出场动画"><a href="#单元素-单组件的入场出场动画" class="headerlink" title="单元素/单组件的入场出场动画"></a>单元素/单组件的入场出场动画</h1><h2 id="利用-transtion-标签配合固定-CSS-样式实现"><a href="#利用-transtion-标签配合固定-CSS-样式实现" class="headerlink" title="利用 transtion 标签配合固定 CSS 样式实现"></a>利用 transtion 标签配合固定 CSS 样式实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 入场 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-from</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 入场动画执行方式 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span> &#123;</span></span><br><span class="line">        transition: opacity 3s ease-out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 结束 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-to</span> &#123;</span></span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 出场（代码可以省略） */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-from</span> &#123;</span></span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 出场动画执行方式 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line">        transition: opacity 3s ease-in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 结束 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// v-show、v-if 都可</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>style 简化代码后</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* js 代码同上 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 入场 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-from</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 结束 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-to</span> &#123;</span></span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 出场（代码省略） */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 结束 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 入场动画执行方式 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 出场动画执行方式 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line">        transition: opacity 3s ease-out;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用 @keyframs 实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* js 代码同上 */</span></span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> shake &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: translateX(-100px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            transform: translateX(-50px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: translateX(50px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span> &#123;</span></span><br><span class="line">        animation: shake 3s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line">        animation: shake 3s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 template 中的 transition 标签中指定了 name ，那么 style 中的 v-enter-from 等等都需要改成 .hello-enter-from 等等</p>
<p>也可以自定义名字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> shake &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        transform: translateX(-100px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        transform: translateX(-50px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        transform: translateX(50px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.hello</span> &#123;</span></span><br><span class="line">    animation: shake 3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.bye</span> &#123;</span></span><br><span class="line">    animation: shake 3s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 自定义使用的名字</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">            &lt;transition </span><br><span class="line"><span class="javascript">            enter-<span class="keyword">from</span>-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            enter-to-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            enter-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span></span></span><br><span class="line"><span class="javascript">            leave-<span class="keyword">from</span>-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">            leave-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;bye&quot;</span></span></span><br><span class="line"><span class="javascript">            leave-to-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line">            &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="利用第三方-animate-css-动画库"><a href="#利用第三方-animate-css-动画库" class="headerlink" title="利用第三方 animate.css 动画库"></a>利用第三方 animate.css 动画库</h2><p><a href="https://animate.style/">https://animate.style/</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// animate__animated 必须要有</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                &lt;transition</span><br><span class="line"><span class="javascript">                    enter-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;animate__animated animate__flash&quot;</span></span></span><br><span class="line"><span class="javascript">                    leave-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;animate__animated animate__flash&quot;</span></span></span><br><span class="line">                &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="同时实现动画与过渡"><a href="#同时实现动画与过渡" class="headerlink" title="同时实现动画与过渡"></a>同时实现动画与过渡</h2><p>当动画与过渡效果实现时间不一致时，如果希望某一方最先结束后，另一方也立即实现，则可以在 transition 标签上添加 type=”transition” 或 type=”animation”，意思为，如果过渡与动画时间不一致，则以过渡或动画时间效果为统一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> shake &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: translateX(-100px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            transform: translateX(-50px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: translateX(50px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-from</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span> &#123;</span></span><br><span class="line">        animation: shake 10s;</span><br><span class="line">        transition: all 3s ease-in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">        animation: shake 10s;</span><br><span class="line">        transition: all 3s ease-in;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                show: <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 直接设置 type</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">transition</span> <span class="attr">type</span>=<span class="string">&quot;transition&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者直接在 transition 标签里面加入 :duration=”1000”，意为不以过渡或动画时间为准，而是以 duration 里面的时间为准，过了 1s 之后，动画或过渡立马实现完毕</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<h3 id="直接设置入场和出场时间"><a href="#直接设置入场和出场时间" class="headerlink" title="直接设置入场和出场时间"></a>直接设置入场和出场时间</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123;enter: 1000, leave: 3000&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<h3 id="禁用-CSS-动画使用-JS-做动画"><a href="#禁用-CSS-动画使用-JS-做动画" class="headerlink" title="禁用 CSS 动画使用 JS 做动画"></a>禁用 CSS 动画使用 JS 做动画</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    const app &#x3D; Vue.createApp(&#123;</span><br><span class="line">        data() &#123; return &#123; show: false &#125; &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                this.show &#x3D; !this.show</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 入场开始之前的一瞬间</span><br><span class="line">            handleBeforeEnter(el) &#123;</span><br><span class="line">                el.style.color &#x3D; &#39;red&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 入场执行动画过程中</span><br><span class="line">            handleEnterActive(el, done) &#123;</span><br><span class="line">                const animation &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">                    const color &#x3D; el.style.color</span><br><span class="line">                    if (color &#x3D;&#x3D;&#x3D; &#39;red&#39;) &#123;</span><br><span class="line">                        el.style.color &#x3D; &#39;green&#39;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        el.style.color &#x3D; &#39;red&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, 1000);</span><br><span class="line">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                    clearInterval(animation)</span><br><span class="line">                    done()</span><br><span class="line">                &#125;, 3000);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;&#x2F; 入场动画结束后</span><br><span class="line">            handleEnterEnd() &#123;</span><br><span class="line">                alert(123)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; :css&#x3D;&quot;false&quot; 意为不使用 CSS 做动画</span><br><span class="line">        &#x2F;&#x2F; 使用 JS 的钩子函数做动画</span><br><span class="line">        &#x2F;&#x2F; @before-enter 入场开始之前的一瞬间(能够接收对应的元素 el)</span><br><span class="line">        &#x2F;&#x2F; @enter 入场执行动画过程执行的方法(能够接收两个参数，对应的元素 el 与执行完毕的 done)</span><br><span class="line">        &#x2F;&#x2F; @after-enter 当入场动画结束后触发的方法(必须要先 done() 动画结束)(能够接收对应的元素 el)</span><br><span class="line">        &#x2F;&#x2F; 后几个钩子同理</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;transition </span><br><span class="line">                    :css&#x3D;&quot;false&quot;</span><br><span class="line">                    @before-enter&#x3D;&quot;handleBeforeEnter&quot;</span><br><span class="line">                    @enter&#x3D;&quot;handleEnterActive&quot;</span><br><span class="line">                    @after-enter&#x3D;&quot;handleEnterEnd&quot;</span><br><span class="line">                    @before-leave&#x3D;&quot;&quot;</span><br><span class="line">                    @leave&#x3D;&quot;&quot;</span><br><span class="line">                    @leave-after&#x3D;&quot;&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;div v-show&#x3D;&quot;show&quot;&gt;hello world&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;transition&gt;</span><br><span class="line">                &lt;button @click&#x3D;&quot;handleClick&quot;&gt;切换&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm &#x3D; app.mount(&#39;#root&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="组件和元素动画切换的效果"><a href="#组件和元素动画切换的效果" class="headerlink" title="组件和元素动画切换的效果"></a>组件和元素动画切换的效果</h1><h2 id="多个单元素标签的切换效果"><a href="#多个单元素标签的切换效果" class="headerlink" title="多个单元素标签的切换效果"></a>多个单元素标签的切换效果</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-from</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">opacity</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-to</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-leave-from</span> &#123;</span></span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show &#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// mode=&quot;out-in&quot; 先隐藏再展示</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mode=&quot;in-out&quot; 先展示再隐藏</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不写 mode 则两个动画一起执行</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 加入 appear 属性实现刚刷新页面就有入场的动画</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>good world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多个单组件之间的切换"><a href="#多个单组件之间的切换" class="headerlink" title="多个单组件之间的切换"></a>多个单组件之间的切换</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// css 部分与上面一致</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ComponentA = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ComponentB = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>good world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.show = !<span class="built_in">this</span>.show</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;component-a&#x27;</span>: ComponentA,</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;component-b&#x27;</span>: ComponentB,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 使用 v-if、v-else</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="javascript">                    &lt;component-b v-<span class="keyword">else</span> /&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者利用 :is 语法，通过动态组件实现多个单组件间动画切换的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// css 部分与上面一致</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ComponentA = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ComponentB = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>good world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">component</span>: <span class="string">&#x27;component-a&#x27;</span> &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.component === <span class="string">&#x27;component-a&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.component = <span class="string">&#x27;component-b&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.component = <span class="string">&#x27;component-a&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;component-a&#x27;</span>: ComponentA,</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;component-b&#x27;</span>: ComponentB,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 使用 is 语法</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;component&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="列表动画的实现"><a href="#列表动画的实现" class="headerlink" title="列表动画的实现"></a>列表动画的实现</h1><p>利用 transition-group 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-from</span> &#123;</span></span><br><span class="line">        opacity: 0;</span><br><span class="line">        transform: translateY(30px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.v-enter-to</span> &#123;</span></span><br><span class="line">        opacity: 1;</span><br><span class="line">        transform: translateY(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 当其他列表项移动的时候，用 v-move 做一些描述 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.v-move</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease-in</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125; &#125;,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.list.unshift(<span class="built_in">this</span>.list.length + <span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">transition-group</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="状态动画"><a href="#状态动画" class="headerlink" title="状态动画"></a>状态动画</h1><p>实现缓慢变成 10 的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num: 1,</span><br><span class="line">                animateNum: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num = <span class="number">10</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">this</span>.animateNum &gt;= <span class="built_in">this</span>.num) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> animation = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.animateNum += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (<span class="built_in">this</span>.animateNum === <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">clearInterval</span>(animation)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, 100);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">animateNum</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3.x动画篇</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件的理念</title>
    <url>/2020/12/21/Vue%E7%BB%84%E4%BB%B6%E7%9A%84%E7%90%86%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><a id="more"></a>

<p>网页可以拆解成很多的部分，比如说下面左侧代表的网页，可以总体上拆解成3大部分，其中有的部分又可以细化分为小部分。右边为拆解示意图。</p>
<img src="image-20201220142529680.png" style="zoom: 50%;" />

<h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建一个 Vue 的实例</span></span><br><span class="line">    <span class="comment">// 在创建这个实例的时候会接受一个参数</span></span><br><span class="line">    <span class="comment">// 这个参数决定 Vue 的根组件如何渲染</span></span><br><span class="line">    <span class="comment">// 对应着右侧示意图的最上层的根</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 根组件没有进一步拆分，所以到根组件这层就结束了</span></span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;hello world&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组件的理念"><a href="#组件的理念" class="headerlink" title="组件的理念"></a>组件的理念</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 还是只有一个根组件</span></span><br><span class="line">        <span class="comment">// 但是两个根组件，hello 与 world</span></span><br><span class="line">        <span class="comment">// 再把两个子组件与根组件建立起关系</span></span><br><span class="line">        <span class="comment">// 根组件调用两个子组件</span></span><br><span class="line">        <span class="comment">// 就把一个复杂的页面拆成几个部分维护</span></span><br><span class="line">        <span class="comment">// 维护成本可以得到有效的降低，这就是组件的理念</span></span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&lt;hello /&gt;&lt;world /&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;hello&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;world&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;world&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组件的复用性"><a href="#组件的复用性" class="headerlink" title="组件的复用性"></a>组件的复用性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 复用组件之间数据是不互通的，独立的</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter /&gt;</span></span><br><span class="line"><span class="string">            &lt;counter /&gt;</span></span><br><span class="line"><span class="string">            &lt;counter /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div @click=&quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>在哪里都可以使用，但是对性能会有一定的损耗，即使不用也一直挂载</p>
<p><em>建议命名小写字母，中间加横线</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter-parent /&gt;</span></span><br><span class="line"><span class="string">            &lt;counter /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// app.component 定义的这种组件是全局的组件</span></span><br><span class="line">    <span class="comment">// 只是做了一层中转</span></span><br><span class="line">    app.component(<span class="string">&#x27;counter-parent&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">&#x27;&lt;counter /&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div @click=&quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>性能比较高，不用就可以直接当做一个变量，但是使用起来比较麻烦（局部组件使用要做名字和组件间的映射）</p>
<p><em>命名建议首字母大写，并且驼峰式命名</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 这个 Counter (建议首字母大写)变量就是一个局部组件</span></span><br><span class="line">    <span class="comment">// 不会直接挂到 app 上，所以没办法直接使用</span></span><br><span class="line">    <span class="keyword">const</span> Counter = &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div @click=&quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 使用局部组件的方法</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            <span class="comment">// counter1：父组件使用的名  </span></span><br><span class="line">            <span class="comment">// counter：真正对应的局部组件变量名   </span></span><br><span class="line">            counter1: Counter</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter1 /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="组件之间传值及传值校验"><a href="#组件之间传值及传值校验" class="headerlink" title="组件之间传值及传值校验"></a>组件之间传值及传值校验</h1><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><h3 id="静态传参"><a href="#静态传参" class="headerlink" title="静态传参"></a>静态传参</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 通过属性将 content 传递给子组件 test</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test content=&quot;hello world&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 子组件通过 props 接收父组件传递的值</span></span><br><span class="line">        props: [<span class="string">&#x27;content&#x27;</span>],</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="动态传参方式"><a href="#动态传参方式" class="headerlink" title="动态传参方式"></a>动态传参方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// 通过 data 中数据的传递</span></span><br><span class="line">                num: <span class="number">123</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test :content=&quot;num&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;content&#x27;</span>],</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;typeof content&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="传递参数的校验"><a href="#传递参数的校验" class="headerlink" title="传递参数的校验"></a>传递参数的校验</h3><p>可校验 String、Boolean、Number、Array、Object、Function、Symbol</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num: <span class="number">123</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test :content=&quot;num&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 做一些校验</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            content: &#123;</span><br><span class="line">                type: <span class="built_in">Number</span>,</span><br><span class="line">                <span class="comment">// required: true,</span></span><br><span class="line">                <span class="comment">// default: 789,</span></span><br><span class="line">                <span class="comment">// 深度校验</span></span><br><span class="line">                validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> value &lt; <span class="number">1000</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;typeof content&#125;&#125;&#123;&#123;content&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="单向数据流的理解"><a href="#单向数据流的理解" class="headerlink" title="单向数据流的理解"></a>单向数据流的理解</h1><h2 id="当数据多时，笨拙的父传子方式"><a href="#当数据多时，笨拙的父传子方式" class="headerlink" title="当数据多时，笨拙的父传子方式"></a>当数据多时，笨拙的父传子方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num: <span class="number">123</span>,</span><br><span class="line">                a: <span class="number">1234</span>,</span><br><span class="line">                b: <span class="number">5678</span>,</span><br><span class="line">                c: <span class="number">9</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test :content=&quot;num&quot; :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;content&#125;&#125;-&#123;&#123;a&#125;&#125;-&#123;&#123;b&#125;&#125;-&#123;&#123;c&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="精简方式"><a href="#精简方式" class="headerlink" title="精简方式"></a>精简方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                params: &#123;</span><br><span class="line">                    num: <span class="number">123</span>,</span><br><span class="line">                    a: <span class="number">1234</span>,</span><br><span class="line">                    b: <span class="number">5678</span>,</span><br><span class="line">                    c: <span class="number">9</span></span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// v-bind=&quot;params&quot; 等价于 :num=&quot;params.num&quot; :a=&quot;params.a&quot; ...</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test v-bind=&quot;params&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;num&#125;&#125;-&#123;&#123;a&#125;&#125;-&#123;&#123;b&#125;&#125;-&#123;&#123;c&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="传值的大小写问题"><a href="#传值的大小写问题" class="headerlink" title="传值的大小写问题"></a>传值的大小写问题</h2><p>属性传的时候使用 <strong>content-abc</strong> 这种命名，接的时候使用 <strong>contentAbc</strong> 这种命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                content: <span class="number">123</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// html 标签不支持驼峰语法，会转成小写的</span></span><br><span class="line">        <span class="comment">// 尽量中间加横线</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;test :content-abc=&quot;content&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// content-abc 这种方式接收不到传值</span></span><br><span class="line">        <span class="comment">// 要以下面这种驼峰的方式接收</span></span><br><span class="line">        props: [<span class="string">&#x27;contentAbc&#x27;</span>],</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;contentAbc&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>父组件可以向子组件传递一些数据，但是这些数据子组件是绝对不能改的，因为 Vue 里面是一个单向的数据流，也就是父组件的数据可以流向子组件，但是不能反向修改父组件的数据</p>
<p>如果不是单向数据流，会造成复用组件或者多个组件之间数据的互相耦合，所以只能单向，<strong>避免组件之间的数据耦合，让代码维护性更好，减少潜在bug</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter :count=&quot;num&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;counter :count=&quot;num&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;counter :count=&quot;num&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        <span class="comment">// 无法更改</span></span><br><span class="line">        template: <span class="string">&#x27;&lt;div @click=&quot;count += 1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>修改的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter :count=&quot;num&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                myCount: <span class="built_in">this</span>.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div @click=&quot;myCount += 1&quot;&gt;&#123;&#123;myCount&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Non-Props-属性"><a href="#Non-Props-属性" class="headerlink" title="Non-Props 属性"></a>Non-Props 属性</h1><p>父组件向子组件传值，但是子组件不接收，底层就会把父组件传递过来的内容放在子组件最外层 DOM 的标签下，变成子组件最外层 DOM 标签的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter msg=&quot;hello&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 最后 DOM 结构相当于</span></span><br><span class="line">        <span class="comment">// &lt;div&gt;</span></span><br><span class="line">        <span class="comment">//     &lt;div message=&quot;hello&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line">        <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;Counter&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="不展示传递属性"><a href="#不展示传递属性" class="headerlink" title="不展示传递属性"></a>不展示传递属性</h2><p>如果不希望子组件最外层 DOM 上展示这个属性，可以加一个 inheritAttrs 特性为 false，这样子组件最外层属性就不会有值的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter msg=&quot;hello&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;Counter&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>一般情况下传递样式才会不接收（记住特点即可）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter style=&quot;color: red;&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">&#x27;&lt;div&gt;Counter&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示所有传递属性"><a href="#展示所有传递属性" class="headerlink" title="展示所有传递属性"></a>展示所有传递属性</h2><p>如果有多个根节点就不会生效了，但是如果想要生效则需要 v-bind=”$attrs”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter msg=&quot;hello&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 加入 $attrs 后，就会再次显示 msg 属性</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div v-bind=&quot;$attrs&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义展示属性"><a href="#自定义展示属性" class="headerlink" title="自定义展示属性"></a>自定义展示属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;counter msg=&quot;hello&quot; msg1=&quot;hello1&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 这个时候里面就是一个 js 的表达式</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div :msg=&quot;$attrs.msg&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div :msg1=&quot;$attrs.msg1&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="其他接收方式"><a href="#其他接收方式" class="headerlink" title="其他接收方式"></a>其他接收方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Proxy 代理里面会有父组件传递的值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$attrs);</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div :msg=&quot;$attrs.msg&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div :msg1=&quot;$attrs.msg1&quot;&gt;Counter&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="组件间通过事件通信"><a href="#组件间通过事件通信" class="headerlink" title="组件间通过事件通信"></a>组件间通过事件通信</h1><h2 id="组件的绑定事件"><a href="#组件的绑定事件" class="headerlink" title="组件的绑定事件"></a>组件的绑定事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="comment">// 3.直接就可接收参数</span></span><br><span class="line">            <span class="function"><span class="title">handleAddOne</span>(<span class="params">num</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.count += num</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 2.父组件监听事件(不能监听时候写驼峰式命名)，需要写成 add-one，无需在此接收参数</span></span><br><span class="line">        template: <span class="string">`&lt;div&gt;&lt;counter @add-one=&quot;handleAddOne&quot; :count=&quot;count&quot; /&gt;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 1.向外部触发 addOne 事件并传递参数，父组件需要监听</span></span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;addOne&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="emits-的作用"><a href="#emits-的作用" class="headerlink" title="emits 的作用"></a>emits 的作用</h2><p>意义在于：当向外触发很多不同事件的时候，能够直观的看到该组件向外触发的事件（更高的维护性）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">    emits: [<span class="string">&#x27;addOne1&#x27;</span>, <span class="string">&#x27;addOne2&#x27;</span>, <span class="string">&#x27;addOne3&#x27;</span>,],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">handleClick1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;addOne1&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">handleClick2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;addOne2&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">handleClick3</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;addOne3&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div @click=&quot;handleClick1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="emits-巧妙的用法"><a href="#emits-巧妙的用法" class="headerlink" title="emits 巧妙的用法"></a>emits 巧妙的用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">    emits: &#123;</span><br><span class="line">        <span class="comment">// 判断传递的参数是否符合要求</span></span><br><span class="line">        addOne: <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果参数大于 3 则允许往外传递参数</span></span><br><span class="line">            <span class="comment">// 否则不允许往外传递参数</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;addOne&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="v-model-对传值进行简化"><a href="#v-model-对传值进行简化" class="headerlink" title="v-model 对传值进行简化"></a>v-model 对传值进行简化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 首先定义数据 count</span></span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 2. 通过 v-model 传递给子组件</span></span><br><span class="line">        template: <span class="string">`&lt;counter v-model=count /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 3. 子组件如果能够通过 v-model 去使用 count 需要满足几个点</span></span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 4. 第一点：接收参数名字必须是 modelValue</span></span><br><span class="line">        props: [<span class="string">&#x27;modelValue&#x27;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 5. 第二点：触发事件的名字一定要叫 update:modelValue</span></span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="built_in">this</span>.modelValue + <span class="number">3</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;modelValue&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-model-传值更改传值名字"><a href="#v-model-传值更改传值名字" class="headerlink" title="v-model 传值更改传值名字"></a>v-model 传值更改传值名字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 1. 定义想要传递的任意名字，这里随意起名为 app</span></span><br><span class="line">        template: <span class="string">`&lt;counter v-model:app=&quot;count&quot; /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 2. 接收值改为 app</span></span><br><span class="line">        props: [<span class="string">&#x27;app&#x27;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 3. 改为 update:app</span></span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:app&#x27;</span>, <span class="built_in">this</span>.app + <span class="number">3</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 4. 使用名为 app</span></span><br><span class="line">        template: <span class="string">`&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;app&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="组件间双相绑定高级内容"><a href="#组件间双相绑定高级内容" class="headerlink" title="组件间双相绑定高级内容"></a>组件间双相绑定高级内容</h1><p>先来一段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span>,</span><br><span class="line">                count1: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleCountOne</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.count1 = count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 较为繁琐</span></span><br><span class="line">        template: <span class="string">`&lt;counter v-model=&quot;count&quot; :count=&quot;count1&quot; @change-count-one=&quot;handleCountOne&quot;/&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;modelValue&#x27;</span>, <span class="string">&quot;count&quot;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="built_in">this</span>.modelValue + <span class="number">3</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">handleClick1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;changeCountOne&#x27;</span>, <span class="built_in">this</span>.count + <span class="number">3</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;modelValue&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div @click=&quot;handleClick1&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>此时如果能够 v-model=”count” v-model=”count1” 这样就完美了</p>
<p>简化后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="number">1</span>,</span><br><span class="line">                count1: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`&lt;counter v-model:count=&quot;count&quot; v-model:count1=&quot;count1&quot; /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>, <span class="string">&quot;count1&quot;</span>],</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:count&#x27;</span>, <span class="built_in">this</span>.count + <span class="number">3</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">handleClick1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:count1&#x27;</span>, <span class="built_in">this</span>.count1 + <span class="number">3</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div @click=&quot;handleClick1&quot;&gt;&#123;&#123;count1&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-model-传值利用自定义修饰符"><a href="#v-model-传值利用自定义修饰符" class="headerlink" title="v-model 传值利用自定义修饰符"></a>v-model 传值利用自定义修饰符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 1. 首先在 v-model 后面添加一个自定义名字的修饰符</span></span><br><span class="line">        <span class="comment">// 修饰符会通过 props 传递给子组件</span></span><br><span class="line">        template: <span class="string">`&lt;counter v-model.uppercase=&quot;count&quot; /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            <span class="string">&#x27;modelValue&#x27;</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="comment">// 默认的 modelModifiers</span></span><br><span class="line">            <span class="comment">// 2. 子组件通过 modelModifiers 接收（固定的名字）</span></span><br><span class="line">            <span class="string">&#x27;modelModifiers&#x27;</span>: &#123;</span><br><span class="line">                <span class="comment">// 不传递修饰符默认给 modelModifiers 一个空对象</span></span><br><span class="line">                <span class="comment">// 如果传递就会变成 &#123; uppercase: true &#125; (底层实现的)</span></span><br><span class="line">                <span class="keyword">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> newValue = <span class="built_in">this</span>.modelValue + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">                <span class="comment">// 3. 结合修饰符做一些处理</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.modelModifiers.uppercase) &#123;</span><br><span class="line">                    newValue = newValue.toUpperCase()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;update:modelValue&#x27;</span>, newValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;modelValue&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue-的-slot-概念"><a href="#Vue-的-slot-概念" class="headerlink" title="Vue 的 slot 概念"></a>Vue 的 slot 概念</h1><p>使用插槽和具名插槽解决组件内容的传递问题</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// slot 插槽（插入子组件里面）</span></span><br><span class="line">        <span class="comment">// 插槽也可放其他子组件或者字符串等等..</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;myForm&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;提交&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/myForm&gt;</span></span><br><span class="line"><span class="string">        &lt;myForm&gt;</span></span><br><span class="line"><span class="string">            &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/myForm&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;myForm&#x27;</span>, &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                alert(<span class="number">123</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 第一个组件就是一个 div 提交</span></span><br><span class="line">        <span class="comment">// 第二个组件就是一个 button 提交</span></span><br><span class="line">        <span class="comment">// 没办法在 slot 上绑定事件</span></span><br><span class="line">        <span class="comment">// 但是可以在外层包一个 span 标签，利用冒泡来触发事件</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input /&gt;</span></span><br><span class="line"><span class="string">            &lt;span @click=&quot;handleClick&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="slot-中使用的数据作用域问题"><a href="#slot-中使用的数据作用域问题" class="headerlink" title="slot 中使用的数据作用域问题"></a>slot 中使用的数据作用域问题</h2><p>父模版里调用的数据属性，使用的都是父模版里的数据</p>
<p>子模版里调用的数据属性，使用的都是子模版里的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text: <span class="string">&#x27;提交&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 传递的变量不会用子组件里面的数据</span></span><br><span class="line">        <span class="comment">// 用的是父组件作用域里的变量</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;myForm&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/myForm&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;myForm&#x27;</span>, &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123; alert(<span class="number">123</span>) &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;input /&gt;</span></span><br><span class="line"><span class="string">            &lt;span @click=&quot;handleClick&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="slot-默认值设定"><a href="#slot-默认值设定" class="headerlink" title="slot 默认值设定"></a>slot 默认值设定</h2><p>插槽默认内容，如果不传递内容则使用默认值，如果传递则用传递值，默认值失效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;input /&gt;</span></span><br><span class="line"><span class="string">    &lt;span @click=&quot;handleClick&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;slot&gt;default content&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<h1 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h1><p>案例演示：header、content、footer 无法按顺序展示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;layOut&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;header&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;footer&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/layOut&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;layOut&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;content&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>解决方法：具名插槽，利用 template 标签包裹并且制定 v-slot:xxx，子组件利用插槽的 name 指定接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;layOut&gt;</span></span><br><span class="line"><span class="string">            &lt;template v-slot:header&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;header&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/template&gt;</span></span><br><span class="line"><span class="string">            &lt;template v-slot:footer&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;footer&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/template&gt;</span></span><br><span class="line"><span class="string">        &lt;/layOut&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;layOut&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;content&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插槽的简写"><a href="#插槽的简写" class="headerlink" title="插槽的简写"></a>插槽的简写</h2><p>利用 # 号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 利用 # 号直接制定插槽名称</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;layOut&gt;</span></span><br><span class="line"><span class="string">            &lt;template #header&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;header&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/template&gt;</span></span><br><span class="line"><span class="string">            &lt;template #footer&gt;</span></span><br><span class="line"><span class="string">                &lt;div&gt;footer&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/template&gt;</span></span><br><span class="line"><span class="string">        &lt;/layOut&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;layOut&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;content&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h1><p>解决的问题：当子组件渲染的内容要由父组件决定的时候，就可以通过作用域插槽实现</p>
<p>通过这个插槽的形式，可以能够让父组件调用子组件中的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 2. 所有传递过来的内容都在 slotProps 中，就可以用传递过来的 item 值</span></span><br><span class="line">        <span class="comment">// 也可已将传递来的数据解构 v-slot=&quot;&#123;item&#125;&quot;,然后在 div 中就可以直接用 &#123;&#123;item&#125;&#125;</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;list v-slot=&quot;slotProps&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;&#123;&#123;slotProps.item&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/list&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;list&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 1. 通过绑定属性把数据传递给插 slot</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;slot :key=&quot;index&quot; v-for=&quot;(item, index) of list&quot; :item=&quot;item&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="动态组件和异步组件"><a href="#动态组件和异步组件" class="headerlink" title="动态组件和异步组件"></a>动态组件和异步组件</h1><p>冗余的代码量实现切换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                currentItem: <span class="string">&#x27;input-item&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            <span class="function"><span class="title">toggle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.currentItem === <span class="string">&#x27;input-item&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.currentItem = <span class="string">&#x27;common-item&#x27;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.currentItem = <span class="string">&#x27;input-item&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;input-item v-show=&quot;currentItem === &#x27;input-item&#x27;&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;common-item v-show=&quot;currentItem === &#x27;common-item&#x27;&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click=&quot;toggle&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;input-item&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;input /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;common-item&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;hello world&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="动态组件简化代码"><a href="#动态组件简化代码" class="headerlink" title="动态组件简化代码"></a>动态组件简化代码</h2><p>动态组件：根据数据的变化，结合 compoent 标签，随时动态切换组件的显示</p>
<p>上面代码除了父组件中的 template 变化其余不变</p>
<p>存在问题：比如之前的输入内容，在切换之后会消失</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;component :is=&quot;currentItem&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;toggle&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>解决方法：引入 keep-alive 缓存标签包裹注 component</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;keep-alive&gt;</span></span><br><span class="line"><span class="string">    &lt;component :is=&quot;currentItem&quot; /&gt;</span></span><br><span class="line"><span class="string">&lt;/keep-alive&gt;</span></span><br><span class="line"><span class="string">&lt;button @click=&quot;toggle&quot;&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<p><strong>keep-alive</strong>：当第一次渲染的时候，会把里面其里面组件的一些输入状态、变更情况等都记录下来，当返回再用这个组件的时候会从缓存里面把之前的一些数据拿过来填充上，因此其<strong>具有缓存的特性</strong>，所以<strong>动态组件经常与 keep-alive 一起使用</strong></p>
<h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><p>可以通过异步的方式动态的加载一些其他的组件，这样的好处是可以把一个大型的项目拆分成很多小的 js 文件，在需要用到这些小 js 文件时，通过异步组件再去引入使用这些组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 同步组件</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="comment">// 这种情况 common-item 就是一个同步的组件</span></span><br><span class="line">        <span class="comment">// 调用组件的时候这个组件的代码立即会顺序的执行（同步的过程）</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;&lt;common-item /&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;common-item&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;hello world&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>4s 后触发执行的异步组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 异步组件</span></span><br><span class="line">    <span class="comment">// 可以异步的执行组件的一些逻辑</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;common-item /&gt;</span></span><br><span class="line"><span class="string">            &lt;async-common-item /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;common-item&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;hello world&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;async-common-item&#x27;</span>, Vue.defineAsyncComponent(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                resolve(&#123;</span><br><span class="line">                    template: <span class="string">`&lt;div&gt;this is an async component&lt;/div&gt;`</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, <span class="number">4000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><em>日常开发中同步组件还是使用最多的一种写法</em></p>
<h1 id="补充语法知识点"><a href="#补充语法知识点" class="headerlink" title="补充语法知识点"></a>补充语法知识点</h1><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p><strong>让某个元素标签只渲染一次</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 内部的 +1 还会实现</span></span><br><span class="line">template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div @click=&quot;count += 1&quot; v-once&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;count&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>实际上是 <strong>获取 DOM 节点</strong> 或 <strong>组件引用</strong> 的一个语法</p>
<p><em>慎重使用该方法，维护性不高</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取 DOM 节点</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.count)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.count.innerHTML = <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;div ref=&quot;count&quot;&gt; &#123;&#123;count&#125;&#125; &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取组件的引用</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 获取子组件的引用，并且可以调用方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.common.sayHello())</span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`&lt;div&gt; &lt;common-item ref=&quot;common&quot; /&gt; &lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;common-item&#x27;</span>, &#123;</span><br><span class="line">        methods: &#123; <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123; lert(<span class="string">&#x27;hello&#x27;</span>) &#125; &#125;,</span><br><span class="line">        template: <span class="string">`&lt;div&gt;hello world&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h2><p><strong>多级组件传值的语法</strong></p>
<p>一个数据多层传递案例（代码冗余）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 父组件把数据传给孙子</span></span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        <span class="comment">// 1. 先传给儿子组件</span></span><br><span class="line">        template: <span class="string">`&lt;div&gt; &lt;child :count=&quot;count&quot; /&gt; &lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        <span class="comment">// 2. 子组件传给孙子组件</span></span><br><span class="line">        template: <span class="string">`&lt;child-child :count=&quot;count&quot;/&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child-child&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 3. 孙子组件接收</span></span><br><span class="line">        props: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        template: <span class="string">`&lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>代码优化利用 provide 与 inject</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        <span class="comment">// 可以用直接函数返回对象的方式</span></span><br><span class="line">        <span class="comment">// provide() &#123;</span></span><br><span class="line">        <span class="comment">//     return &#123;</span></span><br><span class="line">        <span class="comment">//         count: this.count</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// 也可以用</span></span><br><span class="line">        provide: &#123;</span><br><span class="line">            <span class="comment">// 这种方式不能使用 count: this.count</span></span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;child :count=&quot;count&quot; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;child-child /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child-child&#x27;</span>, &#123;</span><br><span class="line">        inject: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        template: <span class="string">`&lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>provide 提供数据给孙子组件的一次性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                count: <span class="built_in">this</span>.count</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 加入按钮实现增加，在孙子组件里面展示并不会发生变化</span></span><br><span class="line">        <span class="comment">// 这种语法写 provide 提供数据给孙子组件是一次性的</span></span><br><span class="line">        <span class="comment">// 不是一个响应式的双向绑定的数据提供方式</span></span><br><span class="line">        <span class="comment">// 孙子组件拿到的永远是第一次传递的值</span></span><br><span class="line">        template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;child :count=&quot;count&quot; /&gt;</span></span><br><span class="line"><span class="string">            &lt;button @click=&quot;count += 1&quot;&gt;Add&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">        template: <span class="string">`&lt;child-child /&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(<span class="string">&#x27;child-child&#x27;</span>, &#123;</span><br><span class="line">        inject: [<span class="string">&#x27;count&#x27;</span>],</span><br><span class="line">        template: <span class="string">`&lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> vm = app.mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue3.x组件篇</category>
      </categories>
      <tags>
        <tag>Vue 3.x</tag>
        <tag>组件的理念</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-HTML&amp;CSS部分</title>
    <url>/2020/11/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-HTML&amp;CSS%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p><strong>下面内容包括一些常考的、重要的 HTML&amp;CSS 前端面试题， 是必考知识，不过关直接回家的那种</strong></p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="如何理解-HTML-语义化？"><a href="#如何理解-HTML-语义化？" class="headerlink" title="如何理解 HTML 语义化？"></a>如何理解 HTML 语义化？</h2><ul>
<li><strong>让人更容易读懂（增加代码可读性）</strong></li>
<li><strong>让搜索引擎更容易读懂（SEO）</strong></li>
</ul>
<h2 id="块状元素-amp-内联元素？"><a href="#块状元素-amp-内联元素？" class="headerlink" title="块状元素&amp;内联元素？"></a>块状元素&amp;内联元素？</h2><a id="more"></a>

<p>display: block / table；有 div、h1、h2、table、ul、ol、p 等<br>display: inline / inline- block；有 span、img、input、button 等</p>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS-布局"></a>CSS-布局</h2><h3 id="盒模型宽度计算"><a href="#盒模型宽度计算" class="headerlink" title="盒模型宽度计算"></a>盒模型宽度计算</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 如下代码，请问div1的 offsetwidth是多大？ */</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        padding: 10px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>offsetwidth =（内容宽度+内边距+边框），无外边距</p>
<p>因此答案是122px</p>
<p>补充：如果让 offsetwidth 等于100px，该如何做？</p>
<p>在标签选择器中添加下面一行代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">box-sizing: border-box;</span><br></pre></td></tr></table></figure>

<p>也就是说，这个时候为这个标签设置宽度的时候是包括内容、内边距、边框的。</p>
<h3 id="margin-纵向重叠问题"><a href="#margin-纵向重叠问题" class="headerlink" title="margin 纵向重叠问题"></a>margin 纵向重叠问题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 如下代码，AAA和BBB之间的距离是多少 */</span></span></span><br><span class="line">    p &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        margin-bottom: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>相邻元素的 margin-top 和 margin-bottom 会发生重叠<br>空白内容的 p 标签也会重叠<br>答案：15px</p>
<h3 id="margin-负值问题"><a href="#margin-负值问题" class="headerlink" title="margin 负值问题"></a>margin 负值问题</h3><ul>
<li>margin-top 和 margin-left 负值，元素向上、向左移动</li>
<li>margin- right 负值，右侧元素左移，自身不受影响</li>
<li>margin-bottom 负值，下方元素上移，自身不受影响</li>
</ul>
<h3 id="BFC-理解与应用"><a href="#BFC-理解与应用" class="headerlink" title="BFC 理解与应用"></a>BFC 理解与应用</h3><ul>
<li>Block format context，块级格式化上下文</li>
<li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li>
</ul>
<p>形成 BFC 的常见条件</p>
<ul>
<li>float 不是 none</li>
<li>position 是 absolute 或 fixed</li>
<li>overflow 不是 visible</li>
<li>display 是 flex、inline-block 等</li>
</ul>
<p>BFC 的常见应用</p>
<p>清除浮动</p>
<p>如下代码所示，此时从图片中可以看出来格式是完全乱的，文字也会贯穿到左侧，这是由于 img 设置了 float 后跑出了这个容器之内，这就是我们所说的脱离文档流，这对我们的布局是一个很大的问题，此时我们就可以通过 BFC 来解决这个问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 如下代码，AAA和BBB之间的距离是多少 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.bfc</span> &#123;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container bfc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cn.vuejs.org/images/logo.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span> <span class="attr">style</span>=<span class="string">&quot;magin-right: 10px; width: 10%;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bfc&quot;</span>&gt;</span>某一段文字……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="1605790802753.png" alt="1605790802753"></p>
<p>在 style 中加入一行（参见形成 BFC 的常见条件，其中有一项就是 overflow 不是 visible）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.bfc &#123;</span><br><span class="line">        overflow: hidden;  /* 触发元素 BFC */</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个时候容器就会被这个图片撑高了，并且文字也不会贯穿到左侧。</p>
<p><img src="1605790776904.png" alt="1605790776904"></p>
<p>总结：BFC的核心用意是-他是一个独立渲染区域，它内部的区域怎么去渲染都不会影响到外部。</p>
<p>（通过这个容器案例有一个很直观的体验，如果这个容器没有 BFC 的话，图片会跑出去，如果有 BFC 的话，即便是 img 浮动，也不会跑出这个容器，而是会把这个容器撑大；文字之所以加 BFC，是因为如果 img 浮动，那么 img 的位子将不复存在，因此文字一行会贯穿到左侧，所以需要给它加一个 BFC。注：即使 img 设置浮动，但是文字不会占据浮动标签的位置，只会环绕周围，而其左侧会被 p 标签的空白填满。）</p>
<h3 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h3><ul>
<li>如何实现圣杯布局和双飞翼布局</li>
<li>手写 clearfix</li>
</ul>
<p><strong>圣杯布局和双飞翼布局的目的</strong></p>
<ul>
<li>三栏布局，中间一栏最先加载和渲染（内容最重要）</li>
<li>两侧内容固定，中间内容随着宽度自适应</li>
<li>一般用于 PC 网页</li>
</ul>
<p><strong>圣杯布局和双飞翼布局的技术总结</strong></p>
<ul>
<li>使用 float 布局</li>
<li>两侧使用 margin 负值，以便和中间内容横向重叠</li>
<li>防止中间内容被两侧覆盖，一个用 padding 一个用 margin</li>
</ul>
<p>两侧使用 margin 负值，为了让两侧与中间内容横向重叠</p>
<p>一种方法用 padding 一种方法用 margin，两种实现的实现的方法，大同小异</p>
<p>圣杯布局是通过**父级元素 padding **两边留白的（中间的 center 的 width 是 100% 撑满的，并且希望它居中的，因此需要给父元素设置一个内边距 padding，这样才能满足虽然 center 是 100%，但是它也是居中的，左边右边都可以有内容，因此根据左右元素的 width 设置padding）</p>
<p>双飞翼布局是通过**子元素 margin **两边留白的</p>
<p>两种方法最终都是相当于包裹在了一个大的父元素里面。</p>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    html,</span><br><span class="line">    body &#123;</span><br><span class="line">        min-width: 600px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    header,</span><br><span class="line">    footer &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#center</span> &#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        background-color: green;</span><br><span class="line">        width: 200px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        right: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">        background-color: pink;</span><br><span class="line">        width: 150px;</span><br><span class="line">        margin-right: -150px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">        padding-left: 200px;</span><br><span class="line">        padding-right: 150px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    footer &#123;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>this is header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>this is right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>this is footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    html,</span><br><span class="line">    body &#123;</span><br><span class="line">        min-width: 600px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#main</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: grey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">        width: 190px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#0000FF</span>;</span></span><br><span class="line">        margin-left: -100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">        width: 190px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#FF0000</span>;</span></span><br><span class="line">        margin-left: -190px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.col</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line">        margin: 0 190px 0 190px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class="line">        this is main</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    this is left</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line">    this is right</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="手写clearfix"><a href="#手写clearfix" class="headerlink" title="手写clearfix"></a>手写clearfix</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">	content: &#x27;&#x27;;</span><br><span class="line">	display: table; /* display: block; 也可以 */</span><br><span class="line">	clear: both</span><br><span class="line">&#125;</span><br><span class="line">.clearfix: &#123;</span><br><span class="line">	*zoom: 1;  /* 兼容 IE 低版本浏览器 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>常用语法回顾</p>
<ul>
<li>flex- direction</li>
<li>justify- content</li>
<li>align-items</li>
<li>flex-wrap</li>
<li>align-self </li>
</ul>
<p><strong>这几条一定要掌握并且会用！</strong></p>
<h4 id="flex-画色子"><a href="#flex-画色子" class="headerlink" title="flex 画色子"></a>flex 画色子</h4><h5 id="一点"><a href="#一点" class="headerlink" title="一点"></a>一点</h5><p><em>注：flex 布局，设置主轴与侧轴位置水平即可</em></p>
<p><img src="1606024006006.png" alt="1606024006006"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: 2px solid gray;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        margin: auto;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item1</span> &#123;</span></span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        background-color: gray;</span><br><span class="line"></span><br><span class="line">        align-self: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="二点"><a href="#二点" class="headerlink" title="二点"></a>二点</h5><p><em>注：flex 布局，设置主轴方向为列，主轴两端对齐+侧轴居中</em></p>
<p><img src="1606026525191.png" alt="1606026525191"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        border: 2px solid gray;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        margin: auto;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        background-color: gray;</span><br><span class="line">        margin: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="三点"><a href="#三点" class="headerlink" title="三点"></a>三点</h5><p><em>注：flex 布局，两端对齐后，第二个点侧轴居中，第三个点侧轴底对齐</em></p>
<p><img src="1606025489313.png" alt="1606025489313"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        padding: 20px;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">        align-self: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        align-self: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="四点"><a href="#四点" class="headerlink" title="四点"></a>四点</h5><p><img src="1606027896364.png" alt="1606027896364"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#898386</span>;</span></span><br><span class="line">        border-radius: 20px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#887e7f</span>;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-content: space-around;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="五点"><a href="#五点" class="headerlink" title="五点"></a>五点</h5><p><img src="1606028492611.png" alt="1606028492611"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#898386</span>;</span></span><br><span class="line">        border-radius: 20px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#887e7f</span>;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-content: space-around;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="六点"><a href="#六点" class="headerlink" title="六点"></a>六点</h5><p><img src="1606028760622.png" alt="1606028760622"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#898386</span>;</span></span><br><span class="line">        border-radius: 20px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line"></span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#887e7f</span>;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-content: space-around;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> align-items 在伸缩容器上使用它，伸缩容器内部所有的元素都一致地受制于 align-items 的值。 但是有些时候，我们希望伸缩容器内部某个元素在侧轴上的排列方式有所差异。此时就不能使用 align-items，因为 align-items 作用于整体。我们希望作用于部分。这就是 align-self 的发挥场地。 </p>
<p>注：align-items 为弹性容器中所有项目设置缺省对齐属性，包括匿名弹性项目。</p>
<p>​       align-self 可以为单独的弹性项目设置对齐来覆盖缺省值。</p>
<h2 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS-定位"></a>CSS-定位</h2><h3 id="absolute-和-relative-分别依据什么定位？"><a href="#absolute-和-relative-分别依据什么定位？" class="headerlink" title="absolute 和 relative 分别依据什么定位？"></a>absolute 和 relative 分别依据什么定位？</h3><p>不论面试还是开发中非常重要的问题！</p>
<p>relative 依据自身定位，并且对外界元素没任何影响<br>absolute 依据最近一层的定位元素（absolute、relative、fixed）定位，一直往上找父元素，如果实在没有定位元素，那么最后就是依据body</p>
<h3 id="居中对齐有哪些实现方式？"><a href="#居中对齐有哪些实现方式？" class="headerlink" title="居中对齐有哪些实现方式？"></a>居中对齐有哪些实现方式？</h3><p>CSS 面试中 90% 会考的题目！</p>
<p><strong>水平居中</strong></p>
<p>inline 元素：text- align:center<br>bock 元素：margin:auto<br>absolute 元素：left：50% + margin-left 负值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"><span class="css">    <span class="comment">/* 第一种 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/* 内部的行内元素实现行内元素水平居中 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第二种 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-2</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 500px;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;  <span class="comment">/* 左右边自动填充实现内部块级元素的水平居中 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第三种 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-3</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">        height: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container-3</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>; <span class="comment">/* 子绝父相实现水平居中 */</span></span></span><br><span class="line">        left: 50%;</span><br><span class="line">        margin-left: -150px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            this is block item</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            this is absolute item</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>垂直居中</strong></p>
<p>inline 元素：line-height 的值等于 height 值<br>absolute 元素：top：50% + margin-top 负值<br>absolute 元素：transform（-50%，-50%）<br>absolute 元素: top、left、bottom、right = 0 最后加一个 margin:auto</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第一种 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/* 内部的行内元素实现行内元素水平居中 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">line-height</span>: 200<span class="selector-tag">px</span>; <span class="comment">/* 利用高度等于行高实现行内元素垂直居中 */</span></span></span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第二种 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-2</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container-2</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span>: <span class="selector-tag">-150px</span>; <span class="comment">/* 必须知道自身尺寸，设置自身宽度一半 */</span></span></span><br><span class="line">        top: 50%;</span><br><span class="line">        margin-top: -50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第三种（可能存在兼容性问题） */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-3</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container-3</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 80px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%) <span class="comment">/* 无需知道自身尺寸（C3新属性） */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/* 第四种（不需要知道子元素的尺寸，浏览器兼容性好） */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container-4</span> &#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container-4</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        right: 0;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>; <span class="comment">/* 上下左右边距自动填充，实现水平垂直居中 */</span> </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            this is item</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            this is item</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            this is item</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="CSS-图文样式"><a href="#CSS-图文样式" class="headerlink" title="CSS-图文样式"></a>CSS-图文样式</h2><h3 id="line-height-如何继承？"><a href="#line-height-如何继承？" class="headerlink" title="line- height 如何继承？"></a>line- height 如何继承？</h3><p>如下代码，p 标签的行高将会是多少？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        line-height: 200%;</span><br><span class="line">    &#125;</span><br><span class="line">    p &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>答案：40px（20px * 200% = 40px）</p>
<ul>
<li><p>写具体数值，如30px，则继承该值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 最终p标签的line-height为50px */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>写比例，如2/1.5，则继承该比例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 最终p标签的line-height为24px（p的font-size * 1.5） */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>写百分比，如200%，则继承计算出来的值（考点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        line-height: 200%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 最终p标签的line-height为40px（body的font-size * 200%） */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        font-size: 16px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="CSS-响应式"><a href="#CSS-响应式" class="headerlink" title="CSS-响应式"></a>CSS-响应式</h2><h3 id="rem-是什么？"><a href="#rem-是什么？" class="headerlink" title="rem 是什么？"></a>rem 是什么？</h3><p>rem 是一个长度单位</p>
<ul>
<li>px，绝对长度单位，最常用</li>
<li>em，相对长度单位，相对于父元素，特别不常用</li>
<li>rem，相对长度单位，相对于根元素（html），常用于响应式布局</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    html &#123;</span><br><span class="line">        font-size: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 0<span class="selector-class">.16rem</span>; <span class="comment">/* 16px */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>rem 可以应用在 CSS 中除了根元素以外的任意属性长度上（如 width、height、line-height、padding 等）</strong></p>
<h3 id="响应式布局的常见方案？"><a href="#响应式布局的常见方案？" class="headerlink" title="响应式布局的常见方案？"></a>响应式布局的常见方案？</h3><ul>
<li><p>由于 rem 是相对于根元素的长度单位，因此根元素不一样 rem 计算出来的就不一样</p>
</li>
<li><p>可以通过 media-query 查询不同屏幕的宽度，根据不同的屏幕宽度设置根元素 font-size</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">374px</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* iphone5 或者更小的尺寸，以 iphone5 的宽度（320px）比例设置 font-size */</span></span></span><br><span class="line">        html &#123;</span><br><span class="line">            font-size: 86px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">413px</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* iphone6/7/8 和 iphone x */</span></span></span><br><span class="line">        html &#123;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">414px</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* iphone6p 或者更大的尺寸，以 iphone6p 的宽度（414px）比例设置 font-size */</span></span></span><br><span class="line">        html &#123;</span><br><span class="line">            font-size: 110px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 在iPhone6上是16px，在iPhone5上小一些，iPhone6p上会大一些 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 0<span class="selector-class">.16rem</span>; </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line">        width: 1rem;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        this is div</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>关于比例：375px / 320px  = 100px / 86px，100px / 110px = 375px / 414px，以这个为依据（实际应用中尺寸根据这三个就已经可以适配安卓与苹果，如果需要再精细就按需求增加媒体查询）</strong></p>
<h3 id="CSS-响应式-vw-vh"><a href="#CSS-响应式-vw-vh" class="headerlink" title="CSS-响应式-vw/vh"></a>CSS-响应式-vw/vh</h3><ul>
<li><p>针对 rem 的弊端（并非贬义词，是一个现象或者说是特性，适用于尺寸跨度比较大的）</p>
<p><strong>rem 的弊端：“阶梯” 性（通过媒体查询一级一级类似台阶一样的设置根元素的尺寸大小）</strong></p>
</li>
</ul>
<ul>
<li><p>网页视口尺寸</p>
<p><strong>window.screen.height // 屏幕高度（整个手机屏幕显示区域的高度）</strong><br><strong>window.innerHeight // 网页视口高度（打开网页后去掉浏览器的上下的头和下巴）</strong><br><strong>document.body.clientHeight // body高度（网页内容高度）</strong></p>
</li>
</ul>
<ul>
<li><p>vw-vh</p>
<p><strong>vh 网页视口高度的 1/100</strong><br><strong>vw 网页视口宽度的 1/100</strong></p>
<p><strong>wmax 取两者最大值；wmin 取两者最小值</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span>: 10<span class="selector-tag">vw</span>;  <span class="comment">/* 网页视口宽度的1/10 */</span> </span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span>: 10<span class="selector-tag">vh</span>; <span class="comment">/* 网页视口高度的1/10 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// window.innerHeight === 100vh</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// window.innerWidth === 100vw</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="关于-CSS-动画"><a href="#关于-CSS-动画" class="headerlink" title="关于 CSS 动画"></a>关于 CSS 动画</h2><p>并不是面试的重点，除非面试是一个专门做动画的职位</p>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
        <tag>HTML、CSS面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结-面试真题</title>
    <url>/2020/12/12/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-%E9%9D%A2%E8%AF%95%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li><strong>网上的高频 JS 初级面试题</strong></li>
<li><strong>验证和复习之前学过的知识</strong></li>
<li><strong>补充其他技能，如正则表达式、数组 API</strong></li>
</ul>
<a id="more"></a>

<h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目 - 1"></a>题目 - 1</h1><h2 id="var、let、const-的区别"><a href="#var、let、const-的区别" class="headerlink" title="var、let、const 的区别"></a>var、let、const 的区别</h2><ul>
<li>var 是 ES5 语法， let、const 是 ES6 语法；var 有变量提升</li>
<li>var 和 let 是变量，可修改； const 是常量，不可修改；</li>
<li>let、const 有块级作用域，var 没有</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量提升 ES5</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">200</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="comment">// var a</span></span><br><span class="line"><span class="comment">// console.log(a) // undefined</span></span><br><span class="line"><span class="comment">// a = 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(j) <span class="comment">// not defined</span></span><br></pre></td></tr></table></figure>

<h2 id="typeof-返回哪些类型"><a href="#typeof-返回哪些类型" class="headerlink" title="typeof 返回哪些类型"></a>typeof 返回哪些类型</h2><ul>
<li>undefined、string、number、boolean、symbol  - （均为值类型）</li>
<li>object（注意， typeof null === ‘object’） - （为引用类型）</li>
<li>function</li>
</ul>
<h2 id="列举强制类型转换和隐式类型转换"><a href="#列举强制类型转换和隐式类型转换" class="headerlink" title="列举强制类型转换和隐式类型转换"></a>列举强制类型转换和隐式类型转换</h2><ul>
<li>强制：parseInt、parseFloat、toString 等</li>
<li>隐式：if、逻辑运算、==、+ 拼接字符串</li>
</ul>
<h1 id="题目-2"><a href="#题目-2" class="headerlink" title="题目 - 2"></a>题目 - 2</h1><h2 id="手写深度比较，模拟-lodash-isEqual"><a href="#手写深度比较，模拟-lodash-isEqual" class="headerlink" title="手写深度比较，模拟 lodash.isEqual"></a>手写深度比较，模拟 lodash.isEqual</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现如下效果</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125; &#125;</span><br><span class="line">isEqual(obj1, obj2) === <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否为对象或数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全相等（深度）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isObj(obj1) || !isObj(obj2)) &#123;</span><br><span class="line">        <span class="comment">// 值类型直接返回，参与 equal 的一般不会是函数</span></span><br><span class="line">        <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 两个都是对象或数组，并且不相等</span></span><br><span class="line">    <span class="comment">// 1. 先取出 obj1 和 obj2 的 keys，比较个数</span></span><br><span class="line">    <span class="keyword">const</span> obj1Keys = <span class="built_in">Object</span>.keys(obj1)</span><br><span class="line">    <span class="keyword">const</span> obj2Keys = <span class="built_in">Object</span>.keys(obj2)</span><br><span class="line">    <span class="keyword">if</span> (obj1Keys.length !== obj2Keys.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 2. 以 obj1 为基准，和 obj2 依次递归比较</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">        <span class="comment">// 比较当前 key 的 value - 递归</span></span><br><span class="line">        <span class="keyword">const</span> res = isEqual(obj1[key], obj2[key])</span><br><span class="line">        <span class="keyword">if</span> (!res) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 全相等</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="split-和-join-的区别"><a href="#split-和-join-的区别" class="headerlink" title="split() 和 join() 的区别"></a>split() 和 join() 的区别</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个是拆分数组，一个是拼接</span></span><br><span class="line"><span class="string">&quot;1-2-3&quot;</span>.split(<span class="string">&quot;-&quot;</span>)  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].join(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// &#x27;1-2-3&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="数组的-pop、push、unshift、shift-分别是什么"><a href="#数组的-pop、push、unshift、shift-分别是什么" class="headerlink" title="数组的 pop、push、unshift、shift 分别是什么"></a>数组的 pop、push、unshift、shift 分别是什么</h2><p><em>回答逻辑：功能、返回值、是否对原数组造成影响</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop: 刨除数组最后一个，并且返回刨除的元素，原数组被刨除元素消失</span></span><br><span class="line"><span class="keyword">const</span> popRes = arr.pop()</span><br><span class="line"><span class="built_in">console</span>.log(popRes, arr) <span class="comment">// 40 &amp; [10, 20, 30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// push: 向数组最后追加元素，返回的是数组的 length，原数组引入追加元素</span></span><br><span class="line"><span class="keyword">const</span> pushRes = arr.push(<span class="number">50</span>)</span><br><span class="line"><span class="built_in">console</span>.log(pushRes, arr) <span class="comment">// 5 &amp; [10, 20, 30, 40, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift: 在最前面插入一个传入的元素，返回数组的 length，原数组在最前面引入该元素</span></span><br><span class="line"><span class="keyword">const</span> unshiftRes = arr.unshift(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(unshiftRes, arr) <span class="comment">// 5 &amp; [5, 10, 20, 30, 40]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift: 在原数组最前面取出一个元素，返回取出来的数组元素，原数组去掉取出的元素</span></span><br><span class="line"><span class="keyword">const</span> shiftRes = arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(shiftRes, arr) <span class="comment">// 10 &amp; [20, 30, 40]</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展-数组的-API，有哪些是纯函数"><a href="#扩展-数组的-API，有哪些是纯函数" class="headerlink" title="扩展 - 数组的 API，有哪些是纯函数"></a>扩展 - 数组的 API，有哪些是纯函数</h2><p>纯函数：1. 不改变源数组（没有副作用）；2. 返回一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// concat - 追加一个数组，并且无论原数组或者新数组做任何改变，互不影响</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.concat([<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// map: 针对每个数组元素进行操作，返回新的数组，互不影响</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.map(<span class="function">(<span class="params">num</span>) =&gt;</span> num * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter: 针对原数组进行条件过滤，返回新的数组，互不影响</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.filter(<span class="function">(<span class="params">num</span>) =&gt;</span> num &gt; <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice: 类似做了一个深拷贝，返回一个和原数组一样的数组，二者互不影响</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.slice()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非纯函数</span></span><br><span class="line"><span class="comment">// push pop shift unshift</span></span><br><span class="line"><span class="comment">// forEach（并非返回一个数组）</span></span><br><span class="line"><span class="comment">// some every</span></span><br><span class="line"><span class="comment">// reduce</span></span><br></pre></td></tr></table></figure>

<h1 id="题目-3"><a href="#题目-3" class="headerlink" title="题目 - 3"></a>题目 - 3</h1><h2 id="数组-slice-和-splice-的区别"><a href="#数组-slice-和-splice-的区别" class="headerlink" title="数组 slice 和 splice 的区别"></a>数组 slice 和 splice 的区别</h2><ul>
<li>功能区别（slice - 切片， splice - 剪接）</li>
<li>参数和返回值</li>
<li>是否纯函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 纯函数</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.slice()       <span class="comment">// 不传参数类似深拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.slice(<span class="number">1</span>, <span class="number">4</span>)   <span class="comment">// starIndex 与 endIndex   arr2 = [20, 30, 40]</span></span><br><span class="line"><span class="keyword">const</span> arr3 = arr.slice(<span class="number">2</span>)      <span class="comment">// 从 index 为 2 截取到最后 arr3 = [30, 40, 50]</span></span><br><span class="line"><span class="keyword">const</span> arr4 = arr.slice(-<span class="number">3</span>)     <span class="comment">// 从最后开始截，截最后三个  arr4 = [30, 40, 50]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// splice 非纯函数(有副作用)</span></span><br><span class="line"><span class="comment">// 剪切并且填</span></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>) <span class="comment">// 从 index 1，长度 2，剪切出来，再把后面所有参数放到剪切的位子</span></span><br><span class="line"><span class="built_in">console</span>.log(spliceRes, arr)  <span class="comment">// [20, 30] &amp; [10, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 40, 50]</span></span><br><span class="line"><span class="comment">// 只剪切不填</span></span><br><span class="line"><span class="keyword">const</span> spliceRes = arr.splice(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">// arr = [10, 40, 50]  spliceRes = [20, 30]</span></span><br><span class="line"><span class="comment">// 增加但不移除</span></span><br><span class="line"><span class="keyword">const</span> spliceRes2 = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)  <span class="comment">// arr = [10, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 20, 30, 40, 50]  spliceRes2 = []</span></span><br></pre></td></tr></table></figure>



<h2 id="10-20-30-map-parseInt-返回结果是什么"><a href="#10-20-30-map-parseInt-返回结果是什么" class="headerlink" title="[10,20,30].map(parseInt)   返回结果是什么"></a>[10,20,30].map(parseInt)   返回结果是什么</h2><p><em>网红题</em></p>
<ul>
<li>map 的参数和返回值</li>
<li>parseInt 参数和返回值（可参考：<a href="https://www.w3school.com.cn/js/jsref_parseint.asp">parseInt函数</a>， <a href="https://www.cnblogs.com/anjey/archive/2012/04/13/2445430.html">浅谈 js中parseInt函数的解析</a>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].map(<span class="built_in">parseInt</span>) <span class="comment">// res = [10, NaN, NaN]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆解（考察重点）, 与上面的写法完全一样</span></span><br><span class="line"><span class="comment">// const res = [10, 20, 30].map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     return parseInt(item, index) // index 表示进制</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>



<h2 id="ajax-请求-get-和-post-的区别"><a href="#ajax-请求-get-和-post-的区别" class="headerlink" title="ajax 请求 get 和 post 的区别"></a>ajax 请求 get 和 post 的区别</h2><ul>
<li>get 一般用于查询操作，post 一般用户提交操作</li>
<li>get 参数拼接在 url 上，post 放在请求体内（数据体积可更大）</li>
<li>安全性∶ post 易于防止 CSRF</li>
</ul>
<h1 id="题目-4"><a href="#题目-4" class="headerlink" title="题目 - 4"></a>题目 - 4</h1><h2 id="函数-call-和-apply-的区别"><a href="#函数-call-和-apply-的区别" class="headerlink" title="函数 call 和 apply 的区别"></a>函数 call 和 apply 的区别</h2><ul>
<li>传参方式不同：call 是从第二个参数开始，依次传入，apply 是可以传入一个数组</li>
</ul>
<h2 id="事件代理（委托）是什么（重点）"><a href="#事件代理（委托）是什么（重点）" class="headerlink" title="事件代理（委托）是什么（重点）"></a>事件代理（委托）是什么（重点）</h2><ul>
<li>把原本需要绑定的事件委托给父元素，让父元素担当事件监听职务。原理是DOM元素事件冒泡。使用事件代理好处是可以提高性能</li>
<li>可以大量节省内存占用，减少事件注册</li>
<li>可以实现当新增子对象时无需再次对其绑定</li>
</ul>
<h2 id="闭包是什么，有什么特性，有什么负面影响"><a href="#闭包是什么，有什么特性，有什么负面影响" class="headerlink" title="闭包是什么，有什么特性，有什么负面影响"></a>闭包是什么，有什么特性，有什么负面影响</h2><ul>
<li>回顾作用域和自由变量</li>
<li>回顾闭包应用场景：作为参数被传入，作为返回值被返回</li>
<li>回顾：自由变量的查找，要在函数定义的地方（而非执行的地方）</li>
<li>影响：变量会常驻内存，得不到释放。闭包不要乱用</li>
</ul>
<h1 id="题目-5"><a href="#题目-5" class="headerlink" title="题目 - 5"></a>题目 - 5</h1><h2 id="如何阻止事件冒泡和默认行为"><a href="#如何阻止事件冒泡和默认行为" class="headerlink" title="如何阻止事件冒泡和默认行为"></a>如何阻止事件冒泡和默认行为</h2><ul>
<li>event.stopPropagation()</li>
<li>event.preventDefault()</li>
</ul>
<h2 id="查找、添加、删除、移动-DOM-节点的方法"><a href="#查找、添加、删除、移动-DOM-节点的方法" class="headerlink" title="查找、添加、删除、移动 DOM 节点的方法"></a>查找、添加、删除、移动 DOM 节点的方法</h2><ul>
<li>n 个 API</li>
</ul>
<h2 id="如何减少-DOM-操作"><a href="#如何减少-DOM-操作" class="headerlink" title="如何减少 DOM 操作"></a>如何减少 DOM 操作</h2><ul>
<li>缓存 DOM 查询结果</li>
<li>多次 DOM 操作，合并到一次插入（创建 Fragment 文档片段）</li>
</ul>
<h1 id="题目-6"><a href="#题目-6" class="headerlink" title="题目 - 6"></a>题目 - 6</h1><h2 id="解释-jsonp-的原理，为何它不是真正的-ajax"><a href="#解释-jsonp-的原理，为何它不是真正的-ajax" class="headerlink" title="解释 jsonp 的原理，为何它不是真正的 ajax"></a>解释 jsonp 的原理，为何它不是真正的 ajax</h2><ul>
<li>浏览器的同源策略（服务端没有同源策略）和跨域</li>
<li>哪些 html 标签能绕过跨域（img、script）</li>
<li>jsonp 没有用到 XMLHTTPRequest API，它可以说是一个 JS 加载的变种方案来实现跨域信息的交换</li>
</ul>
<h2 id="document-load-和-ready-的区别"><a href="#document-load-和-ready-的区别" class="headerlink" title="document load 和 ready 的区别"></a>document load 和 ready 的区别</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// DOM 渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="和-的不同"><a href="#和-的不同" class="headerlink" title="== 和 === 的不同"></a>== 和 === 的不同</h2><ul>
<li>== 会尝试类型转换</li>
<li>=== 严格相等</li>
<li>哪些场景才用 ==   （== null）</li>
</ul>
<h1 id="题目-7"><a href="#题目-7" class="headerlink" title="题目 - 7"></a>题目 - 7</h1><h2 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h2><ul>
<li><p>函数声明：function fn() {…}</p>
</li>
<li><p>函数表达式：const fn = function() {…}</p>
</li>
<li><p>函数声明会在代码执行前预加载(函数提升，直接函数整体加载完成)，而函数表达式不会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">const</span> res = sum(<span class="number">10</span>, <span class="number">20</span>)  <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> res = sum(<span class="number">10</span>, <span class="number">20</span>)  <span class="comment">// sum not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="new-Object-和-Object-create-的区别"><a href="#new-Object-和-Object-create-的区别" class="headerlink" title="new Object() 和 Object.create() 的区别"></a>new Object() 和 Object.create() 的区别</h2><p><em>网红题</em></p>
<ul>
<li><p>{} 等同于 new Object()，原型 Object.prototype</p>
</li>
<li><p>Object.create(null) 没有原型(必须传递参数，null代表空对象)</p>
</li>
<li><p>Object.create({…}) 可指定原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// obj1、obj2 都有隐式原型，并且指向 Object 构造函数的显式原型</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">20</span>,</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">20</span>,</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// const obj21 = new Object(obj1)  obj1 === obj2  =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="comment">// &#123;&#125; 空对象并且展开后显示 No properties</span></span><br><span class="line"><span class="keyword">const</span> obj4 = <span class="keyword">new</span> <span class="built_in">Object</span>() <span class="comment">// &#123;&#125; 有隐式原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj5 = <span class="built_in">Object</span>.create(&#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">20</span>,</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 虽然 obj5 是空对象 &#123;&#125;，但是 obj5.a = 10，这是因为 obj5 的原型里面包含 a、b、sum</span></span><br><span class="line"><span class="comment">// 所以可以得出结论，当用 create 创建的时候，会把 create 里面的东西放在一个空对象的原型中</span></span><br><span class="line"><span class="comment">// 也就是 Object.create() 会新建一个空对象，然后把空对象的原型挂到传入的对象上</span></span><br><span class="line"><span class="comment">// 如果传入 null 就没有原型</span></span><br><span class="line"><span class="keyword">const</span> obj6 = <span class="built_in">Object</span>.create(obj1) <span class="comment">// obj6 原型指向了 obj1，obj1 改变 obj6 也变</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="关于-this-的场景题"><a href="#关于-this-的场景题" class="headerlink" title="关于 this 的场景题"></a>关于 this 的场景题</h2><ul>
<li><p>只有执行的时候才能确定 this 的指向，而非定义时确定的 this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">    count: <span class="number">1</span>,</span><br><span class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount()) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> func = User.getCount</span><br><span class="line"><span class="built_in">console</span>.log(func()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="题目-8"><a href="#题目-8" class="headerlink" title="题目 - 8"></a>题目 - 8</h1><h2 id="关于作用域和自由变量的场景题-1"><a href="#关于作用域和自由变量的场景题-1" class="headerlink" title="关于作用域和自由变量的场景题 - 1"></a>关于作用域和自由变量的场景题 - 1</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3 个 4</span></span><br></pre></td></tr></table></figure>

<h2 id="判断字符串以字母开头，后面字母数字下划线，长度-6-30"><a href="#判断字符串以字母开头，后面字母数字下划线，长度-6-30" class="headerlink" title="判断字符串以字母开头，后面字母数字下划线，长度 6 - 30"></a>判断字符串以字母开头，后面字母数字下划线，长度 6 - 30</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^[a-zA-Z]\w&#123;6,29&#125;$/</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式(菜鸟教程)</a></p>
<p><a href="https://deerchao.cn/tutorials/regex/regex.htm#top">正则表达式30分钟入门教程</a></p>
<h2 id="关于作用域和自由变量的场景题-2"><a href="#关于作用域和自由变量的场景题-2" class="headerlink" title="关于作用域和自由变量的场景题 - 2"></a>关于作用域和自由变量的场景题 - 2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(a) <span class="comment">// 100</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    alert(a) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">alert(a) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h1 id="题目-9"><a href="#题目-9" class="headerlink" title="题目 - 9"></a>题目 - 9</h1><h2 id="手写字符串-trim-方法，保证浏览器兼容性"><a href="#手写字符串-trim-方法，保证浏览器兼容性" class="headerlink" title="手写字符串 trim 方法，保证浏览器兼容性"></a>手写字符串 trim 方法，保证浏览器兼容性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型、this、正则</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^\s+/</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\s+$/</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何获取多个数字中的最大值"><a href="#如何获取多个数字中的最大值" class="headerlink" title="如何获取多个数字中的最大值"></a>如何获取多个数字中的最大值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// const nums = Array.prototype.slice.call(arguments) // 变为数组</span></span><br><span class="line">    <span class="keyword">const</span> nums = [...arguments]</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; max) &#123;</span><br><span class="line">            max = n</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxValue(<span class="number">3</span>, <span class="number">12</span>, <span class="number">4131</span>, <span class="number">31</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>) <span class="comment">// 以及 Math.min</span></span><br></pre></td></tr></table></figure>

<h2 id="如何用-JS-实现继承"><a href="#如何用-JS-实现继承" class="headerlink" title="如何用 JS 实现继承"></a>如何用 JS 实现继承</h2><ul>
<li>class 继承</li>
<li>prototype 继承</li>
</ul>
<h1 id="题目-10"><a href="#题目-10" class="headerlink" title="题目 - 10"></a>题目 - 10</h1><h2 id="如何捕获-JS-程序中的异常"><a href="#如何捕获-JS-程序中的异常" class="headerlink" title="如何捕获 JS 程序中的异常"></a>如何捕获 JS 程序中的异常</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ex); <span class="comment">// 手动捕获 catch</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动捕获</span></span><br><span class="line"><span class="comment">//                          信息     源码     行号	列号	  错误栈</span></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">message, source, lineNum, colNum, error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一，对跨域的 js，如 CDN 的，不会有详细的报错信息</span></span><br><span class="line">    <span class="comment">// 第二，对于压缩的 js，还要配合 sourceMap 反查到未压缩代码的行、列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="什么是-JSON"><a href="#什么是-JSON" class="headerlink" title="什么是 JSON"></a>什么是 JSON</h2><ul>
<li>json 是一种数据格式，本质是一段字符串</li>
<li>json 格式和 JS 对象结构一致，对 JS 语言更友好</li>
<li>window.JSON 是一个全局对象：JSON.stringify、JSON.parse</li>
</ul>
<h2 id="获取当前页面-url-参数"><a href="#获取当前页面-url-参数" class="headerlink" title="获取当前页面 url 参数"></a>获取当前页面 url 参数</h2><ul>
<li><p>传统方式，查找 location.search</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统方式（也可用拆分方式）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 去掉第一个问号，并截取到最后</span></span><br><span class="line">    <span class="keyword">const</span> search = location.search.substr(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// search: &#x27;a=10&amp;b=20&amp;c=30&#x27;</span></span><br><span class="line">    <span class="comment">// 括号为组，最后查询到的第一个参数是匹配结果，剩下的为组的结果</span></span><br><span class="line">    <span class="comment">// [^&amp;]*: 匹配非 &amp; 符号的零个或无数个</span></span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(^|&amp;)<span class="subst">$&#123;name&#125;</span>=([^&amp;]*)(&amp;|$)`</span>, <span class="string">&quot;i&quot;</span>) <span class="comment">// i 为不区分大小写</span></span><br><span class="line">    <span class="keyword">const</span> res = search.match(reg)</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res[<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line">query(<span class="string">&quot;d&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>新 API，URLSearchParams</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URLSearchParams（有浏览器兼容问题，在高版本浏览器会好一些）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> search = location.search</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> URLSearchParams(search)</span><br><span class="line">    <span class="keyword">return</span> p.get(name)</span><br><span class="line">&#125;</span><br><span class="line">query(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="题目-11"><a href="#题目-11" class="headerlink" title="题目 - 11"></a>题目 - 11</h1><h2 id="将-url-参数解析为-JS-对象"><a href="#将-url-参数解析为-JS-对象" class="headerlink" title="将 url 参数解析为 JS 对象"></a>将 url 参数解析为 JS 对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统方式，分析 search</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryToObj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> search = location.search.substr(<span class="number">1</span>) <span class="comment">// 去掉前面的 &#x27;?&#x27;</span></span><br><span class="line">    search.split(<span class="string">&quot;&amp;&quot;</span>).forEach(<span class="function">(<span class="params">paramStr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> arr = paramStr.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> key = arr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">const</span> val = arr[<span class="number">1</span>]</span><br><span class="line">        res[key] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">queryToObj()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 URLSearchParams</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryToObj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> pList = <span class="keyword">new</span> URLSearchParams(location.search)</span><br><span class="line">    <span class="built_in">console</span>.log(pList)</span><br><span class="line">    pList.forEach(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">        res[key] = val</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">queryToObj()</span><br></pre></td></tr></table></figure>

<h2 id="手写数组-flaten，考虑多层级"><a href="#手写数组-flaten，考虑多层级" class="headerlink" title="手写数组 flaten，考虑多层级"></a>手写数组 flaten，考虑多层级</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一层深度的数组，如：[10, 20, 30, [40, 50]]</span></span><br><span class="line"><span class="comment">// 可以用 concat [].concat(10, 20, 30, [40, 50]), 或</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.concat.apply([], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, [<span class="number">40</span>, <span class="number">50</span>]])</span><br><span class="line"><span class="comment">// [10, 20, 30, 40, 50]</span></span><br><span class="line"><span class="comment">// 但是多层就这种方法就不可行，需要用到递归</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不管多少层，都按照顺序拍平到一个数组里面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 验证 arr 中还有没有深层数组</span></span><br><span class="line">    <span class="keyword">const</span> isDeepArray = arr.some(<span class="function">(<span class="params">item</span>) =&gt;</span> item <span class="keyword">instanceof</span> <span class="built_in">Array</span>)</span><br><span class="line">    <span class="keyword">if</span> (!isDeepArray) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr <span class="comment">// 已经是平的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Array</span>.prototype.concat.apply([], arr)</span><br><span class="line">    <span class="keyword">return</span> flat(res) <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flat([<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>], <span class="number">10</span>, [<span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></table></figure>

<h2 id="数组去重（网红题）"><a href="#数组去重（网红题）" class="headerlink" title="数组去重（网红题）"></a>数组去重（网红题）</h2><ul>
<li><p>传统方式，遍历元素挨个比较、去重</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未找到该元素 indexof（这个方法本身也是一种遍历） 返回 -1</span></span><br><span class="line">        <span class="comment">// 相当于遍历了两次，算法效率比较低</span></span><br><span class="line">        <span class="keyword">if</span> (res.indexOf(item) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">unique([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Set</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 set （无序结构，不能重复，因此无需遍历）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line">    <span class="keyword">return</span> [...set]</span><br><span class="line">&#125;</span><br><span class="line">unique([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>考虑计算效率</p>
<p><strong>使用 set</strong></p>
</li>
</ul>
<h1 id="题目-12"><a href="#题目-12" class="headerlink" title="题目 - 12"></a>题目 - 12</h1><h2 id="手写深拷贝（重点）"><a href="#手写深拷贝（重点）" class="headerlink" title="手写深拷贝（重点）"></a>手写深拷贝（重点）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// obj 是 null，或者不是对象或数组，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化返回结果</span></span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">        result = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            result[key] = deepClone(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意，Object.assign 是追加信息，不是深拷贝！！！</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    a: <span class="number">100</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">d</span>: <span class="number">40</span> &#125;)</span><br><span class="line">a = &#123;</span><br><span class="line">    a: <span class="number">100</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    d: <span class="number">40</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    a: <span class="number">100</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a: <span class="number">100</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1, &#123; <span class="attr">d</span>: <span class="number">300</span> &#125;)</span><br><span class="line">obj1 = &#123;</span><br><span class="line">    a: <span class="number">100</span>,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: <span class="number">200</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    d: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时浅层级改 obj.a = 400 , obj1的浅层级不变 obj1.a = 100</span></span><br><span class="line"><span class="comment">// 但如果改深层级 obj.b.c = 500, obj1 的深层级也变 obj1.b.c = 500</span></span><br><span class="line"><span class="comment">// 由此可见 Object.assign 拷贝的只是 obj 的第一层级</span></span><br><span class="line"><span class="comment">// 深层级就不行了</span></span><br></pre></td></tr></table></figure>

<h2 id="介绍一下-RAF-（requestAnimationFrame）"><a href="#介绍一下-RAF-（requestAnimationFrame）" class="headerlink" title="介绍一下 RAF （requestAnimationFrame）"></a>介绍一下 RAF （requestAnimationFrame）</h2><ul>
<li>想要动画流畅，更新频率要 60帧/s，即 16.67ms 更新一次视图</li>
<li>setTimeout 要手动控制频率，而 RAF 浏览器会自动控制</li>
<li>后台标签或隐藏 ifram 中，RAF 会暂停，而 setTimeout 依然执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;style&gt;</span></span><br><span class="line"><span class="comment">    #div1 &#123;</span></span><br><span class="line"><span class="comment">        width: 100px;</span></span><br><span class="line"><span class="comment">        height: 50px;</span></span><br><span class="line"><span class="comment">        background-color: red;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br><span class="line"><span class="comment">&lt;body&gt;</span></span><br><span class="line"><span class="comment">    &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/body&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3s 把宽度从 100px 变为 640px ，即增加 540px</span></span><br><span class="line"><span class="comment">// 60帧/s ，3s 180 帧 ，每次变化 3px</span></span><br><span class="line"><span class="keyword">const</span> $div1 = $(<span class="string">&quot;#div1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> curWidth = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> maxWidth = <span class="number">640</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.css(<span class="string">&quot;width&quot;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(animate, <span class="number">16.7</span>) <span class="comment">// 问题在于自己控制时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">animate()</span><br></pre></td></tr></table></figure>

<p><em><a href="https://www.bootcdn.cn/">bootcdn</a></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RAF</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    curWidth = curWidth + <span class="number">3</span></span><br><span class="line">    $div1.css(<span class="string">&#x27;width&#x27;</span>, curWidth)</span><br><span class="line">    <span class="keyword">if</span> (curWidth &lt; maxWidth) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(animate) <span class="comment">// 时间不用自己控制，浏览器控制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">animate()</span><br></pre></td></tr></table></figure>

<h2 id="前端性能如何优化？一般从哪几个方面考虑？"><a href="#前端性能如何优化？一般从哪几个方面考虑？" class="headerlink" title="前端性能如何优化？一般从哪几个方面考虑？"></a>前端性能如何优化？一般从哪几个方面考虑？</h2><ul>
<li>原则：多使用内存、缓存，减少计算、减少网络请求</li>
<li>方向：加载页面，页面渲染，页面操作流畅度</li>
</ul>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>知识点总结</tag>
        <tag>初级前端面试真题</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue面试之Vue的使用</title>
    <url>/2020/12/28/Vue%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vue-文档"><a href="#Vue-文档" class="headerlink" title="Vue 文档"></a>Vue 文档</h1><ul>
<li>看文档学习是一种最低效的方式</li>
<li>文档是一个备忘录，给会用的人查阅，并非是入门教程</li>
<li>文档全面冗长且细节过多，不能突出面试考点</li>
</ul>
<a id="more"></a>

<h1 id="Vue-使用"><a href="#Vue-使用" class="headerlink" title="Vue 使用"></a>Vue 使用</h1><ul>
<li>基本使用，组件使用 —— 常用，必须会</li>
<li>高级特性 —— 不常用，但体现深度</li>
<li>Vuex 和 Vue-router 使用（Vue 项目最常用的框架）</li>
</ul>
<h2 id="指令、插值"><a href="#指令、插值" class="headerlink" title="指令、插值"></a>指令、插值</h2><ul>
<li>插值、表达式</li>
<li>指令、动态属性</li>
<li>∨-html：会有 XSS 风险，会覆盖子组件</li>
</ul>
<h2 id="computed-和-watch"><a href="#computed-和-watch" class="headerlink" title="computed 和 watch"></a>computed 和 watch</h2><ul>
<li><p>computed 有缓存，data 不变则不会重新计算</p>
</li>
<li><p>watch 如何深度监听， deep: true</p>
</li>
<li><p>watch 监听引用类型，拿不到 oldVal</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input v-model&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input v-model&#x3D;&quot;info.city&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#39;zs&#39;,</span><br><span class="line">            info: &#123;</span><br><span class="line">                city: &#39;ls&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        name(oldVal, val) &#123;</span><br><span class="line">            &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">            console.log(&#39;watch name&#39;, oldVal, val) &#x2F;&#x2F; 值类型，可正常拿到 oldVal 和 val</span><br><span class="line">        &#125;,</span><br><span class="line">        info: &#123;</span><br><span class="line">            handler(oldVal, val) &#123;</span><br><span class="line">                &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">                console.log(&#39;watch info&#39;, oldVal, val) &#x2F;&#x2F; 引用类型，拿不到 oldVal 。因为指针相同，此时已经指向了新的 val</span><br><span class="line">            &#125;,</span><br><span class="line">            deep: true &#x2F;&#x2F; 深度监听</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="class-和-style"><a href="#class-和-style" class="headerlink" title="class 和 style"></a>class 和 style</h2><ul>
<li>使用动态属性</li>
<li>使用驼峰式写法</li>
</ul>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul>
<li><p>v-if、v-else 的用法，可使用变量，也可以使用 === 表达式</p>
</li>
<li><p>v-if 和 v-show 的区别</p>
</li>
<li><p>v-if 和 v-show 的使用场景</p>
<p>更新不频繁 v-if，频繁切换选 v-show</p>
</li>
</ul>
<h1 id="Vue-面试题"><a href="#Vue-面试题" class="headerlink" title="Vue 面试题"></a>Vue 面试题</h1><ul>
<li>v-show 和 v-if 的区别</li>
<li>为何 v-for 中要用 key </li>
<li>描述 Vue 组件生命周期（有父子组件的情况）</li>
<li>Vue 组件如何通讯</li>
<li>描述组件渲染和更新的过程</li>
<li>双向数据绑定 v-model 的实现原理</li>
</ul>
<h1 id="循环（列表）渲染"><a href="#循环（列表）渲染" class="headerlink" title="循环（列表）渲染"></a>循环（列表）渲染</h1><ul>
<li>如何遍历对象？—— 也可以用 v-for</li>
<li>key 的重要性。key 不能乱写（如 random 或者 index），要和业务关联的信息，如 id</li>
<li>v-for 与 v-if 不能一起使用！ v-for 比 v-if 计算优先级高，或者放在 v-for 子标签中</li>
</ul>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><ul>
<li><p>event 参数，自定义参数（前面参数在标签绑定的事件中正常传递，最后传递事件需要 $event）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;increment1&quot;&gt;+1&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;increment2(2, $event)&quot;&gt;+2&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123; return &#123; num: 0 &#125; &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increment1(event) &#123;</span><br><span class="line">            console.log(&#39;event&#39;, event, event.__proto__.constructor) &#x2F;&#x2F; 是原生的 event 对象</span><br><span class="line">            console.log(event.target)</span><br><span class="line">            console.log(event.currentTarget) &#x2F;&#x2F; 注意，事件是被注册到当前元素的，和 React 不一样</span><br><span class="line">            this.num++</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 1. event 是原生的</span><br><span class="line">            &#x2F;&#x2F; 2. 事件被挂载到当前元素</span><br><span class="line">            &#x2F;&#x2F; 和 DOM 事件一样</span><br><span class="line">        &#125;,</span><br><span class="line">        increment2(val, event) &#123;</span><br><span class="line">            console.log(event.target)</span><br><span class="line">            this.num &#x3D; this.num + val</span><br><span class="line">        &#125;,</span><br><span class="line">        loadHandler() &#123; </span><br><span class="line">            &#x2F;&#x2F; do some thing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123; window.addEventListener(&#39;load&#39;, this.loadHandler) &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        &#x2F;&#x2F;【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span><br><span class="line">        &#x2F;&#x2F; 自己绑定的事件，需要自己销毁！！！</span><br><span class="line">        window.removeEventListener(&#39;load&#39;, this.loadHandler)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件修饰符，按键修饰符</p>
<p>事件修饰符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a @click.stop&#x3D;&quot;dothis&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;onSunmit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a @click.stop.prevent&#x3D;&quot;doThat&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;&#x2F;form&gt;</span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;!-- 即内部元素触发的时间先在此处理，然后才交由内部元素 --&gt;</span><br><span class="line">&lt;div @click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span><br><span class="line">&lt;div @click.self&#x3D;&quot;doThat&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>按键修饰符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl&#x3D;&quot;onClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 当且仅当 Ctrl 被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.ctrl.exact&#x3D;&quot;onCtrlClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span><br><span class="line">&lt;button @click.exact&#x3D;&quot;onClick&quot;&gt;A&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>[观察]事件被绑定到哪里</p>
</li>
</ul>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><ul>
<li>v-model</li>
<li>常见表单项：textarea、checkbox、radio、select</li>
<li>修饰符：lazy、number、trim</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;输入框: &#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- 去除两边的空格 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">&lt;!-- 类似于防抖，输入完才变化 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;name&quot;&#x2F;&gt;</span><br><span class="line">&lt;!-- 转换为数字 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;age&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;多行文本: &#123;&#123;desc&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;textarea v-model&#x3D;&quot;desc&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;&#x2F;textarea&gt; 是不允许的！！！ --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;复选框 &#123;&#123;checked&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- checked 为布尔值 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;多个复选框 &#123;&#123;checkedNames&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- checkedNames 为数组，选中项会放入数组中 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;jack&quot; value&#x3D;&quot;Jack&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;jack&quot;&gt;Jack&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;john&quot; value&#x3D;&quot;John&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;john&quot;&gt;John&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;mike&quot; value&#x3D;&quot;Mike&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;mike&quot;&gt;Mike&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;单选 &#123;&#123;gender&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- gender 是一个值，选中后 gender 就与 value 值相同 --&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;male&quot; value&#x3D;&quot;male&quot; v-model&#x3D;&quot;gender&quot;&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;male&quot;&gt;男&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;female&quot; value&#x3D;&quot;female&quot; v-model&#x3D;&quot;gender&quot;&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;female&quot;&gt;女&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;下拉列表选择 &#123;&#123;selected&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- selected 是一个值，单选列表只能选一个 --&gt;</span><br><span class="line">&lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">    &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- selectedList 为数组，被选中项放入数组中 --&gt;</span><br><span class="line">&lt;select v-model&#x3D;&quot;selectedList&quot; multiple&gt;</span><br><span class="line">    &lt;option disabled value&#x3D;&quot;&quot;&gt;请选择&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue组件使用"><a href="#Vue组件使用" class="headerlink" title="Vue组件使用"></a>Vue组件使用</h1><ul>
<li><p>props 和 $emit —— 父到子传递数据，子到父触发事件</p>
</li>
<li><p>组件间通讯 - 自定义事件（必考）</p>
</li>
</ul>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br><span class="line"><span class="comment">// 所有在兄弟组件间自定义事件都需要执行下方 import 代码，引入上方两行</span></span><br><span class="line"><span class="comment">// event 与 &#x27;./event.js&#x27; 名字自定</span></span><br><span class="line"><span class="comment">// import event from &#x27;./event&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;template&gt;</span></span><br><span class="line"><span class="comment">//    &lt;div&gt;</span></span><br><span class="line"><span class="comment">//        &lt;input type=&quot;text&quot; v-model=&quot;title&quot;/&gt;</span></span><br><span class="line"><span class="comment">//        &lt;button @click=&quot;addTitle&quot;&gt;add&lt;/button&gt;</span></span><br><span class="line"><span class="comment">//    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">// &lt;/template&gt;</span></span><br><span class="line"><span class="comment">// 兄弟组件通讯</span></span><br><span class="line"><span class="comment">// 两个 event 都是上方 Vue 的实例，并且实现了 $on 与 $emit 自定义事件能力</span></span><br><span class="line"><span class="comment">// 在当前组件绑定自定义事件，this.addTitleHandler 是为了方便解绑</span></span><br><span class="line">event.$on(<span class="string">&#x27;onAddTitle&#x27;</span>, <span class="built_in">this</span>.addTitleHandler) <span class="comment">// 一定要与 this.$emit 区分</span></span><br><span class="line"><span class="comment">// beforeDestroy() &#123;</span></span><br><span class="line"><span class="comment">//     // 及时销毁，否则可能造成内存泄露（考点：及时解绑自定义事件）</span></span><br><span class="line"><span class="comment">//     event.$off(&#x27;onAddTitle&#x27;, this.addTitleHandler)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一组件 mounted 中调用自定义事件</span></span><br><span class="line">event.$emit(<span class="string">&#x27;onAddTitle&#x27;</span>, <span class="built_in">this</span>.title)</span><br></pre></td></tr></table></figure>

<h2 id="组件生命周期（必考）"><a href="#组件生命周期（必考）" class="headerlink" title="组件生命周期（必考）"></a>组件生命周期（必考）</h2><p>生命周期（单组件）会画并能说明</p>
<ul>
<li>挂载阶段</li>
<li>更新阶段</li>
<li>销毁阶段</li>
</ul>
<p>常问：</p>
<p><strong>1.created 和 mounted 有什么区别</strong></p>
<p>created 是 Vue 的实例初始化完毕，页面并没开始渲染</p>
<p>mounted 是组件真正的在网页上渲染完毕，所以大部分情况需要在 mounted 里面进行操作，可以做 ajax 获取信息绑定事件等</p>
<p><strong>2.beforeDestroy 可能会做的事情</strong></p>
<p>解除绑定，销毁子组件以及事件监听器</p>
<h2 id="父子组件的执行顺序"><a href="#父子组件的执行顺序" class="headerlink" title="父子组件的执行顺序"></a>父子组件的执行顺序</h2><p>初始化 Vue 实例、数据更新、销毁都是从外到内，但是渲染是从内到外</p>
<p><strong>初始化 Vue 实例</strong>：父组件 created -&gt; 子组件 created -&gt; 子组件 mounted -&gt; 父组件 mounted</p>
<p><strong>当数据更新时</strong>：父组件 beforeUpdate -&gt; 子组件 beforeUpdate -&gt; 子组件 updated -&gt; 父组件 updated</p>
<p><strong>销毁</strong>：父组件 beforeDestroy -&gt; 子组件 beforeDestroy -&gt; 子组件 destroyed -&gt; 父组件 destroyed</p>
<h2 id="组件小结"><a href="#组件小结" class="headerlink" title="组件小结"></a>组件小结</h2><ul>
<li>props 和 $emit</li>
<li>组件间通讯 - 自定义事件</li>
<li>组件生命周期</li>
</ul>
<h1 id="Vue-高级特性"><a href="#Vue-高级特性" class="headerlink" title="Vue 高级特性"></a>Vue 高级特性</h1><ul>
<li>不是每个都很常用，但用到的时候必须要知道</li>
<li>考察候选人对 Vue 的掌握是否全面，且有深度</li>
<li>考察做过的项目是否有深度和复杂度（至少能用到高级特性）</li>
</ul>
<p><strong>Vue 高级特性是与其他候选人拉开差距的地方！</strong></p>
<h2 id="自定义-v-model"><a href="#自定义-v-model" class="headerlink" title="自定义 v-model"></a>自定义 v-model</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自定义 v-model，（下方为父组件代码） --&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; name &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;CustomVModel v-model&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">export default &#123;</span><br><span class="line">     data() &#123;</span><br><span class="line">         return &#123;</span><br><span class="line">             name: &quot;张三&quot;,</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件代码 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 例如：vue 颜色选择 --&gt;</span><br><span class="line">    &lt;!-- 第三步 --&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        :value&#x3D;&quot;text1&quot;</span><br><span class="line">        @input&#x3D;&quot;$emit(&#39;change1&#39;, $event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        1. 上面的 input 使用了 :value 而不是 v-model</span><br><span class="line">        2. 上面的 change1 和 model.event1 要对应起来</span><br><span class="line">        3. text1 属性对应起来</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    &#x2F;&#x2F; 第二步</span><br><span class="line">    model: &#123;</span><br><span class="line">        prop: &#39;text1&#39;, &#x2F;&#x2F; 对应 props text1</span><br><span class="line">        event: &#39;change1&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 第一步</span><br><span class="line">    props: &#123;</span><br><span class="line">        text1: String,</span><br><span class="line">        default() &#123;</span><br><span class="line">            return &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="nextTick-必考"><a href="#nextTick-必考" class="headerlink" title="$nextTick (必考)"></a>$nextTick (必考)</h2><ul>
<li>Vue 是异步渲染框架</li>
<li>Vue 的 data 改变之后，DOM 不会立刻渲染</li>
<li>$nextTick 会在 DOM 渲染之后被触发，以获取最新 DOM 节点</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;ul ref&#x3D;&quot;ul1&quot;&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;(item, index) in list&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123; item &#125;&#125;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;addItem&quot;&gt;添加一项&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;app&quot;,</span><br><span class="line">    data() &#123; return &#123; list: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], &#125;; &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addItem() &#123;</span><br><span class="line">            this.list.push(&#96;$&#123;Date.now()&#125;&#96;);</span><br><span class="line">            this.list.push(&#96;$&#123;Date.now()&#125;&#96;);</span><br><span class="line">            this.list.push(&#96;$&#123;Date.now()&#125;&#96;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; const ulElem &#x3D; this.$refs.ul1;</span><br><span class="line">            &#x2F;&#x2F; 此时这种方法获取到的长度不是 6，而是 3</span><br><span class="line">            &#x2F;&#x2F; console.log(ulElem.childNodes.length);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 1. 异步渲染，$nextTick 待 DOM 渲染完再回调</span><br><span class="line">            &#x2F;&#x2F; 2. 页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次（一次性渲染出来）</span><br><span class="line">            this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">                &#x2F;&#x2F; 获取 DOM 元素</span><br><span class="line">                const ulElem &#x3D; this.$refs.ul1;</span><br><span class="line">                console.log(ulElem.childNodes.length);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>父组件向子组件插入一些东西</p>
<ul>
<li><p>基本使用</p>
</li>
<li><p>作用域插槽</p>
<p><strong>子组件内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;a&gt;</span><br><span class="line">        &lt;!-- 通过属性传递 website 给父组件 --&gt;</span><br><span class="line">        &lt;slot :slotData&#x3D;&quot;website&quot;&gt;</span><br><span class="line">            &#123;&#123;website.subTitle&#125;&#125; &lt;!-- 默认值显示 subTitle ，即父组件不传内容时 --&gt;</span><br><span class="line">        &lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            website: &#123;</span><br><span class="line">                title: &#39;baidu&#39;,</span><br><span class="line">                subTitle: &#39;百度&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>父组件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ScopedSlotDemo&gt;</span><br><span class="line">            &lt;!-- 通过 v-slot 接收 --&gt;</span><br><span class="line">            &lt;template v-slot&#x3D;&quot;slotProps&quot;&gt;</span><br><span class="line">                &lt;!-- 通过接收 slotProps.slotData （slotData 必须与子组件传递属性名一致）来使用子组件的值 --&gt;</span><br><span class="line">                &#123;&#123;slotProps.slotData.title&#125;&#125;</span><br><span class="line">            &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;ScopedSlotDemo&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具名插槽</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;!-- 具名插槽子组件 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;slot name&#x3D;&quot;header&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;main&gt;</span><br><span class="line">            &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;main&gt;</span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">            &lt;slot name&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;footer&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;NamedSlot&gt;</span><br><span class="line">    &lt;!-- 父组件根据名字传递 --&gt;</span><br><span class="line">    &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h1&gt;将插入 header slot 中&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;将插入到 main slot 中，即未命名的 slot&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;p&gt;将插入到 footer slot 中&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;NamedSlot&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="动态、异步组件（常考）"><a href="#动态、异步组件（常考）" class="headerlink" title="动态、异步组件（常考）"></a>动态、异步组件（常考）</h2><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>不常考也不常用，但是如果被考到，说出其特性也是很加分的</p>
<ul>
<li>:is=”component-name” 用法</li>
<li>需要根据数据，动态渲染的场景。即组件类型不确定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 动态组件 --&gt;</span><br><span class="line">    &lt;component :is&#x3D;&quot;NextTickName&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 导入组件</span><br><span class="line">	import NextTick from &#39;.&#x2F;NextTick&#39;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            NextTickName: &quot;NextTick&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>循环渲染生成多个组件的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;(val, key) in newsData&quot; :key&#x3D;&quot;key&quot;&gt;</span><br><span class="line">        &lt;!-- 每一条是什么就渲染生成什么组件 --&gt;</span><br><span class="line">        &lt;component :is&#x3D;&quot;val.type&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            newsData: &#123;</span><br><span class="line">                1: &#123;</span><br><span class="line">                    type: &#39;text&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                2: &#123;</span><br><span class="line">                    type: &#39;text&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">                3: &#123;</span><br><span class="line">                    type: &#39;image&#39;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="异步组件（重点，经常考）"><a href="#异步组件（重点，经常考）" class="headerlink" title="异步组件（重点，经常考）"></a>异步组件（重点，经常考）</h3><p>这块不会将很大程度影响性能和用户体验，并且异步非常常用</p>
<ul>
<li>import() 组件</li>
<li>按需加载，异步加载大组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">        &lt;!-- 异步组件</span><br><span class="line">			只有在用的时候，点击 showFormDemo 的时候组件才会加载进来，再渲染</span><br><span class="line">		--&gt;</span><br><span class="line">        &lt;FormDemo v-if&#x3D;&quot;showFormDemo&quot; &#x2F;&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;showFormDemo &#x3D; true&quot;&gt;show form demo&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	&#x2F;&#x2F; 下方这种引入方式是同步加载，打包也是打一个包出来</span><br><span class="line">    &#x2F;&#x2F; 但是如果其中的某个包体积非常大，导致每次进入页面初始化的时候需要加载比较大的文件</span><br><span class="line">    &#x2F;&#x2F; import FormDemo from &#39;.&#x2F;FormDemo&#39;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 可以通过下方的方式引入</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#x2F;&#x2F; 通过一个函数，动态的 import 的方式引用</span><br><span class="line">            &#x2F;&#x2F; 用这种方式会极大的优化在首页或不用他时候的性能</span><br><span class="line">            &#x2F;&#x2F; 什么时候用到再去异步加载</span><br><span class="line">            FormDemo: () &#x3D;&gt; import(&#39;..&#x2F;BaseUse&#x2F;FormDemo&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><ul>
<li>缓存组件</li>
<li>频繁切换，不需要重复渲染</li>
<li>一般会在 Vue 性能优化常见的面试题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;changeState(&#39;A&#39;)&quot;&gt;A&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;changeState(&#39;B&#39;)&quot;&gt;B&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;changeState(&#39;C&#39;)&quot;&gt;C&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;keep-alive&gt; &lt;!-- tab 切换 --&gt;</span><br><span class="line">            &lt;!-- </span><br><span class="line">				如果没有 keep-alive 标签，点按钮切换会销毁前一个标签，并执行 destroyed</span><br><span class="line">				但是，通过该标签包裹后，点击切换其他标签不会触发 destroyed，</span><br><span class="line">				并且如果三个标签都被渲染过，再点击切换，都不会执行 mounted，不需要走渲染流程</span><br><span class="line">				Vue 会把之前渲染的缓存起来，然后点击的时候直接显示</span><br><span class="line">				所以如果组件很大，渲染很耗时，这样的方式会极大提升界面性能，这就是 keep-alive</span><br><span class="line">			--&gt;</span><br><span class="line">            &lt;KeepAliveStageA v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;A&#39;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;KeepAliveStageB v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;B&#39;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;KeepAliveStageC v-if&#x3D;&quot;state &#x3D;&#x3D;&#x3D; &#39;C&#39;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;keep-alive&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import KeepAliveStageA from &#39;.&#x2F;KeepAliveStateA&#39;</span><br><span class="line">import KeepAliveStageB from &#39;.&#x2F;KeepAliveStateB&#39;</span><br><span class="line">import KeepAliveStageC from &#39;.&#x2F;KeepAliveStateC&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        KeepAliveStageA,</span><br><span class="line">        KeepAliveStageB,</span><br><span class="line">        KeepAliveStageC</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            state: &#39;A&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeState(state) &#123;</span><br><span class="line">            this.state &#x3D; state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>KeepAliveStageA、KeepAliveStageB、KeepAliveStageC 代码逻辑相同，只是 A、B、C 不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;state A&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">        &#x2F;&#x2F; A 渲染</span><br><span class="line">        console.log(&#39;A mounted&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed() &#123;</span><br><span class="line">        &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">        &#x2F;&#x2F; A 销毁</span><br><span class="line">        console.log(&#39;A destroyed&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><ul>
<li>多个组件有相同逻辑的时候，抽离出来，然后按需混入不同的组件中</li>
<li>mixin 并不是完美的解决方案，会有一些问题</li>
<li>Vue 3 提出的 Composition API 旨在解决这些问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixin.js (其他组件可引用实现代码复用)文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            city: <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mixin mounted&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- MixinDemo.vue --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 混入后可以直接使用 mixin 中的 city 数据与方法 showName --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;name&#125;&#125; &#123;&#123;major&#125;&#125; &#123;&#123;city&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;button @click&#x3D;&quot;showName&quot;&gt;显示姓名&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import myMixin from &#39;.&#x2F;mixin&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    mixins: [myMixin], &#x2F;&#x2F; 可以添加多个，会自动合并起来</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#39;双越&#39;,</span><br><span class="line">            major: &#39;web 前端&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(&#39;component mounted&#39;, this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>变量来源不明确，不利于阅读（编程中所有的变量都是可查找的）</li>
<li>多 mixin 可能会造成命名冲突</li>
<li>mixin 和组件可能出现多对多的关系，复杂度较高，剪不断理还乱</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>自定义 v-model</li>
<li>$nextTick</li>
<li>slot</li>
<li>动态、异步组件</li>
<li>keep-alive</li>
<li>mixin</li>
</ul>
<p>可以不太深入，但必须知道。熟练基本用法，了解使用场景</p>
<h1 id="Vuex-使用"><a href="#Vuex-使用" class="headerlink" title="Vuex 使用"></a>Vuex 使用</h1><ul>
<li>面试考点并不多（因为熟悉 Vue 之后，vuex 没有难度）</li>
<li>但基本概念，基本使用和 API 必须要掌握</li>
<li>可能会考察 state 的数据结构设计</li>
</ul>
<p><a href="https://vuex.vuejs.org/zh/">Vuex 官方文档</a></p>
<h2 id="Vuex-基本概念"><a href="#Vuex-基本概念" class="headerlink" title="Vuex 基本概念"></a>Vuex 基本概念</h2><ul>
<li>state</li>
<li>getters</li>
<li>action</li>
<li>mutation</li>
</ul>
<h2 id="用于-Vue-组件"><a href="#用于-Vue-组件" class="headerlink" title="用于 Vue 组件"></a>用于 Vue 组件</h2><ul>
<li>dispatch</li>
<li>commit</li>
<li>mapState</li>
<li>mapGetters</li>
<li>mapActions</li>
<li>mapMutations</li>
</ul>
<p><img src="https://vuex.vuejs.org/vuex.png"></p>
<p>只能在 action 里面异步操作，不能在 mutations 里面</p>
<h1 id="Vue-router-使用"><a href="#Vue-router-使用" class="headerlink" title="Vue-router 使用"></a>Vue-router 使用</h1><ul>
<li>面试考点并不多（前提是熟悉 Vue）</li>
<li>路由模式（hash，H5 history）</li>
<li>路由配置（动态路由、懒加载）</li>
</ul>
<h2 id="Vue-router-路由模式"><a href="#Vue-router-路由模式" class="headerlink" title="Vue-router 路由模式"></a>Vue-router 路由模式</h2><ul>
<li>hash 模式（默认），如 <a href="http://abc.com/#/user/10">http://abc.com/#/user/10</a> 里面的 # 号，就是 hash，# 号后面就是路由 user/10</li>
<li>H5 history 模式，如 <a href="http://abc.com/user/20">http://abc.com/user/20</a> ,无 # 号，标准的 H5 路由模式</li>
<li>后者需要 server 端支持，因此无特殊需求可选择前者</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>, <span class="comment">// 使用 h5 history 模式</span></span><br><span class="line">    routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-router-路由配置-动态路由"><a href="#Vue-router-路由配置-动态路由" class="headerlink" title="Vue-router 路由配置 动态路由"></a>Vue-router 路由配置 动态路由</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">    <span class="comment">// 获取参数如 10 20</span></span><br><span class="line">    template: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        <span class="comment">// 动态路径参数 以冒号开头，能命中 &#x27;/user/10&#x27; &#x27;/user/20&#x27; 等格式的路由</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-router-路由配置-懒加载"><a href="#Vue-router-路由配置-懒加载" class="headerlink" title="Vue-router 路由配置 懒加载"></a>Vue-router 路由配置 懒加载</h2><p>好处在于加载第一级路由的时候，会把当前的组件 Navigator 组件异步加载出来，而 feedback 不会加载，当我们切换到 feedback 路由上面，才会异步加载 FeedBack 组件加载出来，这种方法性能会提高很多</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line">            	<span class="comment">/* webpackChunkName: &quot;navigator&quot; */</span></span><br><span class="line">                <span class="string">&#x27;./../components/Navigator&#x27;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/feedback&#x27;</span>,</span><br><span class="line">            component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line">            	<span class="comment">/* webpackChunkName: &quot;feedback&quot; */</span></span><br><span class="line">                <span class="string">&#x27;./../components/FeedBack&#x27;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><a href="https://router.vuejs.org/zh/installation.html">Vue-router 官方文档</a></p>
<h1 id="回顾之前的-Vue-面试题"><a href="#回顾之前的-Vue-面试题" class="headerlink" title="回顾之前的 Vue 面试题"></a>回顾之前的 Vue 面试题</h1><ul>
<li><p>v-show 和 v-if 的区别</p>
<p>v-show 是通过 CSS display 的方式控制显示与隐藏，v-if 通过 Vue 本身的机制控制组件动态展示或者动态销毁</p>
<p>使用场景：当组件要频繁切换的时候，用 v-show，当组件不频繁切换则用 v-if（可以回顾下 keep-alive）</p>
</li>
</ul>
<ul>
<li><p>描述 Vue 组件生命周期（有父子组件的情况）</p>
<p>画出单组件的生命周期图，三大阶段对应的父子组件的执行情况</p>
</li>
</ul>
<ul>
<li><p>Vue 组件如何通讯</p>
<p>1.父子组件通讯可以用属性和触发事件的方式</p>
<p>2.两个组件无关，或层级比较深，利用自定义事件的方式</p>
<p>3.Vuex 的通讯</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue面试题</category>
      </categories>
      <tags>
        <tag>Vue面试</tag>
        <tag>Vue使用</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript入门</title>
    <url>/2021/01/02/TypeScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="TypeScript-的定义"><a href="#TypeScript-的定义" class="headerlink" title="TypeScript 的定义"></a>TypeScript 的定义</h1><p><a href="https://www.tslang.cn/">TypeScript 官网</a></p>
<p>TypeScript 是 JavaScript 的超集，意味着它是建立在 JavaScript 语法上的一门语言，它把其他语言精妙的一些部分代入到了 JavaScript 中，从而把 JavaScript 带入到了新的高度。</p>
<a id="more"></a>

<p>JS 中的类型是动态类型，TS 中的类型是静态类型，且 TS 不能在浏览器或 node 下直接运行，需要通过编译成 JS 后执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS 动态类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 可以改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TS 静态类型</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">123</span>   <span class="comment">// let b: number = 123</span></span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span> <span class="comment">// 不可改变，a 只能是 Number 类型</span></span><br></pre></td></tr></table></figure>

<h1 id="TypeScript-带来的优势"><a href="#TypeScript-带来的优势" class="headerlink" title="TypeScript 带来的优势"></a>TypeScript 带来的优势</h1><p>例如一段 JS 代码执行会有问题，但是在编辑器中并不会提示问题，而 TS 代码则会在编辑器中直接显示错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(data.x ** <span class="number">2</span> + data.y ** <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">demo() <span class="comment">// js 执行才会报错</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params">data: &#123;x: number, y: number&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(data.x ** <span class="number">2</span> + data.y ** <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">demo1() <span class="comment">// ts 编辑器就会提示错误</span></span><br></pre></td></tr></table></figure>

<p>相较于 JS 带来的优势</p>
<ul>
<li>开发过程中，发现潜在问题</li>
<li>更友好的编辑器自动提示</li>
<li>代码语义更清晰易懂</li>
</ul>
<p>也可把静态类型声明写在外面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Point &#123;<span class="attr">x</span>: number, <span class="attr">y</span>: number&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo1</span>(<span class="params">data: Point</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(data.x ** <span class="number">2</span> + data.y ** <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="TypeScript-基础环境搭建"><a href="#TypeScript-基础环境搭建" class="headerlink" title="TypeScript 基础环境搭建"></a>TypeScript 基础环境搭建</h1><ul>
<li>安装 nodejs</li>
<li><code>npm install -g typescript</code></li>
<li><code>tsc helloworld.ts</code></li>
</ul>
<p>tsc = typescript compile，对 ts 文件进行编译，会编译生成一个 helloworld.js 文件，可以直接 <code>node helloworld</code>运行</p>
<p>简化上面操作</p>
<ul>
<li><code>npm install -g ts-node</code></li>
<li><code>ts-node helloworld</code></li>
</ul>
<h1 id="TypeScript-静态类型深入理解"><a href="#TypeScript-静态类型深入理解" class="headerlink" title="TypeScript 静态类型深入理解"></a>TypeScript 静态类型深入理解</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count: number = <span class="number">18</span> <span class="comment">// 此时 count 会具备 number 的方法如 count.toString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型 interface</span></span><br><span class="line">interface Point &#123; <span class="attr">x</span>: number y: number &#125;</span><br><span class="line"><span class="keyword">const</span> point: Point = &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;  <span class="comment">// point 变量是一个自定义的 Point 静态类型</span></span><br><span class="line">point.x  <span class="comment">// point 变量上具备 Point 类型所有的属性和方法 point.x || point.y</span></span><br></pre></td></tr></table></figure>

<h1 id="基础类型和对象类型"><a href="#基础类型和对象类型" class="headerlink" title="基础类型和对象类型"></a>基础类型和对象类型</h1><p>静态类型的作用：可以很直观的帮助我们判断变量或者属性的内容是什么</p>
<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// number、string、null、undefined、symbol、boolean、void</span></span><br><span class="line"><span class="keyword">let</span> count: number = <span class="number">123</span>; <span class="comment">// 通过静态类型很容易推断出 count 内容一定是数字</span></span><br><span class="line"><span class="keyword">let</span> stName: string = <span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;&#125;、[]、class、function</span></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> teacher: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> numbers: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="comment">// zs 必须是一个 Person 类对应的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> zs: Person = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// getTotal 是一个函数，函数的返回值是一个 number</span></span><br><span class="line"><span class="keyword">const</span> getTotal: <span class="function">() =&gt;</span> number = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型注解和类型推断"><a href="#类型注解和类型推断" class="headerlink" title="类型注解和类型推断"></a>类型注解和类型推断</h1><ul>
<li>type annotation 类型注解，我们来告诉 TS 变量是什么类型</li>
<li>type inference 类型推断，TS 会自动的去尝试分析变量的类型</li>
<li>如果 TS 能够自动分析变量类型，我们就什么也不需要做了</li>
<li>如果 TS 无法分析变量类型的话，我们就需要使用类型注解</li>
</ul>
<p><em>注：如果把声明和赋值放在一行，则可以自动推断类型，但如果先定义，在赋值，则无法推断类型，此时推断结果为 any</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把这种显示声明 count 就是 number 类型的方式就叫做类型注解</span></span><br><span class="line"><span class="keyword">let</span> count: number</span><br><span class="line">count = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当把光标放在 countInference 上面就会显示：let countInference: number</span></span><br><span class="line"><span class="comment">// 会自动根据 123 推断出 countInference 是一个 number 类型</span></span><br><span class="line"><span class="keyword">let</span> countInference = <span class="number">123</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标放在 firNum 上面会显示：const firNum: 1</span></span><br><span class="line"><span class="comment">// 这意味着不仅推断出是 number 类型， 而且值已经永远为 1</span></span><br><span class="line"><span class="keyword">const</span> firNum = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式也无需加类型注解</span></span><br><span class="line"><span class="keyword">const</span> total = firNum + <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的参数需要加类型注解，返回值可以通过自动类型推断推断出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTotal</span>(<span class="params">firNum: number, secNum: number</span>) </span>&#123; <span class="keyword">return</span> firNum + secNum &#125;</span><br><span class="line"><span class="keyword">const</span> total = getTotal(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// total 则会被自动分析出类型，无需加注解</span></span><br></pre></td></tr></table></figure>

<h1 id="函数相关类型"><a href="#函数相关类型" class="headerlink" title="函数相关类型"></a>函数相关类型</h1><p>在实际项目中，需要在函数后加类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">firNum: number, secNum: number</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果想要返回数字类型，但是代码中其他部分操作失误，导致最终返回的不是 number</span></span><br><span class="line">    <span class="comment">// 代码不会报错，因此需要加上类型注解</span></span><br><span class="line">    <span class="keyword">return</span> firNum + secNum + <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">firNum: number, secNum: number</span>): <span class="title">number</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// : void 指的是函数返回值是一个 void （空）类型，也就是无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="comment">// return 1  此时执行 return 就会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// never 指这个函数永远不可能执行到最后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorEmmiter</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">    <span class="comment">// 此时函数永远不可能执行到 console.log(123)</span></span><br><span class="line">    <span class="comment">// 也就是该函数永远不可能执行完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorEmmiter1</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123; ... &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数参数结构类型定义"><a href="#函数参数结构类型定义" class="headerlink" title="函数参数结构类型定义"></a>函数参数结构类型定义</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构语法必须要写成这种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: &#123; first: number, second: number &#125;</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> first + second</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = add(&#123; <span class="attr">first</span>: <span class="number">1</span>, <span class="attr">second</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础类型：boolean、number、string、void、undefined、symbol、null</span></span><br><span class="line"><span class="keyword">let</span> count: number</span><br><span class="line">count = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型: &#123;&#125;、[]、class、function</span></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">str: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 根据 parseInt 会推断出类型，因此不用在函数类型加 number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">const</span> func1: <span class="function">(<span class="params">str: string</span>) =&gt;</span> number = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可改变类型"><a href="#可改变类型" class="headerlink" title="可改变类型"></a>可改变类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> temp: number | string = <span class="number">123</span></span><br><span class="line">temp = <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="数组与元组"><a href="#数组与元组" class="headerlink" title="数组与元组"></a>数组与元组</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr 变量是一个数组，数组内容既可以是 number，也可以是 string</span></span><br><span class="line"><span class="keyword">const</span> arr: (number | string)[] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单纯存 string 数组</span></span><br><span class="line"><span class="keyword">const</span> strArr: string[] = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined 类型</span></span><br><span class="line"><span class="keyword">const</span> undefinedArr: <span class="literal">undefined</span>[] = [<span class="literal">undefined</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储对象类型内容</span></span><br><span class="line"><span class="comment">// 表示数组里面的每一项内容必须包含 name 属性，且值必须为 string 类型</span></span><br><span class="line"><span class="keyword">const</span> objArr: &#123; <span class="attr">name</span>: string &#125;[] = [&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;]</span><br><span class="line"><span class="comment">// 当要求比较多的时候就需要一个类型别名 type alias</span></span><br><span class="line">type User = &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objArr1: User[] = [&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;]</span><br></pre></td></tr></table></figure>

<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元组 tuple</span></span><br><span class="line"><span class="comment">// 约束数组中的每一项类别，比如第一、二项必须是字符串，第三项是数字</span></span><br><span class="line"><span class="keyword">const</span> teacherInfo: [string, string, number] = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>

<h1 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h1><p>在 TS 里面，通用性的规范就是如果能用接口去表述一些类型就用接口去表述，实在不行才会用类型别名</p>
<h2 id="属性的可有可无"><a href="#属性的可有可无" class="headerlink" title="属性的可有可无"></a>属性的可有可无</h2><p>在接口的属性描述里加问号，该属性为选填属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    <span class="comment">// 加入 ？ 号，代表改参数非必要参数</span></span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">getPersonName(person)</span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="接口中的-readonly"><a href="#接口中的-readonly" class="headerlink" title="接口中的 readonly"></a>接口中的 readonly</h2><p>在接口的描述属性前加 readonly，只能读取不能改写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    <span class="comment">// readonly</span></span><br><span class="line">    readonly name: string</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此时再改变就会在编辑器中提示错误</span></span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">getPersonName(person)</span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="校验问题"><a href="#校验问题" class="headerlink" title="校验问题"></a>校验问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是通过直接传递 person 是不会报错的</span></span><br><span class="line">getPersonName(person)</span><br><span class="line"><span class="comment">// 如果将其改为字面量的形式，则会报错，错误代码如下</span></span><br><span class="line"><span class="comment">// getPersonName(&#123; name: &#x27;zs&#x27;, gender: &#x27;male&#x27; &#125;)</span></span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>造成上面这种直接传递字面量形式报错的原因是：当以字面量形式直接传递一个对象给一个变量的时候，这时 TS 会对对象进行强校验，所以会报错，如果不以字面量形式传递对象，用一个变量缓存字面量，再传递就不会严格，只要具备接口里面要求的属性即可</p>
<h3 id="改进方式"><a href="#改进方式" class="headerlink" title="改进方式"></a>改进方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age?: number</span><br><span class="line">    <span class="comment">// Person 接口的类型中还可以有其他属性，属性名字字符串，值为任意类型</span></span><br><span class="line">    [propName: string]: any</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时字面量传递接口中未定义的属性形式不会报错</span></span><br><span class="line">getPersonName(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;)</span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="接口中的方法"><a href="#接口中的方法" class="headerlink" title="接口中的方法"></a>接口中的方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age?: number</span><br><span class="line">    [propName: string]: any</span><br><span class="line">    <span class="comment">// 需要传递方法，并且返回值为字符串形式</span></span><br><span class="line">    say(): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="comment">// 传递的方法</span></span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;say hello&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">getPersonName(person)</span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="类应用接口"><a href="#类应用接口" class="headerlink" title="类应用接口"></a>类应用接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age?: number</span><br><span class="line">    [propName: string]: any</span><br><span class="line">    say(): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让类应用 Person 接口，要求类里面必须有接口里面的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age?: number</span><br><span class="line">    [propName: string]: any</span><br><span class="line">    say(): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承于 Person</span></span><br><span class="line">interface Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    teach(): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Teacher, <span class="attr">name</span>: string): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    person.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;say hello&#x27;</span> &#125;,</span><br><span class="line">    <span class="function"><span class="title">teach</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;teach something&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">setPersonName(person, <span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="函数的类型声明"><a href="#函数的类型声明" class="headerlink" title="函数的类型声明"></a>函数的类型声明</h2><p>实际开发中应用不多</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数的类型声明，接口能代表函数的类型声明，函数的类型叫做 sayHi</span></span><br><span class="line">interface sayHi &#123;</span><br><span class="line">    (word: string): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> say: sayHi = <span class="function">(<span class="params">word: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;say hi&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类的定义与继承"><a href="#类的定义与继承" class="headerlink" title="类的定义与继承"></a>类的定义与继承</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getTeacherName</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;ls&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> Teacher()</span><br><span class="line"><span class="built_in">console</span>.log(t1.getName())</span><br><span class="line"><span class="built_in">console</span>.log(t1.getTeacherName())</span><br></pre></td></tr></table></figure>

<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>super 作用：当一个类中的方法将父类的方法覆盖掉之后，也就是重写了之后，如果这个时候还想去调用父类的方法，就可以使用 super</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承+重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getTeacherName</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;ls&#x27;</span> &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// super 指向 Person</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getName() + <span class="string">&#x27; teacher&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> Teacher()</span><br><span class="line"><span class="built_in">console</span>.log(t1.getName())</span><br><span class="line"><span class="built_in">console</span>.log(t1.getTeacherName())</span><br></pre></td></tr></table></figure>

<h1 id="类中的访问类型和构造器"><a href="#类中的访问类型和构造器" class="headerlink" title="类中的访问类型和构造器"></a>类中的访问类型和构造器</h1><p>private、protected、public 访问类型</p>
<h2 id="public-访问类型"><a href="#public-访问类型" class="headerlink" title="public 访问类型"></a>public 访问类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果在一个类里面属性或者方法直接这么写，则默认前面隐藏了 public 访问类型</span></span><br><span class="line">    <span class="comment">// public 允许在类的内外被调用(类内是指类的这个大括号之内，类外是指大括号之外)</span></span><br><span class="line">    public name: string</span><br><span class="line">    public <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// 类内调用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// 类外调用</span></span><br><span class="line">person.sayHi()</span><br></pre></td></tr></table></figure>

<h2 id="private-访问类型"><a href="#private-访问类型" class="headerlink" title="private 访问类型"></a>private 访问类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private 允许在类内被使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    private name: string</span><br><span class="line">    private <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// 可以使用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)      <span class="comment">// 可以使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.name = <span class="string">&#x27;zhangsan&#x27;</span> <span class="comment">// 无法使用</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// 无法使用</span></span><br><span class="line">person.sayHi()           <span class="comment">// 无法使用</span></span><br></pre></td></tr></table></figure>

<h2 id="protected-访问类型"><a href="#protected-访问类型" class="headerlink" title="protected 访问类型"></a>protected 访问类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protected 允许在类内及继承的子类中被使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    protected name: string</span><br><span class="line">    public <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    public <span class="function"><span class="title">sayBye</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name <span class="comment">// 可以使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// new 实例的瞬间 constructor 就会被执行</span></span><br><span class="line">    <span class="comment">// 传统写法</span></span><br><span class="line">    <span class="comment">// public name: string</span></span><br><span class="line">    <span class="comment">// constructor(name) &#123;</span></span><br><span class="line">    <span class="comment">//     this.name = name</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简化写法，一行实现</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name: string</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure>

<p>继承</p>
<p>即使父类没有写构造器，子类也必须在构造器中使用 <code>super()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; <span class="function"><span class="title">constructor</span>(<span class="params">public name: string</span>)</span> &#123; &#125; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果子类与父类都有构造器，则需要手动的调用一下父类的构造器</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public age: number</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&#x27;zhangsan&#x27;</span>) <span class="comment">// 调用父类的构造函数，并且按照父类要求传递参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(teacher.age)</span><br><span class="line"><span class="built_in">console</span>.log(teacher.name)</span><br></pre></td></tr></table></figure>

<h1 id="静态属性、getter-与-setter"><a href="#静态属性、getter-与-setter" class="headerlink" title="静态属性、getter 与 setter"></a>静态属性、getter 与 setter</h1><p>通过 getter 与 setter 可以把私有变量保护住</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有属性前面一般会加下划线</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private _name: string</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">        <span class="comment">// 可以理解为返回的时候做了一层加密处理，确保 name 数据的安全</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name + <span class="string">&#x27;asd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">        <span class="comment">// 可以对传递过来的变量做一些处理</span></span><br><span class="line">        <span class="keyword">const</span> realName = name.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">this</span>._name = realName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line"><span class="comment">// getter 的写法，不写括号调用</span></span><br><span class="line">person.name</span><br><span class="line">person.name = <span class="string">&#x27;lisi asdasd&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure>

<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>一个类只允许获取一次该类的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 首先限制不允许外部通过 new Demo() 方式创建实例</span></span><br><span class="line">    private <span class="function"><span class="title">constructor</span>(<span class="params">public name: string</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建一个 Demo 实例的方法</span></span><br><span class="line">    <span class="comment">// static 是指把后面的方法直接挂在 Demo 类身上，而非实例身上</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getInstance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 判断</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">            <span class="comment">// 注：此处可以调用 new Demo() 是因为在类内，并且 private constructor 可被类内访问</span></span><br><span class="line">            <span class="built_in">this</span>.instance = <span class="keyword">new</span> Demo(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 在 Demo 身上创建一个属性 instance</span></span><br><span class="line">    private <span class="keyword">static</span> instance: Demo</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 希望一个类只生成一个实例</span></span><br><span class="line"><span class="comment">// const demo1 = new Demo()</span></span><br><span class="line"><span class="comment">// const demo2 = new Demo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时 demo1 与 demo2 理论上是两个完全相同的东西</span></span><br><span class="line"><span class="keyword">const</span> demo1 = Demo.getInstance()</span><br><span class="line"><span class="keyword">const</span> demo2 = Demo.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(demo1.name)</span><br><span class="line"><span class="built_in">console</span>.log(demo2.name)</span><br></pre></td></tr></table></figure>

<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    public readonly name: string</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">person.name = <span class="string">&#x27;lisi&#x27;</span>  <span class="comment">// 无法更改</span></span><br><span class="line">person.name</span><br></pre></td></tr></table></figure>

<h2 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 很多类身上有通性，就可以定义一个抽象类，将通性的部分定义在里面</span></span><br><span class="line"><span class="comment">// 抽象类只能被继承，不能被实例化</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Geom</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时三个图形面积实现方法不同，因此需要再加 abstract</span></span><br><span class="line">    <span class="comment">// 此时该方法具体的实现也是抽象的，但是知道返回是一个 number</span></span><br><span class="line">    abstract getArea(): number</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以给一个通用的具体方法</span></span><br><span class="line">    width: number</span><br><span class="line">    <span class="function"><span class="title">getType</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> <span class="string">&#x27;Geom&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Geom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123; <span class="attr">name</span>: string &#125;</span><br><span class="line">interface Teacher <span class="keyword">extends</span> Person &#123; <span class="attr">teachingAge</span>: number &#125;</span><br><span class="line">interface Student <span class="keyword">extends</span> Person &#123; <span class="attr">age</span>: number &#125;</span><br><span class="line">interface Driver &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = &#123; <span class="attr">name</span>: <span class="string">&#x27;dell&#x27;</span>, <span class="attr">teachingAge</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">const</span> student = &#123; <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUserInfo = <span class="function">(<span class="params">user: Person</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInfo(teacher)</span><br><span class="line">getUserInfo(student)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript入门</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用TypeScript编写简单爬虫</title>
    <url>/2021/01/03/%E4%BD%BF%E7%94%A8TypeScript%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1.文件夹命令行中<code>npm init -y</code> 初始化 package</p>
<p>2.文件夹命令行中<code>tsc --init</code></p>
<p>3.<code>npm install -D ts-node</code> + <code>npm install typescript -D</code></p>
<a id="more"></a>

<p>4.创建 src 目录，在里面写代码</p>
<p>5.src 下创建文件 crowller.ts 文件里面随便写一个 console.log(‘hello’)</p>
<p>6.在 package.json 里面的 scripts 里写一个开发的命令 <code>&quot;dev&quot;: &quot;ts-node ./src/crowller.ts&quot;</code></p>
<p>7.测试：命令行中输入 <code>npm run dev</code></p>
<h1 id="通过-superagent-抓取-html-内容"><a href="#通过-superagent-抓取-html-内容" class="headerlink" title="通过 superagent 抓取 html 内容"></a>通过 superagent 抓取 html 内容</h1><p>接下来通过 superagent 工具来拿到远程网址上的 html 内容</p>
<p>1.命令行执行 <code>cnpm install typescript -D</code> (注意：superagent 是用 JS 语法写的，而现在使用的 TS 语法，因此直接去 import 会报错)</p>
<p>2.ts -&gt; .d.ts 翻译文件 -&gt;js 需要借助中间的翻译文件，安装后，ts 会先读取翻译文件，会帮助 ts 理解 js 内容，命令行执行<code>npm i --save-dev @types/superagent</code>, <a href="https://www.npmjs.com/package/@types/superagent">官网地址</a></p>
<p>3.编写获取网页 html 内容代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// crowller.ts 文件</span></span><br><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crowller</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 随便一个地址，例如我自己的博客</span></span><br><span class="line">    private url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储 html 内容</span></span><br><span class="line">    private rawHtml = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取网页 html 方法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getRawHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 get 方法，返回 prmoise （此处可以通过 Ctrl+鼠标左键 superagent 来寻找 Response）</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url)</span><br><span class="line">        <span class="comment">// 查找到的 Response 返回类型后，一般会在 body 或 text 里面</span></span><br><span class="line">        <span class="comment">// console.log(result.text) // 在 text 里面</span></span><br><span class="line">        <span class="built_in">this</span>.rawHtml = result.text  <span class="comment">// 存储</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取原始 html 内容</span></span><br><span class="line">        <span class="built_in">this</span>.getRawHtml()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> crowller = <span class="keyword">new</span> Crowller()</span><br></pre></td></tr></table></figure>

<p>查找到的 Response 返回内容，例如accepted、badRequest、body、charset 等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Response <span class="keyword">extends</span> NodeJS.ReadableStream &#123;</span><br><span class="line">        accepted: boolean;</span><br><span class="line">        badRequest: boolean;</span><br><span class="line">        body: any;</span><br><span class="line">        charset: string;</span><br><span class="line">        clientError: boolean;</span><br><span class="line">        error: <span class="literal">false</span> | HTTPError;</span><br><span class="line">        files: any;</span><br><span class="line">        forbidden: boolean;</span><br><span class="line">        get(header: string): string;</span><br><span class="line">        get(header: <span class="string">&#x27;Set-Cookie&#x27;</span>): string[];</span><br><span class="line">        header: any;</span><br><span class="line">        headers: any;</span><br><span class="line">        info: boolean;</span><br><span class="line">        links: object;</span><br><span class="line">        noContent: boolean;</span><br><span class="line">        notAcceptable: boolean;</span><br><span class="line">        notFound: boolean;</span><br><span class="line">        ok: boolean;</span><br><span class="line">        redirect: boolean;</span><br><span class="line">        serverError: boolean;</span><br><span class="line">        status: number;</span><br><span class="line">        statusType: number;</span><br><span class="line">        text: string;</span><br><span class="line">        type: string;</span><br><span class="line">        unauthorized: boolean;</span><br><span class="line">        xhr: XMLHttpRequest;</span><br><span class="line">        redirects: string[];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.npmjs.com/">npm官网</a> 可以搜索任意想要的包</p>
<h1 id="实现内容按需提取"><a href="#实现内容按需提取" class="headerlink" title="实现内容按需提取"></a>实现内容按需提取</h1><p>安装 cheerio 库来帮助通过 jQuery 类似的语法来获取页面上各个区块的内容，安装类型定义文件</p>
<ul>
<li><code>npm install cheerio --save</code></li>
<li><code>npm install @types/cheerio -D</code>  ()</li>
</ul>
<p><a href="https://github.com/cheeriojs/cheerio">cheerio官网地址</a></p>
<h2 id="文档教程"><a href="#文档教程" class="headerlink" title="文档教程"></a>文档教程</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> $ = cheerio.load(<span class="string">&#x27;&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;h2.title&#x27;</span>).text(<span class="string">&#x27;Hello there!&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;h2&#x27;</span>).addClass(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$.html();</span><br><span class="line"><span class="comment">//=&gt; &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 class=&quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span></span><br><span class="line"><span class="comment">// 引入 cheerio</span></span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 blogTitleInfo 类型</span></span><br><span class="line">interface blog &#123;</span><br><span class="line">    title: string</span><br><span class="line">    count: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crowller</span> </span>&#123;</span><br><span class="line">    private url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取有用信息方法</span></span><br><span class="line">    <span class="function"><span class="title">getBlogInfo</span>(<span class="params">html: string</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 参考官方文档使用</span></span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(html)</span><br><span class="line">        <span class="comment">// header 标签中包含了文章展示中的所有信息</span></span><br><span class="line">        <span class="keyword">const</span> blogItems = $(<span class="string">&#x27;.post-header&#x27;</span>)</span><br><span class="line">        <span class="comment">// 测试一下是否能拿到当前页面展示文章数之和</span></span><br><span class="line">        <span class="comment">// console.log(blogItems.length)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据存储在数组中</span></span><br><span class="line">        <span class="keyword">const</span> blogTitleInfo: blog[] = []</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环获取</span></span><br><span class="line">        blogItems.map(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 找到标题所在</span></span><br><span class="line">            <span class="keyword">const</span> descs = $(element).find(<span class="string">&#x27;.post-title-link&#x27;</span>)</span><br><span class="line">            <span class="comment">// 找到结果中的第一个，防止结果中两个类名都叫 post-title-link</span></span><br><span class="line">            <span class="keyword">const</span> title = descs.eq(<span class="number">0</span>).text()</span><br><span class="line">            <span class="comment">// console.log(title)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取文章字数</span></span><br><span class="line">            <span class="keyword">const</span> articleWordsCount = $(element).find(<span class="string">&#x27;.post-meta-item&#x27;</span>)</span><br><span class="line">            <span class="comment">// const count = articleWordsCount.eq(2).text().split(&#x27; &#x27;)[74].split(&#x27;\n&#x27;)[0]</span></span><br><span class="line">            <span class="keyword">const</span> count = articleWordsCount</span><br><span class="line">                .eq(<span class="number">2</span>)</span><br><span class="line">                .text()</span><br><span class="line">                .split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>]</span><br><span class="line">                .split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                .slice(-<span class="number">1</span>)</span><br><span class="line">                .join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="comment">// console.log(&#x27;标题：&#x27; + title + &#x27; 字数：&#x27; + count)</span></span><br><span class="line">            blogTitleInfo.push(&#123; title, count &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result = &#123;</span><br><span class="line">            time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(),</span><br><span class="line">            data: blogTitleInfo</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看数据</span></span><br><span class="line">        <span class="comment">// console.log(result)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getRawHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url)</span><br><span class="line">        <span class="comment">// 获取最终想要的信息</span></span><br><span class="line">        <span class="built_in">this</span>.getBlogInfo(result.text)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getRawHtml()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> crowller = <span class="keyword">new</span> Crowller()</span><br></pre></td></tr></table></figure>

<h2 id="将信息汇总存储"><a href="#将信息汇总存储" class="headerlink" title="将信息汇总存储"></a>将信息汇总存储</h2><p>首先在根目录下新建 data 目录，将爬取到的数据存储到该文件夹下 blog.json 文件里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span></span><br><span class="line"><span class="comment">// 借助模块实现文件创建</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Blog &#123;</span><br><span class="line">    title: string</span><br><span class="line">    count: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 blogResult 定义接口</span></span><br><span class="line">interface BlogRes &#123;</span><br><span class="line">    time: number</span><br><span class="line">    data: Blog[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 fileContent 定义接口</span></span><br><span class="line">interface Content &#123;</span><br><span class="line">    [propName: number]: Blog[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crowller</span> </span>&#123;</span><br><span class="line">    private url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getBlogInfo</span>(<span class="params">html: string</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(html)</span><br><span class="line">        <span class="keyword">const</span> blogItems = $(<span class="string">&#x27;.post-header&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> blogTitleInfo: Blog[] = []</span><br><span class="line">        blogItems.map(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> descs = $(element).find(<span class="string">&#x27;.post-title-link&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> title = descs.eq(<span class="number">0</span>).text()</span><br><span class="line">            <span class="keyword">const</span> articleWordsCount = $(element).find(<span class="string">&#x27;.post-meta-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> count = articleWordsCount</span><br><span class="line">                .eq(<span class="number">2</span>)</span><br><span class="line">                .text()</span><br><span class="line">                .split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>]</span><br><span class="line">                .split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                .slice(-<span class="number">1</span>)</span><br><span class="line">                .join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            blogTitleInfo.push(&#123; title, count &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(),</span><br><span class="line">            data: blogTitleInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">getRawHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url)</span><br><span class="line">        <span class="keyword">return</span> result.text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存到 Json 文件里</span></span><br><span class="line">    <span class="function"><span class="title">generateJsonContent</span>(<span class="params">blogResult: BlogRes</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.resolve(__dirname, <span class="string">&#x27;../data/blog.json&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> fileContent: Content = &#123;&#125;</span><br><span class="line">        <span class="comment">// 判断文件路径是否存在,并且存入每个爬取时间戳下的最新文章内容</span></span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(filePath)) &#123;</span><br><span class="line">            <span class="comment">// 将读取到的字符串转换为 JSON 类型</span></span><br><span class="line">            fileContent = <span class="built_in">JSON</span>.parse(fs.readFileSync(filePath, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把新爬取到的内容存入</span></span><br><span class="line">        fileContent[blogResult.time] = blogResult.data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入文件(为了能够写入文件,转为字符串)</span></span><br><span class="line">        fs.writeFileSync(filePath, <span class="built_in">JSON</span>.stringify(fileContent))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据并调用筛选</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">initSpiderProgress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="built_in">this</span>.getRawHtml()</span><br><span class="line">        <span class="keyword">const</span> blogResult = <span class="built_in">this</span>.getBlogInfo(html)</span><br><span class="line">        <span class="built_in">this</span>.generateJsonContent(blogResult)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 开启流程</span></span><br><span class="line">        <span class="built_in">this</span>.initSpiderProgress()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> crowller = <span class="keyword">new</span> Crowller()</span><br></pre></td></tr></table></figure>

<h2 id="使用组合设计模式优化代码"><a href="#使用组合设计模式优化代码" class="headerlink" title="使用组合设计模式优化代码"></a>使用组合设计模式优化代码</h2><p>src 下新建文件 blogAnalyzer.ts 来放置分析内容代码 + 单例设计模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// blogAnalyzer.ts</span></span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Analyzer &#125; <span class="keyword">from</span> <span class="string">&#x27;./crowller&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Blog &#123;</span><br><span class="line">    title: string</span><br><span class="line">    count: string</span><br><span class="line">&#125;</span><br><span class="line">interface BlogRes &#123;</span><br><span class="line">    time: number</span><br><span class="line">    data: Blog[]</span><br><span class="line">&#125;</span><br><span class="line">interface Content &#123;</span><br><span class="line">    [propName: number]: Blog[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogAnalyzer</span> <span class="title">implements</span> <span class="title">Analyzer</span> </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> instance: Analyzer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getInstance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!BlogAnalyzer.instance) &#123;</span><br><span class="line">            BlogAnalyzer.instance = <span class="keyword">new</span> BlogAnalyzer()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BlogAnalyzer.instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">getBlogInfo</span>(<span class="params">html: string</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(html)</span><br><span class="line">        <span class="keyword">const</span> blogItems = $(<span class="string">&#x27;.post-header&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> blogTitleInfo: Blog[] = []</span><br><span class="line">        blogItems.map(<span class="function">(<span class="params">index, element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> descs = $(element).find(<span class="string">&#x27;.post-title-link&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> title = descs.eq(<span class="number">0</span>).text()</span><br><span class="line">            <span class="keyword">const</span> articleWordsCount = $(element).find(<span class="string">&#x27;.post-meta-item&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> count = articleWordsCount</span><br><span class="line">                .eq(<span class="number">2</span>)</span><br><span class="line">                .text()</span><br><span class="line">                .split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">5</span>]</span><br><span class="line">                .split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                .slice(-<span class="number">1</span>)</span><br><span class="line">                .join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            blogTitleInfo.push(&#123; title, count &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(),</span><br><span class="line">            data: blogTitleInfo</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private <span class="function"><span class="title">generateJsonContent</span>(<span class="params">blogResult: BlogRes, filePath: string</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileContent: Content = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(filePath)) &#123;</span><br><span class="line">            fileContent = <span class="built_in">JSON</span>.parse(fs.readFileSync(filePath, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        fileContent[blogResult.time] = blogResult.data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileContent</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="function"><span class="title">analyze</span>(<span class="params">html: string, filePath: string</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> blogResult = <span class="built_in">this</span>.getBlogInfo(html)</span><br><span class="line">        <span class="keyword">const</span> fileContent = <span class="built_in">this</span>.generateJsonContent(blogResult, filePath)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(fileContent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// crowller.ts</span></span><br><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> blogAnalyzer <span class="keyword">from</span> <span class="string">&#x27;./blogAnalyzer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// analyzer 接口</span></span><br><span class="line"><span class="keyword">export</span> interface Analyzer &#123;</span><br><span class="line">    analyze: <span class="function">(<span class="params">html: string, filePath: string</span>) =&gt;</span> string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crowller</span> </span>&#123;</span><br><span class="line">    private filePath = path.resolve(__dirname, <span class="string">&#x27;../data/blog.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">async</span> <span class="function"><span class="title">getRawHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url)</span><br><span class="line">        <span class="keyword">return</span> result.text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">wirteFile</span>(<span class="params">content: string</span>)</span> &#123;</span><br><span class="line">        fs.writeFileSync(<span class="built_in">this</span>.filePath, content)</span><br><span class="line">    &#125;</span><br><span class="line">    private <span class="keyword">async</span> <span class="function"><span class="title">initSpiderProgress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="built_in">this</span>.getRawHtml()</span><br><span class="line">        <span class="keyword">const</span> fileContent = <span class="built_in">this</span>.analyzer.analyze(html, <span class="built_in">this</span>.filePath)</span><br><span class="line">        <span class="built_in">this</span>.wirteFile(fileContent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private url: string, private analyzer: Analyzer</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.initSpiderProgress()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line"><span class="keyword">const</span> analyzer = blogAnalyzer.getInstance()</span><br><span class="line"><span class="keyword">new</span> Crowller(url, analyzer)</span><br></pre></td></tr></table></figure>

<h1 id="TypeScript-的编译"><a href="#TypeScript-的编译" class="headerlink" title="TypeScript 的编译"></a>TypeScript 的编译</h1><p>编译运转过程的进一步理解</p>
<p>package 文件下的 scripts 里面加入打包的内容：<code>&quot;build&quot;: &quot;tsc&quot;</code> ，然后命令行中输入： <code>npm run build</code>，打包完毕后会在 src 目录下新增爬虫相关文件同名 js 文件，但是这种目录结构并不规整，应该放入到 build 目录下</p>
<ul>
<li>打开 tsconfig.json 文件，该文件会在 tsc 命令时对编译进行控制</li>
<li>找到 outDir 参数，改成 <code>&quot;outDir&quot;: &quot;./build&quot;,</code>也就是把编译生成文件放到 build 目录下</li>
<li>重新运行<code>npm run build</code>，build 目录下的代码就可以提供使用了</li>
</ul>
<h2 id="进一步简化开发流程"><a href="#进一步简化开发流程" class="headerlink" title="进一步简化开发流程"></a><strong>进一步简化开发流程</strong></h2><p>首先将 package 里面的 scripts 里 ts-node 行去掉，此时希望自动感知 ts 文件变化，并且自动重新生成对应 js 文件</p>
<p>只需要在 build 后面改为 tsc -w 即可 <code>&quot;build&quot;: &quot;tsc -w&quot;</code>， 此时在 ts 文件做任何改变，都会立马生成最新的 js 文件</p>
<p>如果想改变后立马运行 crowller.js 需要命令行安装：<code>npm install nodemon -D</code>，安装完毕后，在 package.json 文件的 scripts 中新增指令：<code>&quot;start&quot;: &quot;nodemon node ./build/crowller.js&quot;</code>， 然后命令行：<code>npm run start</code></p>
<p>此时命令行会一直执行，这是因为每次生成 crowller 生成 blog.json 存入 data 里面，而且内容是一直销毁生成变化的，nodemon 会感知到变化，就会反复循环的执行</p>
<p><a href="https://github.com/remy/nodemon">nodemon官网</a> 对文件变化的配置，复制 nodemonConfig 下的代码，粘贴到 package.json 的 scripts 后面（删掉 delay ）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;nodemon&quot;</span>,</span><br><span class="line">  <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;http://nodemon.io&quot;</span>,</span><br><span class="line">  <span class="string">&quot;...&quot;</span>: <span class="string">&quot;... other standard package.json values&quot;</span>,</span><br><span class="line">  <span class="string">&quot;nodemonConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;ignore&quot;</span>: [<span class="string">&quot;test/*&quot;</span>, <span class="string">&quot;docs/*&quot;</span>],</span><br><span class="line">    <span class="string">&quot;delay&quot;</span>: <span class="string">&quot;2500&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以 ignore data 目录下的东西，也就是存储的数据发生变化，是不需要重新编译的，只有 src 目录下发生变化时才会重新编译</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;nodemonConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ignore&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;data/*&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>可以重新 <code>npm run start</code> 验证</p>
<h2 id="再进一步优化"><a href="#再进一步优化" class="headerlink" title="再进一步优化"></a>再进一步优化</h2><p>如果按上面优化方式，此时需要开启两个终端，因此目的是一个即可搞定</p>
<p>1.首先需要 <code>npm install concurrently -D</code> 安装 concurrently 并行执行工具</p>
<p>2.安装好之后为了使用 concurrently  方便需要在 package.json 文件中更改 dev：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev:build&quot;</span>: <span class="string">&quot;tsc -w&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev:start&quot;</span>: <span class="string">&quot;nodemon node ./build/crowller.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;concurrently npm:dev:*&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>npm:dev:*</code>代表运行命令中带有 dev: 开头所有的命令</p>
<p>命令行运行 <code>npm run dev</code>，此时就会同时运行 <code>npm run dev:build</code> + <code>npm run dev:start</code>，每次再做更改，就会同步更新</p>
]]></content>
      <categories>
        <category>TypeScript入门</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript语法进阶</title>
    <url>/2021/01/04/TypeScript%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="TypeScript-中的配置文件"><a href="#TypeScript-中的配置文件" class="headerlink" title="TypeScript 中的配置文件"></a>TypeScript 中的配置文件</h1><p>新建文件夹下执行 <code>tsc --init</code> 生成 TypeScript 编译配置文件，可以先将配置文件项中的 <code>&quot;removeComments&quot;: true</code> 打开</p>
<p>此时新建一个 demo.ts 并且执行 <code>tsc demo.ts</code> 会发现，配置文件中的删除注释项并未执行成功，这是因为指定要编译某一个文件的时候，并不会走 tsconfig.json 文件 ，只有直接在命令行运行 tsc 命令不带任何参数，才会走 tsconfig.json 文件的配置项</p>
<a id="more"></a>

<p>如果想走配置项并且想要做指定文件的编译，则需要在配置项中加入如下代码（与 compilerOptions 同级）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>: [<span class="string">&quot;./demo.ts&quot;</span>],</span><br></pre></td></tr></table></figure>

<p>这样就只会编译当前目录下的 demo.ts</p>
<p>也可以写 exclude ，表示编译除了 exclude 数组里面指定的内容，如果没写，则默认编译所有 ts 后缀文件</p>
<p><a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html">更多参考 tsconfig.json 配置官网</a></p>
<h2 id="ts-node"><a href="#ts-node" class="headerlink" title="ts-node"></a>ts-node</h2><p>如果使用命令 <code>ts-node demo.ts</code> 底层则也会走 tsconfig.json 文件</p>
<h2 id="compilerOptions-常用选项"><a href="#compilerOptions-常用选项" class="headerlink" title="compilerOptions 常用选项"></a>compilerOptions 常用选项</h2><p><a href="https://www.tslang.cn/docs/handbook/compiler-options.html">compilerOptions 配置官网</a></p>
<p>先注释掉 <code>&quot;strict&quot;: true</code></p>
<ul>
<li><p><code>&quot;removeComments&quot;: true</code>：编译过程删除 ts 中所有注释</p>
</li>
<li><p><code>&quot;noImplicitAny&quot;: true</code>：并且将 noImplicitAny 改为 false 之后，例如声明函数中的参数位置不需要指定类型，也就是不要求显式的设置 any，如果为 true 则必须指定类型，<strong>一般情况下会用 true</strong></p>
</li>
<li><p><code>&quot;strictNullChecks&quot;: true</code>：改为 false 之后，不强制检查 null 类型，下面代码就不会报错（编译过程也不会报错），如果为 true 则下面代码报错（编译过程也会报错）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student: string = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&quot;rootDir&quot;: &quot;./&quot;, &quot;outDir&quot;: &quot;./&quot;</code>：一般会把 ts 代码放入 src 文件夹下，因此需要对 rootDir 更改为 “./src”，outDir 更改为 “./build”， 运行 <code>tsc</code> 命令后，会生成 build 文件夹下生成 demo.js 文件</p>
</li>
<li><p><code>&quot;allowJs&quot;: true</code>：允许将 src 目录下的 js 文件编译成 es5(默认) js 文件（别忘先将前面配置编译文件数组删掉）</p>
</li>
<li><p><code>&quot;checkJs&quot;: true</code>：允许对 js 文件的语法做检测</p>
</li>
<li><p><code>&quot;noUnusedLocals&quot;: true</code>：对没有被使用的局部变量警告</p>
</li>
<li><p><code>&quot;noUnusedParameters&quot;: true</code>：对没有被使用的函数参数警告</p>
</li>
</ul>
<h1 id="联合类型和类型保护"><a href="#联合类型和类型保护" class="headerlink" title="联合类型和类型保护"></a>联合类型和类型保护</h1><p>联合类型就是中间有 | 运算符把两个类型放到一起</p>
<p>联合类型只会提示其共有的属性，并且如果写非共有属性，则会提示警告</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Bird &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    sing: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Dog &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    bark: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 联合类型只会提示其共有的属性</span></span><br><span class="line">    animal.fly</span><br><span class="line">    animal.sing() <span class="comment">// 会有错误提示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了避免这种错误代码的提示，或者为了让代码更严谨，就需要类型保护的机制</p>
<h2 id="类型断言保护机制"><a href="#类型断言保护机制" class="headerlink" title="类型断言保护机制"></a>类型断言保护机制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Bird &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    sing: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Dog &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    bark: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (animal.fly) &#123;</span><br><span class="line">        (animal <span class="keyword">as</span> Bird).sing()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (animal <span class="keyword">as</span> Dog).bark()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="in-语法的类型保护"><a href="#in-语法的类型保护" class="headerlink" title="in 语法的类型保护"></a>in 语法的类型保护</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Bird &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    sing: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Dog &#123;</span><br><span class="line">    fly: boolean</span><br><span class="line">    bark: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimalSecond</span>(<span class="params">animal: Bird | Dog</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;sing&#x27;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">        animal.sing()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animal.bark()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Typeof-语法做类型保护"><a href="#Typeof-语法做类型保护" class="headerlink" title="Typeof 语法做类型保护"></a>Typeof 语法做类型保护</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first: string | number, second: string | number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> second === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first + second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Instanceof-语法做类型保护"><a href="#Instanceof-语法做类型保护" class="headerlink" title="Instanceof 语法做类型保护"></a>Instanceof 语法做类型保护</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberObj</span> </span>&#123;</span><br><span class="line">    count: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSecond</span>(<span class="params">first: object | NumberObj, second: object | NumberObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first <span class="keyword">instanceof</span> NumberObj &amp;&amp; second <span class="keyword">instanceof</span> NumberObj) &#123;</span><br><span class="line">        <span class="keyword">return</span> first.count + second.count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Enum-枚举类型"><a href="#Enum-枚举类型" class="headerlink" title="Enum 枚举类型"></a>Enum 枚举类型</h1><p>空文件下执行</p>
<ul>
<li>命令行：<code>npm init -y</code></li>
<li>创建 demo.ts ，命令行 <code>npm install ts-node -D</code></li>
<li>命令行：<code>npm install typescript</code></li>
<li>将 package.json 文件中 scripts 中新增 <code>&quot;dev&quot;:&quot;ts-node ./demo.ts&quot;</code></li>
<li>demo.ts 中随便 console 一下，命令行 <code>npm run dev</code> 测试能否正常运行</li>
</ul>
<p>js 中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了增加代码可读性</span></span><br><span class="line"><span class="keyword">const</span> Status = &#123;</span><br><span class="line">    OFFLINE: <span class="number">0</span>,</span><br><span class="line">    ONLINE: <span class="number">1</span>,</span><br><span class="line">    DELETED: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status === Status.OFFLINE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;offline&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === Status.ONLINE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;online&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === Status.DELETED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;deleted&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = getResult(Status.OFFLINE)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>

<p>ts 中提供了一种枚举类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Status &#123;</span><br><span class="line">    OFFLINE,</span><br><span class="line">    ONLINE,</span><br><span class="line">    DELETED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status === Status.OFFLINE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;offline&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === Status.ONLINE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;online&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status === Status.DELETED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;deleted&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入数字依然可以运行，这是因为枚举类型不赋值则从 0 开始计数</span></span><br><span class="line"><span class="keyword">const</span> a = getResult(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(Status.OFFLINE) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.ONLINE)  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.DELETED) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Status &#123;</span><br><span class="line">    OFFLINE = <span class="number">1</span>,</span><br><span class="line">    ONLINE,</span><br><span class="line">    DELETED</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Status.OFFLINE) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.ONLINE)  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.DELETED) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">enum Status &#123;</span><br><span class="line">    OFFLINE,</span><br><span class="line">    ONLINE = <span class="number">4</span>,</span><br><span class="line">    DELETED</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Status.OFFLINE) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.ONLINE)  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(Status.DELETED) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以反查</span></span><br><span class="line"><span class="built_in">console</span>.log(Status[<span class="number">0</span>]) <span class="comment">// OFFLINE</span></span><br><span class="line"><span class="built_in">console</span>.log(Status[<span class="number">4</span>]) <span class="comment">// ONLINE</span></span><br><span class="line"><span class="built_in">console</span>.log(Status[<span class="number">5</span>]) <span class="comment">// DELETED</span></span><br></pre></td></tr></table></figure>

<h1 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h1><p>我们希望如果 first 传入的是 string， 则 second 传入的也必须是 string</p>
<p>first 传入的是 number 则 second 传入的也必须是 number</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params">first: string | number, second: string | number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">join(<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>此时就需要泛型 generic 泛指的类型，比较常用的是用 T 作为泛型的名字( Type 的简写)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数的意思是会接收一个类型，目前未知，但是 first 与 second 都应该是这个类型的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T, second: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以在调用 join 方法时指定 ABC 具体的类型</span></span><br><span class="line"><span class="comment">// ABC 就会被改成 string</span></span><br><span class="line">join&lt;string&gt;(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">// 都为数字类型</span></span><br><span class="line">join&lt;number&gt;(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 必须传入 ABC 类型的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: T[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line">map&lt;string&gt;([<span class="string">&#x27;1&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: <span class="built_in">Array</span>&lt;T&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line">map&lt;string&gt;([<span class="string">&#x27;1&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>泛型也可以定义两个类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个泛型（也可以函数返回类型为 T）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传入两个泛型类型定义</span></span><br><span class="line">join&lt;string, number&gt;(<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以不传入定义，则 ts 底层会推断第一个为 string，第二个为 number</span></span><br><span class="line">join(<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="类中的泛型以及泛型类型"><a href="#类中的泛型以及泛型类型" class="headerlink" title="类中的泛型以及泛型类型"></a>类中的泛型以及泛型类型</h1><p>泛型解决类中灵活性的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Item &#123;</span><br><span class="line">    name: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型 T 必须拥有 Item 里面所有的东西</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// data 为 T 类型的数组</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private data: T[]</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">// 返回的应该是 T 类型</span></span><br><span class="line">    getItem(index: number): string &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data[index].name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const data = new DataManager([&#x27;1&#x27;])</span></span><br><span class="line"><span class="comment">// const data = new DataManager&lt;number&gt;([1])</span></span><br><span class="line"><span class="comment">// data.getItem(0)</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([&#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125;])</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">number</span> | <span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private data: T[]</span>)</span> &#123; &#125;</span><br><span class="line">    getItem(index: number): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data[index]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Test &#123;</span><br><span class="line">    name: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager&lt;number&gt;([])</span><br></pre></td></tr></table></figure>

<h2 id="如何使用泛型作为一个具体的类型注解"><a href="#如何使用泛型作为一个具体的类型注解" class="headerlink" title="如何使用泛型作为一个具体的类型注解"></a>如何使用泛型作为一个具体的类型注解</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">param: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> param</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func: &lt;T&gt;<span class="function">(<span class="params">param: T</span>) =&gt;</span> T = hello</span><br></pre></td></tr></table></figure>

<h1 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 - namespace"></a>命名空间 - namespace</h1><p>空文件夹下依次执行</p>
<ul>
<li><p><code>npm init -y</code></p>
</li>
<li><p><code>tsc -init</code></p>
</li>
<li><p>创建 src/page.ts 及 dist 目录</p>
</li>
<li><p>打开 tsconfig.json 文件，修改 rootDir 为 “./src”，修改 outDIr 为 “./dist”，根目录创建 index.html，建好基础骨架，body 尾 引入 script 标签并且将 src 指向 dist 目录的 page.js</p>
</li>
<li><p>page.ts 文件代码，四个类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Header&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Content&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Footer&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Header();</span><br><span class="line">        <span class="keyword">new</span> Content();</span><br><span class="line">        <span class="keyword">new</span> Footer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 index .html 中 script src 标签下新建 script 标签并在其中 new 一下 Page 类，命令行 tsc -w 一下，在浏览器中打开 index.html，即有效果</p>
</li>
</ul>
<p>上诉编写代码过程存在问题：</p>
<ul>
<li><p>编译出的 js 文件会将 ts 中类名变成全局变量（比如浏览器控制台中输入 Header、Content、Footer、Page 都会是全局变量），如下，过多的全局变量一定会让代码变得不可维护</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Header = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Header&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Header;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>此时上面的代码中只有 Page 需要变成全局变量，因此需要借助命名空间，将所有东西都放到他的里面</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace Home &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Header&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Content&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Footer&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 表示在命名空间中暴露 Page</span></span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Header();</span><br><span class="line">            <span class="keyword">new</span> Content();</span><br><span class="line">            <span class="keyword">new</span> Footer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时编译后的 js 代码 Page 就可以通过命名空间的自定义名 Home 调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Home.Page = Page;</span><br></pre></td></tr></table></figure>

<p>在 index.html 的 script 标签中调用方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Home.Page()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>刷新页面即可显示效果，四个全局变量也只剩下一个命名空间 Home 一个，也只能获取里面按需暴露的 Page 方法</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>在真正编写代码时，应该将 Header、Footer、Content 这样的组件单独放到一个文件或者多个文件里面去管理，而不是把页面的逻辑与组件的逻辑都写在一起</p>
<ul>
<li><p>在 src 目录下创建 components.ts 文件</p>
</li>
<li><p>文件里面创建命名空间 Components ，将 Header、Footer、Content 剪切到该命名空间</p>
</li>
<li><p>三个类面都需要加关键词 export，将三者暴露出去，最后会生成一个 Components 的全局变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace Components &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Header&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Content&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            elem.innerText = <span class="string">&#x27;This is Footer&#x27;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 page.ts 里面使用 Components 调用类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">namespace Home &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Components.Header();</span><br><span class="line">            <span class="keyword">new</span> Components.Content();</span><br><span class="line">            <span class="keyword">new</span> Components.Footer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 index.html 中引入 components.js，刷新页面即可展示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/components.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/page.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Home.Page()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简化上面操作，将多个 js 文件打包到一个里面去，不用反复引用，将 dist 目录干掉，将 html 引入 components.js 删掉</p>
<ul>
<li>打开 tsconfig.json，将 outFile 项改为 “./build/page.js” ，打包内容放到这一个文件中去</li>
<li>将 module 项改为 “amd”</li>
<li>tsc 重新打包，并且将 html 中 script 改为即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./build/page.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Home.Page()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="依赖声明"><a href="#依赖声明" class="headerlink" title="依赖声明"></a>依赖声明</h2><p>命名空间中相互引用的东西在代码里面并不能直观的表现出来，因此需要置顶写一个 namespace 相互引用的依赖声明，意为 Home 命名空间是依赖当前目录下 components.ts 文件的，可以更直观的看清依赖关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&#x27;./components.ts&#x27; /&gt;</span></span><br><span class="line"></span><br><span class="line">namespace Home &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Components.Header();</span><br><span class="line">            <span class="keyword">new</span> Components.Content();</span><br><span class="line">            <span class="keyword">new</span> Components.Footer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="import-对应的模块化"><a href="#import-对应的模块化" class="headerlink" title="import 对应的模块化"></a>import 对应的模块化</h1><p><em>基于命名空间文件目录</em></p>
<p>通过 ES6 的 exports 在 typescript 里面做代码的模块化组织</p>
<p>修改文件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Header, Content, Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Header();</span><br><span class="line">        <span class="keyword">new</span> Content();</span><br><span class="line">        <span class="keyword">new</span> Footer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Header&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Content&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        elem.innerText = <span class="string">&#x27;This is Footer&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(elem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但此时编译后的代码是 amd 的代码（如果 tsconfig.json 中 module 项为 amd，在浏览器无法识别</p>
<p><a href="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js">require.js CDN 地址</a></p>
<p>在 index.html 配置上面引入 script 标签 src 是 require.js CDN 外链，引入之后就可以识别 amd 语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 page.ts 中导出 Page</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Header, Content, Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Header();</span><br><span class="line">        <span class="keyword">new</span> Content();</span><br><span class="line">        <span class="keyword">new</span> Footer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 index.html 中使用 requirejs 语法 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 参考 page.js 中的 page 及导出的默认 Page</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([<span class="string">&#x27;page&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> page.default()</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>后续可用 webpack 做进一步优化…</em> </p>
<h1 id="使用-Parcel-打包-TS-代码"><a href="#使用-Parcel-打包-TS-代码" class="headerlink" title="使用 Parcel 打包 TS 代码"></a>使用 Parcel 打包 TS 代码</h1><p>Parcel 是和 WebPack 相类似的打包工具，但是不需要做过多的额外的配置，其提供了很多 webpack 潜在的配置项，用起来简单舒服</p>
<ul>
<li><p>创建 TypeScript 根目录，打开，执行 <code>npm init -y</code> 、 <code>tsc --init</code></p>
</li>
<li><p>创建目录 src ，打开 tsconfig.json ，配置 <code>&quot;rootDir&quot;: &quot;./src&quot;  &quot;outDir&quot;: &quot;./dist&quot;</code></p>
</li>
<li><p>src 下新建文件 index.html、page.ts，page.ts 中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student: string = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(student)</span><br></pre></td></tr></table></figure>

<p>在 index.html 中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./page.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>报错，浏览器不识别 ts 语法，因此可以借助 Parcel 转化</p>
</li>
</ul>
<p><a href="https://github.com/parcel-bundler/parcel">Parcel 官方文档</a></p>
<ul>
<li>执行命令： <code>npm install parcel@next -D</code></li>
<li>在 package.json 中修改 scripts 中 test 为：<code>&quot;parcel ./src/index.html&quot;</code></li>
<li>npm run test 尝试编译，完成后会自动启动一个本地服务器，可以在浏览器打开就会成功运行（parcel 会分析 index.html 中的代码，发现 ts 文件之后会自动进行编译，编译成浏览器可以运行的代码，启动服务器，访问地址后，会把编译好的代码返回给浏览器）</li>
</ul>
<h1 id="描述文件中的全局类型"><a href="#描述文件中的全局类型" class="headerlink" title="描述文件中的全局类型"></a>描述文件中的全局类型</h1><p><a href="https://www.bootcdn.cn/jquery/">jQuery CDN</a></p>
<p><em>文件目录结构与上章一致</em></p>
<p>在 index.html 中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入之后就可以在 page.js 中写 jQuery 的代码，例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>虽然可以正常运行，但是会提示 $ 需要安装一个类型定义文件（会提示具体需要安装哪个）</p>
<p>可以自己写一个类型定义文件帮助打通 ts 与 js 之间的鸿沟，帮助 ts 文件理解 $ 是什么</p>
<p>src 目录下创建 jquery.d.ts，首先需要帮助 ts 理解 $ 这个全局变量，在 jquery.d.ts 中代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明了一个全局变量 $，返回值为空</span></span><br><span class="line"><span class="comment">// 有这个声明文件 ts 就会知道 $</span></span><br><span class="line">declare <span class="keyword">var</span> $: <span class="function">(<span class="params">param: () =&gt; <span class="keyword">void</span></span>) =&gt;</span> <span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<p>声明后就不会有警告提示</p>
<h2 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明了一个全局函数 $，函数的参数也为函数，最终二者返回值为空</span></span><br><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">param: () =&gt; <span class="keyword">void</span></span>): <span class="title">void</span></span></span><br></pre></td></tr></table></figure>

<h2 id="加入标签"><a href="#加入标签" class="headerlink" title="加入标签"></a>加入标签</h2><p>下面这种语法也需要类型定义文件支持</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page.ts</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;body&#x27;</span>).html(<span class="string">&#x27;&lt;div&gt;hello world&lt;/div&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jquery.d.ts</span></span><br><span class="line"><span class="comment">// 允许对一个函数名编写多个全局函数声明（叫做函数的重载）</span></span><br><span class="line">interface JqueryInstance &#123;</span><br><span class="line">    html: <span class="function">(<span class="params">html: string</span>) =&gt;</span> JqueryInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数重载</span></span><br><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="keyword">void</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: string</span>): <span class="title">JqueryInstance</span></span></span></span><br></pre></td></tr></table></figure>

<h2 id="interface-的语法实现函数重载"><a href="#interface-的语法实现函数重载" class="headerlink" title="interface 的语法实现函数重载"></a>interface 的语法实现函数重载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface JqueryInstance &#123;</span><br><span class="line">    html: <span class="function">(<span class="params">html: string</span>) =&gt;</span> JqueryInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 interface 的语法，实现函数重载</span></span><br><span class="line">interface JQuery &#123;</span><br><span class="line">    (readyFunc: <span class="function">() =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span></span><br><span class="line">    (selector: string): JqueryInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">var</span> $: JQuery</span><br></pre></td></tr></table></figure>

<h2 id="对对象、类进行类型定义及命名空间的嵌套"><a href="#对对象、类进行类型定义及命名空间的嵌套" class="headerlink" title="对对象、类进行类型定义及命名空间的嵌套"></a>对对象、类进行类型定义及命名空间的嵌套</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">new</span> $.fn.init()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如何对对象进行类型定义，以及对类进行类型定义，以及命名空间的嵌套</span></span><br><span class="line"><span class="comment">// 声明一个对象，并且里面有 fn 对象、init 构造函数(有 new 字段)</span></span><br><span class="line">declare namespace $ &#123;</span><br><span class="line">    namespace fn &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模块代码的类型描述文件"><a href="#模块代码的类型描述文件" class="headerlink" title="模块代码的类型描述文件"></a>模块代码的类型描述文件</h1><p>文件基于上章</p>
<p>通过 .d.ts 文件声明一些模块</p>
<ul>
<li>先干掉 index.html 中 jquery 引入</li>
<li>命令行：<code>npm install jquery --save</code>也就是不适用 CDN 形式引入 jquery</li>
</ul>
<p>page.ts 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;body&#x27;</span>).html(<span class="string">&#x27;&lt;div&gt;hello world&lt;/div&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">new</span> $.fn.init()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在使用这种方式最后一定要把用到的东西导出出去</p>
<p>jquery.d.ts 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 模块化</span></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;jquery&#x27;</span> &#123;</span><br><span class="line">    interface JqueryInstance &#123;</span><br><span class="line">        html: <span class="function">(<span class="params">html: string</span>) =&gt;</span> JqueryInstance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $ 为混合类型</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="keyword">void</span></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: string</span>): <span class="title">JqueryInstance</span></span></span></span><br><span class="line"><span class="function"><span class="function"></span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="title">namespace</span> <span class="title">$</span> </span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">namespace</span> <span class="title">fn</span> </span>&#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出 $</span></span><br><span class="line">    <span class="keyword">export</span> = $</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型中-keyof-语法的使用"><a href="#泛型中-keyof-语法的使用" class="headerlink" title="泛型中 keyof 语法的使用"></a>泛型中 keyof 语法的使用</h1><p>文件目录结构同上章（删除类型定义文件）</p>
<p>一段能够被编译但是提示错误代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    gender: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private info: Person</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="title">getInfo</span>(<span class="params">key: string</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.info[key]  <span class="comment">// 这段会提示错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> test = student.getInfo(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure>

<p>错误点分析：当为 getInfo() 传递参数时，不能保证传递的参数一定是 Person 里面三项中的其中一项，可以传递 hello 进去，此时浏览器控制台就会是 undefined</p>
<p>需要做类型保护</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getInfo</span>(<span class="params">key: string</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否为三者中之一</span></span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;name&#x27;</span> || key === <span class="string">&#x27;age&#x27;</span> || key === <span class="string">&quot;gender&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.info[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是此时 <code>const test = student.getInfo(&#39;name&#39;)</code>返回的类型有三种 string、number、undefined</p>
<p>改进方式：加入 as</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = student.getInfo(<span class="string">&#x27;name&#x27;</span>) <span class="keyword">as</span> string</span><br></pre></td></tr></table></figure>

<h2 id="最优写法利用泛型结合-keyof-语法解决问题"><a href="#最优写法利用泛型结合-keyof-语法解决问题" class="headerlink" title="最优写法利用泛型结合 keyof 语法解决问题"></a>最优写法利用泛型结合 keyof 语法解决问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    gender: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private info: Person</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">// keyof 对 Person 每一个属性值做遍历</span></span><br><span class="line">    <span class="comment">// 第一次遍历返回 name 也就是 T extends &#x27;name&#x27; </span></span><br><span class="line">    <span class="comment">// 等价于 type T = &#x27;name&#x27;，此时 key: &#x27;name&#x27;，此时 Person[T] = Person[&#x27;name&#x27;] = string</span></span><br><span class="line">    <span class="comment">// 依此类推...</span></span><br><span class="line">    getInfo&lt;T <span class="keyword">extends</span> keyof Person&gt;(key: T): Person[T] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.info[key]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> test = student.getInfo(<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>如果参数改为 hello 则会直接飘红提示错误</strong></p>
<h2 id="类型甚至可以是一个字符串"><a href="#类型甚至可以是一个字符串" class="headerlink" title="类型甚至可以是一个字符串"></a>类型甚至可以是一个字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Name = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="keyword">const</span> abc: Name = <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>TypeScript进阶</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>语法进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript+Express框架优化爬虫项目</title>
    <url>/2021/01/05/TypeScript-Express%E6%A1%86%E6%9E%B6%E4%BC%98%E5%8C%96%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>根据爬虫文章中代码进行扩展优化</p>
<p>通过 Express 搭建服务器，定义几个接口可以爬取网页相应内容</p>
<p>实现</p>
<a id="more"></a>

<ul>
<li><p>src 目录下创建 index.ts 文件，先随便 console 一下</p>
</li>
<li><p>将 tsconfig.json 中 rootDir 改成 “./src”</p>
</li>
<li><p>package.json 中修改 “dev:start”: “nodemon node ./build/index.js”  以及  “dev”: “tsc &amp;&amp; concurrently npm:dev:*”   （当运行 npm run dev 时先运行一次 tsc 命令编译，编译完成再运行后面的命令，防止未生成 index.js 报错）</p>
</li>
<li><p>npm run dev 测试是否正常编译运行，并且实现更改后自动编译运行</p>
</li>
<li><p>cnpm install express –save 安装 express 框架</p>
</li>
<li><p>index.ts 中引入 express ，但是会有警告，按提示安装类型定义文件：npm i –save-dev @types/express（可知 express 用 js 写的）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>npm run dev，浏览器中打开 localhost:7001 即可看到 hello world，返回 index.ts 并且指定 res、req 类型（点击导入的 express 进入文件中就可以看到 request 与 response 的类型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>src 目录下新建 router.ts 文件，放路由信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;loved world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>先在 crowller.ts 中导出 Crowller 类，然后在路由中引入，然后执行 npm run dev 然后在浏览器中输入地址 localhost:7001，data 中就会有爬取到的数据（根目录下一定要有 data 文件夹，否则报错！）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// crowller.ts 文件加入</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Crowller</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.ts 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Crowller <span class="keyword">from</span> <span class="string">&#x27;./crowller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> blogAnalyzer <span class="keyword">from</span> <span class="string">&#x27;./blogAnalyzer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 引入后使用</span></span><br><span class="line">    <span class="keyword">const</span> analyzer = blogAnalyzer.getInstance()</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line">    <span class="keyword">new</span> Crowller(url, analyzer)</span><br><span class="line">    res.send(<span class="string">&#x27;loved world&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p><em>备注： crowller.ts 代码</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> superagent <span class="keyword">from</span> <span class="string">&#x27;superagent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// analyzer 接口</span></span><br><span class="line"><span class="keyword">export</span> interface Analyzer &#123;</span><br><span class="line">    analyze: <span class="function">(<span class="params">html: string, filePath: string</span>) =&gt;</span> string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crowller</span> </span>&#123;</span><br><span class="line">    private filePath = path.resolve(__dirname, <span class="string">&#x27;../data/blog.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">async</span> <span class="function"><span class="title">getRawHtml</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> superagent.get(<span class="built_in">this</span>.url)</span><br><span class="line">        <span class="keyword">return</span> result.text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private <span class="function"><span class="title">wirteFile</span>(<span class="params">content: string</span>)</span> &#123;</span><br><span class="line">        fs.writeFileSync(<span class="built_in">this</span>.filePath, content)</span><br><span class="line">    &#125;</span><br><span class="line">    private <span class="keyword">async</span> <span class="function"><span class="title">initSpiderProgress</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="built_in">this</span>.getRawHtml()</span><br><span class="line">        <span class="keyword">const</span> fileContent = <span class="built_in">this</span>.analyzer.analyze(html, <span class="built_in">this</span>.filePath)</span><br><span class="line">        <span class="built_in">this</span>.wirteFile(fileContent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">private url: string, private analyzer: Analyzer</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.initSpiderProgress()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Crowller</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>反复刷新获取数据，会导致存储数据快速增大，最终超出上限服务器就会挂掉，所以是有安全隐患的，所以需要对接口加权限的校验</p>
<ul>
<li><p>router.ts 文件（安装 body-parser：npm install body-parser –save，index.ts 中引入 <code>import bodyParser from &#39;body-parser&#39;</code>，并且在路由的前面使用 <code>app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Crowller <span class="keyword">from</span> <span class="string">&#x27;./crowller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> blogAnalyzer <span class="keyword">from</span> <span class="string">&#x27;./blogAnalyzer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                输入 123 ，获取数据</span></span><br><span class="line"><span class="string">                &lt;form method=&quot;post&quot; action=&quot;/getData&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.body.password === <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> analyzer = blogAnalyzer.getInstance()</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line">        <span class="keyword">new</span> Crowller(url, analyzer)</span><br><span class="line">        res.send(<span class="string">&#x27;getData success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">&#x27;password Error!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>index.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">&#x27;body-parser&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>问题1：express 库的类型定义文件 .d.ts 文件类型描述不准确（如不用 bodyParser 直接用 req.body.password 代码不会提示错误）</p>
<p>问题2：当使用中间件的时候，对 req 或者 res 做了修改之后，实际上类型并不能改变</p>
<p><strong>扩展解决 Express 的类型定义文件问题</strong></p>
<p><strong>解决问题1</strong></p>
<p>router.ts 中定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Crowller <span class="keyword">from</span> <span class="string">&#x27;./crowller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> blogAnalyzer <span class="keyword">from</span> <span class="string">&#x27;./blogAnalyzer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先引入之前的定义内容再加以补充修正</span></span><br><span class="line">interface RequestWithBody <span class="keyword">extends</span> Request &#123;</span><br><span class="line">    body: &#123;</span><br><span class="line">        [key: string]: string | <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: Request, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                输入 123 ，获取数据</span></span><br><span class="line"><span class="string">                &lt;form method=&quot;post&quot; action=&quot;/getData&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/form&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">router.post(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解构</span></span><br><span class="line">    <span class="keyword">const</span> &#123; password &#125; = req.body</span><br><span class="line">    <span class="keyword">if</span> (password === <span class="string">&#x27;123&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> analyzer = blogAnalyzer.getInstance()</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line">        <span class="keyword">new</span> Crowller(url, analyzer)</span><br><span class="line">        res.send(<span class="string">&#x27;getData success!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">&#x27;password Error!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p><strong>解决问题2</strong></p>
<p>使用类型融合的方法</p>
<p>在 src 目录下创建 custom.d.ts 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型融合机制，把下面的这些定义的与原来就有的定义融合一起，融合之后就不会报错</span></span><br><span class="line">declare namespace Express &#123;</span><br><span class="line">    interface Request &#123;</span><br><span class="line">        studentName: string</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.ts 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 再写一个中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req: Request, res: Response, next: NextFunction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 直接往里加属性由于 req 原本没有该属性因此会报错</span></span><br><span class="line">    req.studentName = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>做完上诉两步之后在 router.ts 中使用 req.studentName 就会有提示，不会报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.send(<span class="string">`<span class="subst">$&#123;req.studentName&#125;</span>)</span></span><br></pre></td></tr></table></figure>

<p><em>到此上诉两个问题解决完毕</em></p>
<p>解决问题后继续，先删除测试中间件 + custom.d.ts 文件</p>
<p><strong>实现登录的功能</strong></p>
<p>利用 <a href="https://github.com/expressjs/cookie-session">cookie-session</a> 中间件 <code>npm install cookie-session --save</code> + 根据提示安装类型定义文件 <code>npm i --save-dev @types/cookie-session</code></p>
<ul>
<li><p>在 index.ts 引入中间件，然后按照官方文档使用方式使用，npm run dev 启动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">&#x27;body-parser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cookieSession <span class="keyword">from</span> <span class="string">&quot;cookie-session&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(cookieSession(&#123;</span><br><span class="line">    name: <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">    keys: [<span class="string">&#x27;student zhangsan&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    maxAge: <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">&#125;))</span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server is running&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>统一接口数据结构，优化代码</p>
<p>src 目录下新建文件夹 utils ，将 crowller.ts 及 blogAnalyzer.ts 文件放入</p>
<p>utils 下创建文件 util.ts 代码如下，然后在 router.ts 中导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Result &#123;</span><br><span class="line">    success: boolean</span><br><span class="line">    errMsg?: string</span><br><span class="line">    data: any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getResponseData = (data: any, <span class="attr">errMsg</span>: string): <span class="function"><span class="params">Result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (errMsg) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            success: <span class="literal">false</span>,</span><br><span class="line">            errMsg,</span><br><span class="line">            data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        success: <span class="literal">true</span>,</span><br><span class="line">        data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>router.ts 文件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router, Request, Response, NextFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Crowller <span class="keyword">from</span> <span class="string">&#x27;./utils/crowller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> blogAnalyzer <span class="keyword">from</span> <span class="string">&#x27;./utils/blogAnalyzer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getResponseData &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/util&#x27;</span></span><br><span class="line"></span><br><span class="line">interface RequestWithBody <span class="keyword">extends</span> Request &#123;</span><br><span class="line">    body: &#123; [key: string]: string | <span class="literal">undefined</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑中间件</span></span><br><span class="line"><span class="keyword">const</span> checkLogin = <span class="function">(<span class="params">req: RequestWithBody, res: Response, next: NextFunction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.json(getResponseData(<span class="literal">null</span>, <span class="string">&#x27;请先登录!&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">        res.send(<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;body&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;/getData&quot;&gt;爬取内容&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;/showData&quot;&gt;展示内容&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;html&gt;</span></span><br><span class="line"><span class="string">                &lt;body&gt;</span></span><br><span class="line"><span class="string">                    登录密码 123 </span></span><br><span class="line"><span class="string">                    &lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span></span><br><span class="line"><span class="string">                        &lt;button&gt;登录&lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &lt;/form&gt;</span></span><br><span class="line"><span class="string">                &lt;/body&gt;</span></span><br><span class="line"><span class="string">            &lt;/html&gt;</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.session) &#123;</span><br><span class="line">        req.session.login = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.json(getResponseData(<span class="literal">true</span>))</span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; password &#125; = req.body</span><br><span class="line">    <span class="keyword">const</span> isLogin = req.session ? req.session.login : <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">        res.json(getResponseData(<span class="literal">false</span>, <span class="string">&#x27;已经登录过!&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (password === <span class="string">&#x27;123&#x27;</span> &amp;&amp; req.session) &#123;</span><br><span class="line">            req.session.login = <span class="literal">true</span></span><br><span class="line">            res.json(getResponseData(<span class="literal">true</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(getResponseData(<span class="literal">false</span>, <span class="string">&#x27;登录失败!&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 传入 checklogin 代表先判断有无权限如果有权限才会执行下面的代码，否则直接就会提示用户请先登录</span></span><br><span class="line">router.get(<span class="string">&#x27;/getData&#x27;</span>, checkLogin, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> analyzer = blogAnalyzer.getInstance()</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://morningstar175.gitee.io/&#x27;</span></span><br><span class="line">    <span class="keyword">new</span> Crowller(url, analyzer)</span><br><span class="line">    res.json(getResponseData(<span class="literal">true</span>))</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/showData&#x27;</span>, checkLogin, <span class="function">(<span class="params">req: RequestWithBody, res: Response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.resolve(__dirname, <span class="string">&#x27;../data/blog.json&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> result = fs.readFileSync(filePath, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        res.json(getResponseData(<span class="built_in">JSON</span>.parse(result)))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.json(getResponseData(<span class="literal">false</span>, <span class="string">&#x27;数据不存在!&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>后续会利用 TypeScript 高级语法做项目重构…</p>
]]></content>
      <categories>
        <category>TypeScript进阶</category>
      </categories>
      <tags>
        <tag>爬虫项目优化</tag>
        <tag>Express 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript高级语法</title>
    <url>/2021/01/06/TypeScript%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><strong>类的装饰器</strong></p>
<p>环境搭建</p>
<p>初始化：<code>npm init -y</code> + <code>tsc --init</code></p>
<p>安装：<code>npm install ts-node -D</code> + <code>npm install typescript --save</code></p>
<p>创建：src/index.ts</p>
<p>添加：package.json 中执行脚本 “dev”: “ts-node ./src/index.ts”</p>
<a id="more"></a>

<p>装饰器本身是一个函数，实质上它是对类做修饰，在类上额外添加一些自定义内容</p>
<h1 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h1><p>装饰器通过 @ 符号使用，但由于装饰器的语法在 ts 里面是一个实验性质的语法，所以直接使用会报错</p>
<p>需要打开 tsconfig.json ，将底部实验选项中的 experimentalDecorators 与 emitDecoratorMetadata 打开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修饰类的装饰器接收到的参数实际上是类的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">constructor: any</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;run&#x27;</span>) &#125;</span><br><span class="line"></span><br><span class="line">@testDecorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; &#125; <span class="comment">// 到这一行类创建好，装饰器会立即执行</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br></pre></td></tr></table></figure>

<p>npm run dev 就会执行并且打印 run 字段</p>
<p>装饰器的运行时机：当修饰的类创建好之后立即执行，而不是当类实例化时执行</p>
<p>也可以同时使用多个装饰器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator1</span>(<span class="params">constructor: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;run1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator2</span>(<span class="params">constructor: any</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;run2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testDecorator1</span><br><span class="line">@testDecorator2</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br></pre></td></tr></table></figure>

<p>控制台中会打印 run2、run1，这是因为<strong>装饰器执行顺序为从下到上、从右到左</strong>，也就是先收集的装饰器会后被执行</p>
<h1 id="装饰器中添加方法及执行"><a href="#装饰器中添加方法及执行" class="headerlink" title="装饰器中添加方法及执行"></a>装饰器中添加方法及执行</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">constructor: any</span>) </span>&#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testDecorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">(test <span class="keyword">as</span> any).getName() <span class="comment">// 调用 getName 方法</span></span><br></pre></td></tr></table></figure>

<p>npm run dev 就会执行并且打印 zhangsan 字段</p>
<h1 id="通过逻辑判断是否执行当前装饰器"><a href="#通过逻辑判断是否执行当前装饰器" class="headerlink" title="通过逻辑判断是否执行当前装饰器"></a>通过逻辑判断是否执行当前装饰器</h1><p>对装饰器做一层工厂类型的包装就可以做参数的判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该写法简单易理解但并不规范合理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">flag: boolean</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">constructor: any</span>) </span>&#123;</span><br><span class="line">            <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">constructor: any</span>) </span>&#123; &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testDecorator(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">(test <span class="keyword">as</span> any).getName()</span><br></pre></td></tr></table></figure>

<h1 id="装饰器的规范合理写法"><a href="#装饰器的规范合理写法" class="headerlink" title="装饰器的规范合理写法"></a>装饰器的规范合理写法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// new 的意思为这是一个构造函数，构造函数会接收很多的参数，每一参数类型都是 any</span></span><br><span class="line">    <span class="comment">// 这些参数合并到一起变成数组，数组的每一项都是 any 类型，函数返回值是一个 any</span></span><br><span class="line">    <span class="comment">// T 表示可以通过 new 后面类型的构造函数被实例化出来，可以将它理解为类或者包含构造函数的东西</span></span><br><span class="line">    <span class="comment">// 因此当 constructor 类型为 T 的时候，意味着参数 constructor 里面肯定会有构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">new</span> (<span class="params">...args: any[]</span>) =&gt; <span class="title">any</span>&gt;(<span class="params">constructor: T</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对构造函数进行扩展</span></span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 对 name 属性重新赋值</span></span><br><span class="line">            name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">            <span class="comment">// 对类追加方法</span></span><br><span class="line">            <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test = testDecorator()(<span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    name: string</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line">test.getName()</span><br></pre></td></tr></table></figure>

<h1 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h1><p>对类里面的方法进行装饰，执行时机也是在类创建好之后立即对要装饰的方法执行装饰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法构造器是一个 target</span></span><br><span class="line"><span class="comment">// 普通方法：target 对应到是类的 prototype；key：被装饰类的名字</span></span><br><span class="line"><span class="comment">// 静态方法；target 对应的是类的构造函数 （方法前面加 static 为静态方法）</span></span><br><span class="line"><span class="comment">// descriptor 就是控制函数的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameDecorator</span>(<span class="params">target: any, key: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, key)</span><br><span class="line">    <span class="comment">// descriptor</span></span><br><span class="line">    descriptor.writable = <span class="literal">false</span> <span class="comment">// 代表外部不可修改该方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    name: string</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在 getName 方法上加装饰器</span></span><br><span class="line">    @getNameDecorator</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const test = new Test(&#x27;lisi&#x27;);</span></span><br><span class="line"><span class="comment">// test.getName()</span></span><br></pre></td></tr></table></figure>

<p>descriptor 与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a> 的第三个参数类似</p>
<h1 id="访问器的装饰器"><a href="#访问器的装饰器" class="headerlink" title="访问器的装饰器"></a>访问器的装饰器</h1><p>对类里面的访问器增加装饰器，方法参数与方法装饰器的参数一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数与方法装饰器参数一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitDecorator</span>(<span class="params">target: any, key: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将该访问器修饰为不可更改值，如果更改会报错</span></span><br><span class="line">    descriptor.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    private _name: string</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 访问器 getter 与 setter</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name</span><br><span class="line">    &#125;</span><br><span class="line">    @visitDecorator</span><br><span class="line">    <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">test.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(test.name)</span><br></pre></td></tr></table></figure>

<h1 id="属性的装饰器"><a href="#属性的装饰器" class="headerlink" title="属性的装饰器"></a>属性的装饰器</h1><p>参数接收不到 descriptor，但是参数 target、key 与方法装饰器参数一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要指定返回类型否则使用时会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameDecorater</span>(<span class="params">target: any, key: string</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果该属性不希望被更改，可以新建一个描述器</span></span><br><span class="line">    <span class="keyword">const</span> descriptor: PropertyDescriptor = &#123;</span><br><span class="line">        writable: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    @nameDecorater</span><br><span class="line">    name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">test.name = <span class="string">&#x27;lisi&#x27;</span> <span class="comment">// 此时修改会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(test.name)</span><br></pre></td></tr></table></figure>

<p>利用属性装饰器无法对属性做修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameDecorater</span>(<span class="params">target: any, key: string</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修改的并不是实例上的 name 而是原型上的 name</span></span><br><span class="line">    target[key] = <span class="string">&#x27;lisi&#x27;</span> <span class="comment">// 这种修改方法并不能成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个 name 是放在实例上</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    @nameDecorater</span><br><span class="line">    name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line"><span class="built_in">console</span>.log(test.name)</span><br></pre></td></tr></table></figure>

<h1 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h1><p>对类里面方法的参数做修饰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数说明：原型、方法名称、参数所在位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramDecorator</span>(<span class="params">target: any, method: string, paramIndex: number</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, method, paramIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getInfo</span>(<span class="params">@paramDecorator name: string, age: number</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">test.getInfo(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h1 id="装饰器实际使用举例"><a href="#装饰器实际使用举例" class="headerlink" title="装饰器实际使用举例"></a>装饰器实际使用举例</h1><p>首先一段由于 userInfo 是 undefined 所以报错的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo: any = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">test.getName()</span><br></pre></td></tr></table></figure>

<p>笨拙的 try catch 解决方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userInfo.name</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;userInfo.name 不存在&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userInfo.age</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;userInfo.age 不存在&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有很多的这种 get 方法，每个都添加 try catch 代码会过于冗余</p>
<p>利用方法装饰器解决 try catch 反复编写的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo: any = <span class="literal">undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catchError</span>(<span class="params">msg: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: any, key: string, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// getName 方法存在于 descriptor 上，此时 fn 对应的就是 getName 函数</span></span><br><span class="line">        <span class="keyword">const</span> fn = descriptor.value</span><br><span class="line">        descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fn()</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    @catchError(<span class="string">&#x27;userInfo.name 不存在！&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo.name</span><br><span class="line">    &#125;</span><br><span class="line">    @catchError(<span class="string">&#x27;userInfo.age 不存在！&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test()</span><br><span class="line">test.getAge()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript高级</category>
      </categories>
      <tags>
        <tag>高级语法</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
</search>
